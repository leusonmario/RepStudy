/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 18:18:22 GMT 2021
 */

package com.zaxxer.hikari;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPool;
import com.zaxxer.hikari.IConnectionCustomizer;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Properties;
import java.util.function.BiFunction;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HikariConfig_ESTest extends HikariConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test000()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNotNull(hikariDataSource0);
      
      String string0 = hikariDataSource0.toString();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNotNull(string0);
      assertEquals("HikariDataSource (null)", string0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      hikariDataSource0.setDataSourceProperties(properties0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      boolean boolean0 = false;
      hikariDataSource0.setJdbc4ConnectionTest(boolean0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      
      hikariDataSource0.setDataSourceClassName(string0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      
      long long0 = 1845L;
      hikariDataSource0.setIdleTimeout(long0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1845L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      
      String string1 = "";
      String string2 = hikariDataSource0.getConnectionTestQuery();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1845L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(string2);
      
      int int0 = hikariDataSource0.getTransactionIsolation();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1845L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), int0);
      
      long long1 = hikariDataSource0.getIdleTimeout();
      assertTrue(long1 == long0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1845L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(1845L, long1);
      
      long long2 = hikariDataSource0.getAcquireRetryDelay();
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1845L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariDataSource (null)", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, long2);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test001()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotNull(hikariConfig0);
      
      int int0 = 0;
      long long0 = 119979L;
      hikariConfig0.setAcquireRetryDelay(long0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      hikariConfig0.setMaxLifetime(long0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      
      int int1 = (-607);
      hikariConfig0.setConnectionTimeout(long0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      
      hikariConfig0.setMaximumPoolSize(int0);
      assertFalse(int0 == int1);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      
      String string0 = "";
      hikariConfig0.setLeakDetectionThreshold(long0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      
      hikariConfig0.setDataSourceClassName(string0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      
      boolean boolean0 = false;
      hikariConfig0.setInitializationFailFast(boolean0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertNull(iConnectionCustomizer0);
      
      String string1 = null;
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      
      hikariConfig0.setAcquireRetryDelay(long0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      
      String string2 = hikariConfig0.getConnectionCustomizerClassName();
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertNull(string2);
      
      long long1 = hikariConfig0.getMaxLifetime();
      assertTrue(long1 == long0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(119979L, long1);
      
      int int2 = hikariConfig0.getAcquireIncrement();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(0, int2);
      
      int int3 = 365;
      hikariConfig0.setAcquireRetries(int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getConnectionTimeout());
      assertEquals(365, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      
      String string3 = hikariConfig0.getDataSourceClassName();
      assertSame(string3, string0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getConnectionTimeout());
      assertEquals(365, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertNotNull(string3);
      assertEquals("", string3);
      
      IConnectionCustomizer iConnectionCustomizer1 = hikariConfig0.getConnectionCustomizer();
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getConnectionTimeout());
      assertEquals(365, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertNull(iConnectionCustomizer1);
      
      long long2 = hikariConfig0.getLeakDetectionThreshold();
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getConnectionTimeout());
      assertEquals(365, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(119979L, long2);
      
      String string4 = null;
      boolean boolean1 = hikariConfig0.isRegisterMbeans();
      assertTrue(boolean1 == boolean0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getConnectionTimeout());
      assertEquals(365, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertFalse(boolean1);
      
      hikariConfig0.validate();
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getConnectionTimeout());
      assertEquals(365, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
  }

  @Test(timeout = 11000)
  public void test002()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNotNull(hikariConfig0);
      
      int int0 = (-374);
      String string0 = "^n+co:$c./rI";
      hikariConfig0.setPoolName(string0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("^n+co:$c./rI", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      // Undeclared exception!
      try { 
        hikariConfig0.setMinimumPoolSize(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test003()  throws Throwable  {
      String string0 = null;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNotNull(hikariDataSource0);
      
      int int0 = 0;
      String string1 = "#etnt";
      hikariDataSource0.setMinimumPoolSize(int0);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      
      String string2 = "invalid builtin type: ";
      hikariDataSource0.setDataSourceClassName(string1);
      assertNotSame(string1, string2);
      assertFalse(string1.equals((Object)string2));
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("#etnt", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      
      long long0 = (-1841L);
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNotNull(hikariDataSource1);
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("#etnt", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      
      boolean boolean0 = true;
      hikariDataSource1.setInitializationFailFast(boolean0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      
      hikariDataSource0.setAcquireRetries(int0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("#etnt", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      
      boolean boolean1 = false;
      hikariDataSource0.setUseInstrumentation(boolean1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("#etnt", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("#etnt", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertTrue(hikariDataSource1.isInitializationFailFast());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      
      hikariDataSource0.setConnectionTestQuery(string1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(string1, string2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(string1.equals((Object)string2));
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("#etnt", hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("#etnt", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      
      hikariDataSource0.validate();
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("#etnt", hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("#etnt", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
  }

  @Test(timeout = 11000)
  public void test004()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotNull(hikariConfig0);
      
      String string0 = hikariConfig0.getDataSourceClassName();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(string0);
      
      String string1 = null;
      boolean boolean0 = hikariConfig0.isRegisterMbeans();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(boolean0);
      
      String string2 = hikariConfig0.getConnectionInitSql();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(string2);
      
      hikariConfig0.setCatalog(string2);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      String string3 = "ZC";
      long long0 = hikariConfig0.getIdleTimeout();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, long0);
      
      String string4 = "(^&M^K,$";
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      long long1 = hikariConfig0.getConnectionTimeout();
      assertFalse(long1 == long0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, long1);
  }

  @Test(timeout = 11000)
  public void test005()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "oolanVal";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test006()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNotNull(hikariDataSource0);
      
      int int0 = 3088;
      hikariDataSource0.setAcquireIncrement(int0);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      boolean boolean0 = hikariDataSource0.isInitializationFailFast();
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(boolean0);
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNotNull(hikariDataSource1);
      
      hikariDataSource1.setDataSource(hikariDataSource0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      
      HikariDataSource hikariDataSource2 = new HikariDataSource(hikariDataSource1);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals("HikariPool-1", hikariDataSource2.getPoolName());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertFalse(hikariDataSource2.isInitializationFailFast());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNotNull(hikariDataSource2);
      
      hikariDataSource0.copyState(hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertNotSame(hikariDataSource1, hikariDataSource2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource2));
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1250, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      
      hikariDataSource2.validate();
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertNotSame(hikariDataSource1, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals("HikariPool-1", hikariDataSource2.getPoolName());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertFalse(hikariDataSource2.isInitializationFailFast());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      
      String string0 = hikariDataSource0.getDataSourceClassName();
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource2);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource2));
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1250, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(string0);
      
      String string1 = hikariDataSource1.getConnectionTestQuery();
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertNotSame(hikariDataSource1, hikariDataSource2);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource2));
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertNull(string1);
      
      String string2 = "";
      hikariDataSource1.setPoolName(string2);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertNotSame(hikariDataSource1, hikariDataSource2);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource2));
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals("", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      
      String string3 = hikariDataSource2.getPoolName();
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertNotSame(hikariDataSource1, hikariDataSource2);
      assertNotSame(hikariDataSource2, hikariDataSource0);
      assertNotSame(hikariDataSource2, hikariDataSource1);
      assertNotSame(string3, string2);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource2));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource0));
      assertFalse(hikariDataSource2.equals((Object)hikariDataSource1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals("", hikariDataSource1.getPoolName());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0, hikariDataSource2.getLoginTimeout());
      assertEquals(10, hikariDataSource2.getMinimumPoolSize());
      assertNull(hikariDataSource2.getCatalog());
      assertEquals(5000L, hikariDataSource2.getConnectionTimeout());
      assertEquals(0L, hikariDataSource2.getAcquireRetryDelay());
      assertNull(hikariDataSource2.getDataSourceClassName());
      assertNull(hikariDataSource2.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource2.isRegisterMbeans());
      assertEquals("HikariPool-1", hikariDataSource2.getPoolName());
      assertEquals((-1), hikariDataSource2.getTransactionIsolation());
      assertTrue(hikariDataSource2.isAutoCommit());
      assertNull(hikariDataSource2.getConnectionInitSql());
      assertEquals(0L, hikariDataSource2.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource2.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource2.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource2.getMaxLifetime());
      assertEquals(60, hikariDataSource2.getMaximumPoolSize());
      assertNull(hikariDataSource2.getConnectionTestQuery());
      assertEquals(3, hikariDataSource2.getAcquireRetries());
      assertFalse(hikariDataSource2.isInitializationFailFast());
      assertTrue(hikariDataSource2.isJdbc4ConnectionTest());
      assertNotNull(string3);
      assertEquals("HikariPool-1", string3);
  }

  @Test(timeout = 11000)
  public void test007()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNotNull(hikariDataSource0);
      
      byte byte0 = (byte) (-40);
      byte byte1 = (byte)16;
      byte byte2 = (byte)95;
      byte byte3 = (byte)13;
      byte byte4 = (byte) (-49);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      long long0 = 0L;
      hikariDataSource0.setConnectionTimeout(long0);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      
      String string0 = hikariDataSource0.getConnectionTestQuery();
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test008()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = true;
      boolean boolean1 = true;
      hikariConfig0.setJdbc4ConnectionTest(boolean1);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      String string0 = "volatile";
      hikariConfig0.setConnectionTestQuery(string0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      hikariConfig0.setRegisterMbeans(boolean1);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      DataSource dataSource0 = null;
      String string1 = "";
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      hikariConfig0.setTransactionIsolation(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      long long0 = (-435L);
      long long1 = 2566L;
      hikariConfig0.setLeakDetectionThreshold(long1);
      assertFalse(long1 == long0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      hikariConfig0.setConnectionInitSql(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      long long2 = 4268L;
      hikariConfig0.setConnectionTimeout(long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(4268L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      String string2 = "-?ITdqSz/Hp4IEG";
      hikariConfig0.addDataSourceProperty(string2, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(4268L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      int int0 = hikariConfig0.getTransactionIsolation();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(4268L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), int0);
      
      hikariConfig0.setDataSourceClassName(string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(4268L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid transaction isolation value: 
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test009()  throws Throwable  {
      String string0 = "{9J`vKqD]?VH`0:>";
      HikariConfig hikariConfig0 = new HikariConfig();
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNotNull(hikariConfig0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      hikariConfig0.setIdleTimeout(byte0);
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      byteArray0[0] = byte0;
      hikariConfig0.setConnectionTimeout(byte0);
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      byte byte1 = (byte)17;
      byteArray0[2] = byte1;
      byte byte2 = (byte)101;
      byte byte3 = (byte) (-98);
      hikariConfig0.setConnectionTimeout(byte2);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte3);
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(101L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      byteArray0[4] = byte3;
      byte byte4 = (byte)60;
      byteArray0[4] = byte4;
      byte byte5 = (byte)35;
      byte byte6 = (byte)15;
      hikariConfig0.setDataSourceClassName(string0);
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(101L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(101L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, long0);
      
      hikariConfig0.setMaxLifetime(byteArray0[6]);
      assertEquals(8, byteArray0.length);
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(101L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)17, (byte)0, (byte)60, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      hikariConfig0.validate();
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(101L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      long long1 = hikariConfig0.getConnectionTimeout();
      assertFalse(long1 == long0);
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(101L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(101L, long1);
      
      long long2 = hikariConfig0.getAcquireRetryDelay();
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(101L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, long2);
      
      int int0 = hikariConfig0.getMinimumPoolSize();
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(101L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(10, int0);
  }

  @Test(timeout = 11000)
  public void test010()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test011()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNotNull(hikariConfig0);
      
      long long0 = (-588L);
      int int0 = 963;
      hikariConfig0.setAcquireRetryDelay(long0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      boolean boolean0 = true;
      hikariConfig0.setAutoCommit(boolean0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test012()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNotNull(hikariConfig0);
      
      int int0 = (-1970);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetries(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test013()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotNull(hikariConfig0);
      
      int int0 = (-1349);
      // Undeclared exception!
      try { 
        hikariConfig0.setMaximumPoolSize(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test014()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNotNull(hikariDataSource0);
      
      String string0 = "volatile";
      hikariDataSource0.setConnectionTestQuery(string0);
      assertEquals("volatile", hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariDataSource0.getConnectionCustomizer();
      assertEquals("volatile", hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(iConnectionCustomizer0);
      
      hikariDataSource0.setCatalog(string0);
      assertEquals("volatile", hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("volatile", hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      DataSource dataSource0 = null;
      String string1 = "";
      long long0 = (-436L);
      hikariDataSource0.setAcquireRetryDelay(long0);
      assertEquals("volatile", hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("volatile", hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      hikariDataSource0.setLeakDetectionThreshold(long0);
      assertEquals("volatile", hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("volatile", hikariDataSource0.getCatalog());
      assertEquals((-436L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      hikariDataSource0.setConnectionInitSql(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("volatile", hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("volatile", hikariDataSource0.getCatalog());
      assertEquals((-436L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      hikariDataSource0.setAcquireRetryDelay(long0);
      assertEquals("volatile", hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("volatile", hikariDataSource0.getCatalog());
      assertEquals((-436L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      hikariDataSource0.setDataSourceClassName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("volatile", hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("volatile", hikariDataSource0.getCatalog());
      assertEquals((-436L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      hikariDataSource0.setMaxLifetime(long0);
      assertEquals("volatile", hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-436L), hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("volatile", hikariDataSource0.getCatalog());
      assertEquals((-436L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      hikariDataSource0.setConnectionCustomizerClassName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("volatile", hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-436L), hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("volatile", hikariDataSource0.getCatalog());
      assertEquals((-436L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      int int0 = (-2839);
      hikariDataSource0.setAcquireIncrement(int0);
      assertEquals("volatile", hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-436L), hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("volatile", hikariDataSource0.getCatalog());
      assertEquals((-436L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      boolean boolean0 = false;
      hikariDataSource0.setJdbc4ConnectionTest(boolean0);
      assertEquals("volatile", hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals((-436L), hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("volatile", hikariDataSource0.getCatalog());
      assertEquals((-436L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      int int1 = hikariDataSource0.getMinimumPoolSize();
      assertFalse(int1 == int0);
      assertEquals("volatile", hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals((-436L), hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("volatile", hikariDataSource0.getCatalog());
      assertEquals((-436L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, int1);
      
      hikariDataSource0.setConnectionCustomizerClassName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("volatile", hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals((-436L), hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("volatile", hikariDataSource0.getCatalog());
      assertEquals((-436L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      String string2 = hikariDataSource0.getConnectionCustomizerClassName();
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertEquals("volatile", hikariDataSource0.getConnectionTestQuery());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals((-436L), hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("volatile", hikariDataSource0.getCatalog());
      assertEquals((-436L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maxLifetime cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test015()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotNull(hikariConfig0);
      
      byte byte0 = (byte)5;
      Object object0 = new Object();
      assertNotNull(object0);
      
      HikariConfig hikariConfig1 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.copyState(hikariConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception copying HikariConfig state: null
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test016()  throws Throwable  {
      String string0 = "{9J`vKqD]?VH`0:>";
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNotNull(hikariConfig0);
      
      byte byte0 = (byte) (-4);
      hikariConfig0.setIdleTimeout(byte0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-4L), hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      
      byte byte1 = (byte)73;
      byte byte2 = (byte)17;
      byte byte3 = (byte)107;
      byte byte4 = (byte) (-98);
      byte byte5 = (byte)60;
      hikariConfig0.setDataSourceClassName(string0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-4L), hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // idleTimeout cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test017()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, long0);
  }

  @Test(timeout = 11000)
  public void test018()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNotNull(hikariConfig0);
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test019()  throws Throwable  {
      String string0 = "invalid opcode address";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test020()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotNull(hikariConfig0);
      
      String string0 = hikariConfig0.getPoolName();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotNull(string0);
      assertEquals("HikariPool-0", string0);
  }

  @Test(timeout = 11000)
  public void test021()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = false;
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      hikariConfig0.setAutoCommit(boolean0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      
      long long0 = hikariConfig0.getIdleTimeout();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(600000L, long0);
      
      long long1 = (-1617L);
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test022()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNotNull(hikariDataSource0);
      
      String string0 = "javassist.bytecode.StackMapTable$Writer";
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = "o#NZu8V`y7_CQo&g";
      hikariDataSource0.addDataSourceProperty(string1, object0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      
      hikariDataSource0.addDataSourceProperty(string0, object0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      
      String string2 = "";
      hikariDataSource0.setConnectionCustomizerClassName(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      
      String string3 = "maxLifetime is less than 120000ms, did you specify the wrong time unit?  Using default instead.";
      hikariDataSource0.setDataSourceClassName(string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("maxLifetime is less than 120000ms, did you specify the wrong time unit?  Using default instead.", hikariDataSource0.getDataSourceClassName());
      
      boolean boolean0 = hikariDataSource0.isInitializationFailFast();
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("maxLifetime is less than 120000ms, did you specify the wrong time unit?  Using default instead.", hikariDataSource0.getDataSourceClassName());
      assertFalse(boolean0);
      
      int int0 = (-1382);
      // Undeclared exception!
      try { 
        hikariDataSource0.setMinimumPoolSize(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test023()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNotNull(hikariDataSource0);
      
      Class<Object> class0 = Object.class;
      boolean boolean0 = hikariDataSource0.isWrapperFor(class0);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(boolean0);
      
      long long0 = hikariDataSource0.getAcquireRetryDelay();
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, long0);
      
      boolean boolean1 = false;
      hikariDataSource0.setJdbc4ConnectionTest(boolean1);
      assertTrue(boolean1 == boolean0);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
  }

  @Test(timeout = 11000)
  public void test024()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNotNull(hikariConfig0);
      
      String string0 = null;
      hikariConfig0.setTransactionIsolation(string0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
  }

  @Test(timeout = 11000)
  public void test025()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotNull(hikariConfig0);
      
      int int0 = 10;
      hikariConfig0.setMaximumPoolSize(int0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      String string0 = hikariConfig0.getConnectionCustomizerClassName();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(string0);
      
      String string1 = hikariConfig0.getCatalog();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(string1);
      
      long long0 = hikariConfig0.getLeakDetectionThreshold();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, long0);
      
      String string2 = hikariConfig0.getConnectionTestQuery();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(string2);
  }

  @Test(timeout = 11000)
  public void test026()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotNull(hikariConfig0);
      
      String string0 = "";
      String string1 = "/g";
      hikariConfig0.setCatalog(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("/g", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      hikariConfig0.setTransactionIsolation(string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("/g", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      int int0 = (-249);
      hikariConfig0.setAcquireIncrement(int0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("/g", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("/g", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(dataSource0);
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertFalse(int1 == int0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("/g", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, int1);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test027()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNotNull(hikariDataSource0);
      
      boolean boolean0 = false;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
  }

  @Test(timeout = 11000)
  public void test028()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = hikariConfig0.isRegisterMbeans();
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test029()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotNull(hikariConfig0);
      
      long long0 = (-4025L);
      hikariConfig0.setLeakDetectionThreshold(long0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-4025L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      
      int int0 = hikariConfig0.getMinimumPoolSize();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-4025L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, int0);
  }

  @Test(timeout = 11000)
  public void test030()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = false;
      hikariConfig0.setAutoCommit(boolean0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      String string0 = "com.zaxxer.hikari.util.ConcurrentBag$Synchronizer";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("com.zaxxer.hikari.util.ConcurrentBag$Synchronizer", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      String string1 = "0*j/z_`)c6h}";
      hikariConfig0.addDataSourceProperty(string1, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("com.zaxxer.hikari.util.ConcurrentBag$Synchronizer", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      int int0 = hikariConfig0.getAcquireRetries();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("com.zaxxer.hikari.util.ConcurrentBag$Synchronizer", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, int0);
      
      int int1 = hikariConfig0.getMinimumPoolSize();
      assertFalse(int1 == int0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("com.zaxxer.hikari.util.ConcurrentBag$Synchronizer", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, int1);
      
      hikariConfig0.setIdleTimeout(int1);
      assertFalse(int1 == int0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("com.zaxxer.hikari.util.ConcurrentBag$Synchronizer", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      long long0 = hikariConfig0.getMaxLifetime();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("com.zaxxer.hikari.util.ConcurrentBag$Synchronizer", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, long0);
      
      hikariConfig0.setInitializationFailFast(boolean0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("com.zaxxer.hikari.util.ConcurrentBag$Synchronizer", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      String string2 = hikariConfig0.getCatalog();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("com.zaxxer.hikari.util.ConcurrentBag$Synchronizer", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(string2);
      
      boolean boolean1 = false;
      hikariConfig0.setUseInstrumentation(boolean1);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("com.zaxxer.hikari.util.ConcurrentBag$Synchronizer", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      int int2 = 1;
      hikariConfig0.setAcquireIncrement(int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("com.zaxxer.hikari.util.ConcurrentBag$Synchronizer", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
  }

  @Test(timeout = 11000)
  public void test031()  throws Throwable  {
      String string0 = "B$>euFm8Def";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test032()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNotNull(hikariConfig0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.setDataSourceProperties(properties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test033()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = properties0.put(object0, object1);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(object2);
      
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.beans.IntrospectionException: Method not found: setJava.lang.Object@0000000002
         //
         verifyException("com.zaxxer.hikari.util.PropertyBeanSetter", e);
      }
  }

  @Test(timeout = 11000)
  public void test034()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = true;
      hikariConfig0.setInitializationFailFast(boolean0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNotNull(hikariDataSource0);
      
      HikariPool hikariPool0 = null;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      hikariDataSource0.pool = hikariPool0;
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      hikariConfig0.copyState(hikariDataSource0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      long long0 = hikariConfig0.getMaxLifetime();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, long0);
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(dataSource0);
      
      String string0 = hikariDataSource0.getDataSourceClassName();
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(string0);
      
      int int0 = 0;
      String string1 = "com.zaxxer.hikari.util.ConcurrentBag";
      hikariDataSource0.setConnectionCustomizerClassName(string1);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.util.ConcurrentBag", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      hikariDataSource0.setMaximumPoolSize(int0);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.util.ConcurrentBag", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      String string2 = hikariConfig0.getConnectionTestQuery();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(string2);
      
      hikariDataSource0.setLeakDetectionThreshold(long0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.util.ConcurrentBag", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      boolean boolean1 = hikariDataSource0.isRegisterMbeans();
      assertFalse(boolean1 == boolean0);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.util.ConcurrentBag", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(boolean1);
      
      long long1 = 0L;
      hikariConfig0.setLeakDetectionThreshold(long1);
      assertFalse(long1 == long0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      
      String string3 = hikariDataSource0.getPoolName();
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string1));
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("com.zaxxer.hikari.util.ConcurrentBag", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNotNull(string3);
      assertEquals("HikariPool-0", string3);
  }

  @Test(timeout = 11000)
  public void test035()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNotNull(hikariDataSource0);
      
      boolean boolean0 = hikariDataSource0.isInitializationFailFast();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(boolean0);
      
      int int0 = 3088;
      hikariDataSource0.setAcquireIncrement(int0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      boolean boolean1 = hikariDataSource0.isInitializationFailFast();
      assertTrue(boolean1 == boolean0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(boolean1);
      
      int int1 = 410;
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      HikariDataSource hikariDataSource1 = new HikariDataSource(hikariConfig0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getCatalog());
      assertNotNull(hikariDataSource1);
      
      Object object0 = properties0.put(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1250, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(object0);
      
      hikariDataSource0.copyState(hikariConfig0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1250, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariDataSource0.setAcquireIncrement(int1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(int1 == int0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1250, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      // Undeclared exception!
      try { 
        hikariDataSource0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test036()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
  }

  @Test(timeout = 11000)
  public void test037()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test038()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test039()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNotNull(hikariConfig0);
      
      int int0 = 943;
      hikariConfig0.setAcquireRetries(int0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(943, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
  }

  @Test(timeout = 11000)
  public void test040()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNotNull(hikariDataSource0);
      
      String string0 = null;
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      String string1 = hikariDataSource0.toString();
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNotNull(string1);
      assertEquals("HikariDataSource (null)", string1);
      
      long long0 = hikariDataSource0.getAcquireRetryDelay();
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0L, long0);
      
      String string2 = hikariDataSource0.getConnectionTestQuery();
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(string2);
      
      long long1 = 4974L;
      hikariDataSource0.setAcquireRetryDelay(long1);
      assertFalse(long1 == long0);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      hikariDataSource0.setIdleTimeout(long1);
      assertFalse(long1 == long0);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(4974L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      hikariDataSource0.setAcquireRetryDelay(long0);
      assertFalse(long0 == long1);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(4974L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      String string3 = hikariDataSource0.getConnectionInitSql();
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(4974L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(string3);
      
      int int0 = (-66);
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireRetries(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test041()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNotNull(hikariDataSource0);
      
      long long0 = 100L;
      hikariDataSource0.setConnectionTimeout(long0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      
      String string0 = "Invalid transaction isolation value: ";
      hikariDataSource0.setDataSourceClassName(string0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("Invalid transaction isolation value: ", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
  }

  @Test(timeout = 11000)
  public void test042()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNotNull(hikariConfig0);
      
      String string0 = null;
      String string1 = "";
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test043()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNotNull(hikariConfig0);
      
      long long0 = 2384L;
      hikariConfig0.setAcquireRetryDelay(long0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      String string0 = null;
      boolean boolean0 = true;
      hikariConfig0.setInitializationFailFast(boolean0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      hikariConfig0.setCatalog(string0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      hikariConfig0.setConnectionTimeout(long0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2384L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      boolean boolean1 = true;
      String string1 = "leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.";
      hikariConfig0.setDataSourceClassName(string1);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2384L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      
      hikariConfig0.setUseInstrumentation(boolean1);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2384L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      
      long long1 = hikariConfig0.getLeakDetectionThreshold();
      assertFalse(long1 == long0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(2384L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, long1);
      
      int int0 = (-1066);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetries(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test044()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNotNull(hikariDataSource0);
      
      int int0 = 2669;
      String string0 = hikariDataSource0.toString();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNotNull(string0);
      assertEquals("HikariDataSource (null)", string0);
      
      hikariDataSource0.setMinimumPoolSize(int0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      
      String string1 = "I,T";
      hikariDataSource0.setDataSourceClassName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("I,T", hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      
      String string2 = "";
      hikariDataSource0.setDataSourceClassName(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      
      String string3 = hikariDataSource0.getConnectionTestQuery();
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(string3);
      
      int int1 = hikariDataSource0.getTransactionIsolation();
      assertFalse(int1 == int0);
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), int1);
      
      String string4 = hikariDataSource0.getPoolName();
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNotNull(string4);
      assertEquals("HikariPool-0", string4);
  }

  @Test(timeout = 11000)
  public void test045()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = false;
      hikariConfig0.setRegisterMbeans(boolean0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      int int0 = 0;
      boolean boolean1 = true;
      hikariConfig0.setInitializationFailFast(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(object0);
      
      hikariConfig0.setMinimumPoolSize(int0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      int int1 = hikariConfig0.getMinimumPoolSize();
      assertTrue(int1 == int0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, int1);
      
      String string0 = "2NYO%4]tA>{ #Vly}(";
      Object object1 = properties0.setProperty(string0, string0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertNull(object1);
      
      int int2 = hikariConfig0.getAcquireRetries();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, int2);
      
      hikariConfig0.setIdleTimeout(int0);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      String string1 = hikariConfig0.getDataSourceClassName();
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test046()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotNull(hikariConfig0);
      
      String string0 = "_L#W7s^ '=]yhVF+";
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals("_L#W7s^ '=]yhVF+", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      
      hikariConfig0.validate();
      assertEquals("_L#W7s^ '=]yhVF+", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      
      int int0 = hikariConfig0.getAcquireRetries();
      assertEquals("_L#W7s^ '=]yhVF+", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3, int0);
  }

  @Test(timeout = 11000)
  public void test047()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNotNull(hikariConfig0);
      
      long long0 = (-2114L);
      hikariConfig0.setMaxLifetime(long0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-2114L), hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      Properties properties1 = hikariConfig0.getDataSourceProperties();
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-2114L), hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotNull(properties1);
  }

  @Test(timeout = 11000)
  public void test048()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      HikariConfig hikariConfig0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = true;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNotNull(hikariConfig1);
      
      // Undeclared exception!
      try { 
        hikariConfig1.copyState(hikariConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception copying HikariConfig state: null
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test049()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNotNull(hikariConfig0);
      
      String string0 = "java.sql";
      hikariConfig0.setTransactionIsolation(string0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      String string1 = "";
      HikariConfig hikariConfig1 = null;
      long long0 = 0L;
      hikariConfig0.setMaxLifetime(long0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      // Undeclared exception!
      try { 
        hikariConfig0.copyState(hikariConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception copying HikariConfig state: null
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test050()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotNull(hikariConfig0);
      
      String string0 = null;
      hikariConfig0.setConnectionTestQuery(string0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      String string1 = "Bqf~T=DuwCEssx00!#I";
      hikariConfig0.setConnectionTestQuery(string1);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("Bqf~T=DuwCEssx00!#I", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      boolean boolean0 = false;
      hikariConfig0.setInitializationFailFast(boolean0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("Bqf~T=DuwCEssx00!#I", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test051()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNotNull(hikariDataSource0);
      
      String string0 = "zYFN/=bdkt[sK ";
      hikariDataSource0.setConnectionInitSql(string0);
      assertEquals("zYFN/=bdkt[sK ", hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
  }

  @Test(timeout = 11000)
  public void test052()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotNull(hikariConfig0);
      
      long long0 = 0L;
      hikariConfig0.setConnectionTimeout(long0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test053()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNotNull(hikariDataSource0);
      
      int int0 = 185;
      hikariDataSource0.setAcquireIncrement(int0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      String string0 = "y$?";
      String string1 = "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      hikariDataSource0.addDataSourceProperty(string1, object0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("y$?", hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      long long0 = 0L;
      hikariDataSource0.setConnectionTimeout(long0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("y$?", hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      hikariDataSource0.setMaxLifetime(long0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("y$?", hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      String string2 = "GsqL>L2U1cFQB";
      hikariDataSource0.setConnectionCustomizerClassName(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("GsqL>L2U1cFQB", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      int int1 = 0;
      String string3 = "com.zaxxer.hikari.HikariConfig";
      hikariDataSource0.setConnectionTestQuery(string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("com.zaxxer.hikari.HikariConfig", hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("GsqL>L2U1cFQB", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      hikariDataSource0.setMaximumPoolSize(int1);
      assertFalse(int1 == int0);
      assertEquals("com.zaxxer.hikari.HikariConfig", hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("GsqL>L2U1cFQB", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      long long1 = 0L;
      hikariDataSource0.setAcquireRetryDelay(long1);
      assertEquals("com.zaxxer.hikari.HikariConfig", hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("GsqL>L2U1cFQB", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      long long2 = 10L;
      hikariDataSource0.setIdleTimeout(long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals("com.zaxxer.hikari.HikariConfig", hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("GsqL>L2U1cFQB", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      long long3 = hikariDataSource0.getMaxLifetime();
      assertTrue(long3 == long1);
      assertTrue(long3 == long0);
      assertFalse(long3 == long2);
      assertEquals("com.zaxxer.hikari.HikariConfig", hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("GsqL>L2U1cFQB", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, long3);
      
      hikariDataSource0.setLeakDetectionThreshold(int0);
      assertFalse(int0 == int1);
      assertEquals("com.zaxxer.hikari.HikariConfig", hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("GsqL>L2U1cFQB", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(185L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      hikariDataSource0.setAcquireRetries(int0);
      assertFalse(int0 == int1);
      assertEquals("com.zaxxer.hikari.HikariConfig", hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("GsqL>L2U1cFQB", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(185, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(185L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      String string4 = "";
      hikariDataSource0.setDataSourceClassName(string4);
      assertNotSame(string4, string2);
      assertSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("com.zaxxer.hikari.HikariConfig", hikariDataSource0.getConnectionTestQuery());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("GsqL>L2U1cFQB", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(185, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(185L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
  }

  @Test(timeout = 11000)
  public void test054()  throws Throwable  {
      String string0 = null;
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 11000)
  public void test055()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = hikariConfig0.isJdbc4ConnectionTest();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(boolean0);
      
      int int0 = hikariConfig0.getMinimumPoolSize();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(10, int0);
      
      int int1 = hikariConfig0.getAcquireIncrement();
      assertFalse(int1 == int0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0, int1);
      
      String string0 = "InvokeDynamic #";
      hikariConfig0.setDataSourceClassName(string0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("InvokeDynamic #", hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      hikariConfig0.addDataSourceProperty(string0, object0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("InvokeDynamic #", hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
  }

  @Test(timeout = 11000)
  public void test056()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotNull(hikariConfig0);
      
      int int0 = 0;
      long long0 = 120000L;
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      
      hikariConfig0.setAcquireRetryDelay(long0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      
      long long1 = 1484L;
      hikariConfig0.setMaxLifetime(long1);
      assertFalse(long1 == long0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig1);
      
      int int1 = (-607);
      hikariConfig1.setAcquireIncrement(int1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(int1 == int0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      
      hikariConfig0.copyState(hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(1484L, hikariConfig1.getMaxLifetime());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertTrue(hikariConfig1.isRegisterMbeans());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      
      hikariConfig0.setConnectionTimeout(long1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(long1 == long0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      
      hikariConfig0.setMaximumPoolSize(int0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int0 == int1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      
      String string0 = "";
      hikariConfig0.setLeakDetectionThreshold(long1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(long1 == long0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      
      hikariConfig0.setDataSourceClassName(string0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      
      boolean boolean1 = true;
      hikariConfig0.setRegisterMbeans(boolean1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      
      boolean boolean2 = false;
      boolean boolean3 = false;
      hikariConfig0.setInitializationFailFast(boolean3);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      
      hikariConfig0.setRegisterMbeans(boolean2);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(iConnectionCustomizer0);
      
      String string1 = null;
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      
      hikariConfig0.setAcquireRetryDelay(long1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(long1 == long0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      
      String string2 = hikariConfig0.getConnectionCustomizerClassName();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(string2);
      
      long long2 = hikariConfig0.getMaxLifetime();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1484L, long2);
      
      int int2 = hikariConfig0.getAcquireIncrement();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, int2);
      
      String string3 = hikariConfig0.getDataSourceClassName();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertSame(string3, string0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNotNull(string3);
      assertEquals("", string3);
      
      IConnectionCustomizer iConnectionCustomizer1 = hikariConfig0.getConnectionCustomizer();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(iConnectionCustomizer1);
      
      long long3 = hikariConfig0.getLeakDetectionThreshold();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(long3 == long1);
      assertFalse(long3 == long0);
      assertTrue(long3 == long2);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1484L, long3);
      
      String string4 = null;
      hikariConfig1.setTransactionIsolation(string4);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(1484L, hikariConfig1.getMaxLifetime());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertTrue(hikariConfig1.isRegisterMbeans());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      
      long long4 = hikariConfig1.getMaxLifetime();
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(long4 == long1);
      assertFalse(long4 == long0);
      assertTrue(long4 == long2);
      assertTrue(long4 == long3);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(1484L, hikariConfig1.getMaxLifetime());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertTrue(hikariConfig1.isRegisterMbeans());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(1484L, long4);
      
      boolean boolean4 = hikariConfig0.isRegisterMbeans();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(boolean4);
      
      hikariConfig0.validate();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      
      hikariConfig0.copyState(hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(1484L, hikariConfig1.getConnectionTimeout());
      assertEquals(10, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("", hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
  }

  @Test(timeout = 11000)
  public void test057()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNotNull(hikariDataSource0);
      
      String string0 = "";
      hikariDataSource0.setPoolName(string0);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      
      boolean boolean0 = true;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      
      String string1 = "";
      hikariDataSource0.setConnectionTestQuery(string1);
      assertSame(string1, string0);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      
      long long0 = 0L;
      hikariDataSource0.setIdleTimeout(long0);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      
      Object object0 = null;
      // Undeclared exception!
      try { 
        hikariDataSource0.addDataSourceProperty(string0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test058()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNotNull(hikariDataSource0);
      
      String string0 = hikariDataSource0.toString();
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNotNull(string0);
      assertEquals("HikariDataSource (null)", string0);
      
      boolean boolean0 = hikariDataSource0.isAutoCommit();
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(boolean0);
      
      String string1 = "Re\"]@d?|:hV'#V";
      hikariDataSource0.setTransactionIsolation(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      
      hikariDataSource0.setPoolName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("Re\"]@d?|:hV'#V", hikariDataSource0.getPoolName());
      
      int int0 = (-753);
      hikariDataSource0.setAcquireIncrement(int0);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("Re\"]@d?|:hV'#V", hikariDataSource0.getPoolName());
      
      boolean boolean1 = false;
      hikariDataSource0.setRegisterMbeans(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("Re\"]@d?|:hV'#V", hikariDataSource0.getPoolName());
      
      String string2 = hikariDataSource0.getConnectionCustomizerClassName();
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("Re\"]@d?|:hV'#V", hikariDataSource0.getPoolName());
      assertNull(string2);
      
      long long0 = 4L;
      hikariDataSource0.setAcquireRetryDelay(long0);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("Re\"]@d?|:hV'#V", hikariDataSource0.getPoolName());
      
      boolean boolean2 = true;
      hikariDataSource0.setInitializationFailFast(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("Re\"]@d?|:hV'#V", hikariDataSource0.getPoolName());
      
      boolean boolean3 = true;
      hikariDataSource0.setAutoCommit(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("Re\"]@d?|:hV'#V", hikariDataSource0.getPoolName());
      
      String string3 = null;
      hikariDataSource0.setTransactionIsolation(string3);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("Re\"]@d?|:hV'#V", hikariDataSource0.getPoolName());
      
      String string4 = hikariDataSource0.getConnectionCustomizerClassName();
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("Re\"]@d?|:hV'#V", hikariDataSource0.getPoolName());
      assertNull(string4);
      
      long long1 = hikariDataSource0.getLeakDetectionThreshold();
      assertFalse(long1 == long0);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("Re\"]@d?|:hV'#V", hikariDataSource0.getPoolName());
      assertEquals(0L, long1);
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariDataSource0.getConnectionCustomizer();
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("Re\"]@d?|:hV'#V", hikariDataSource0.getPoolName());
      assertNull(iConnectionCustomizer0);
      
      long long2 = hikariDataSource0.getLeakDetectionThreshold();
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("Re\"]@d?|:hV'#V", hikariDataSource0.getPoolName());
      assertEquals(0L, long2);
      
      String string5 = hikariDataSource0.getCatalog();
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("Re\"]@d?|:hV'#V", hikariDataSource0.getPoolName());
      assertNull(string5);
  }

  @Test(timeout = 11000)
  public void test059()  throws Throwable  {
      String string0 = "";
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNotNull(hikariDataSource0);
      
      int int0 = (-1787);
      // Undeclared exception!
      try { 
        hikariDataSource0.setMaximumPoolSize(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test060()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNotNull(hikariConfig0);
      
      HikariConfig hikariConfig1 = new HikariConfig();
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNotNull(hikariConfig1);
      
      hikariConfig0.copyState(hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      
      long long0 = (-1056L);
      hikariConfig1.setMaxLifetime(long0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1056L), hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      
      String string0 = "javassist.bytecode.FloatInfo";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("javassist.bytecode.FloatInfo", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isRegisterMbeans());
      
      String string1 = "[.~NaVR";
      int int0 = 0;
      hikariConfig1.setMaximumPoolSize(int0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1056L), hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      
      hikariConfig0.setTransactionIsolation(string1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(string1, string0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("javassist.bytecode.FloatInfo", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isRegisterMbeans());
      
      boolean boolean1 = hikariConfig0.isJdbc4ConnectionTest();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("javassist.bytecode.FloatInfo", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(boolean1);
      
      int int1 = 0;
      hikariConfig1.setMinimumPoolSize(int1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1056L), hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      
      int int2 = (-1597);
      // Undeclared exception!
      try { 
        hikariConfig1.setMaximumPoolSize(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test061()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNotNull(hikariConfig0);
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(iConnectionCustomizer0);
      
      String string0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.addDataSourceProperty(string0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test062()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNotNull(hikariDataSource0);
      
      String string0 = null;
      hikariDataSource0.setCatalog(string0);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      
      String string1 = "";
      String string2 = "one of either dataSource or dataSourceClassName must be specified";
      int int0 = 0;
      hikariDataSource0.setAcquireRetries(int0);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      
      // Undeclared exception!
      try { 
        hikariDataSource0.getLogWriter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test063()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = hikariConfig0.isInitializationFailFast();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(boolean0);
      
      String string0 = "ga8ic(ojH";
      hikariConfig0.setDataSourceClassName(string0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("ga8ic(ojH", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      
      String string1 = hikariConfig0.getDataSourceClassName();
      assertSame(string1, string0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("ga8ic(ojH", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNotNull(string1);
      assertEquals("ga8ic(ojH", string1);
      
      int int0 = 0;
      hikariConfig0.setMinimumPoolSize(int0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("ga8ic(ojH", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      
      int int1 = (-1184);
      String string2 = "MQ\\@7kr";
      hikariConfig0.setTransactionIsolation(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("ga8ic(ojH", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      
      // Undeclared exception!
      try { 
        hikariConfig0.setMinimumPoolSize(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test064()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotNull(hikariConfig0);
      
      String string0 = "";
      hikariConfig0.setConnectionTestQuery(string0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      
      int int0 = 0;
      hikariConfig0.setMinimumPoolSize(int0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      
      long long0 = hikariConfig0.getLeakDetectionThreshold();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, long0);
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(dataSource0);
      
      hikariConfig0.setDataSource(dataSource0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      
      boolean boolean0 = false;
      hikariConfig0.setUseInstrumentation(boolean0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      
      hikariConfig0.setDataSource(dataSource0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      
      hikariConfig0.setAcquireRetries(int0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(iConnectionCustomizer0);
      
      hikariConfig0.setAutoCommit(boolean0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      
      boolean boolean1 = hikariConfig0.isAutoCommit();
      assertTrue(boolean1 == boolean0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(boolean1);
      
      DataSource dataSource1 = hikariConfig0.getDataSource();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(dataSource1);
      
      hikariConfig0.setConnectionInitSql(string0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      
      String string1 = hikariConfig0.getConnectionInitSql();
      assertSame(string1, string0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = hikariConfig0.getTransactionIsolation();
      assertFalse(int1 == int0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals((-1), int1);
      
      long long1 = hikariConfig0.getConnectionTimeout();
      assertFalse(long1 == long0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, long1);
      
      hikariConfig0.setAcquireRetries(int0);
      assertFalse(int0 == int1);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      
      long long2 = hikariConfig0.getLeakDetectionThreshold();
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, long2);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test065()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = false;
      long long0 = (-1226L);
      hikariConfig0.setMaxLifetime(long0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1226L), hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1226L), hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      long long1 = (-604L);
      int int0 = 963;
      hikariConfig0.setAcquireRetries(int0);
      assertEquals(963, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1226L), hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setAcquireRetryDelay(long1);
      assertFalse(long1 == long0);
      assertEquals(963, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1226L), hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      boolean boolean1 = true;
      hikariConfig0.setAutoCommit(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(963, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1226L), hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      String string0 = hikariConfig0.getPoolName();
      assertEquals(963, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1226L), hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNotNull(string0);
      assertEquals("HikariPool-0", string0);
      
      hikariConfig0.setConnectionTestQuery(string0);
      assertEquals(963, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1226L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      boolean boolean2 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean2);
      assertFalse(boolean2 == boolean1);
      assertEquals(963, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1226L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      int int1 = hikariConfig0.getTransactionIsolation();
      assertFalse(int1 == int0);
      assertEquals(963, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1226L), hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), int1);
      
      boolean boolean3 = true;
      hikariConfig0.setRegisterMbeans(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(963, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1226L), hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      int int2 = hikariConfig0.getAcquireIncrement();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(963, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1226L), hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, int2);
      
      boolean boolean4 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertEquals(963, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1226L), hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(boolean4);
      
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test066()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = true;
      hikariConfig0.setAutoCommit(boolean0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      long long0 = 8L;
      String string0 = "8u1ghw|_g#GtAa5Gir";
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("8u1ghw|_g#GtAa5Gir", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      hikariConfig0.setMaxLifetime(long0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("8u1ghw|_g#GtAa5Gir", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(8L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      hikariConfig0.validate();
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("8u1ghw|_g#GtAa5Gir", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      
      int int0 = hikariConfig0.getTransactionIsolation();
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("8u1ghw|_g#GtAa5Gir", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test067()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      
      long long0 = (-2759L);
      boolean boolean0 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setMaxLifetime(long0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-2759L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      String string0 = "j-w";
      hikariConfig0.setTransactionIsolation(string0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-2759L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      String string1 = "";
      hikariConfig0.addDataSourceProperty(string1, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-2759L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-2759L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(iConnectionCustomizer0);
      
      String string2 = "";
      hikariConfig0.setDataSourceClassName(string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-2759L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      long long1 = (-476L);
      hikariConfig0.setMaxLifetime(long1);
      assertFalse(long1 == long0);
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-476L), hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      String string3 = "OJ/i.b~;ZCIs+% \\-S";
      hikariConfig0.setConnectionTestQuery(string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("OJ/i.b~;ZCIs+% \\-S", hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-476L), hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      boolean boolean1 = hikariConfig0.isRegisterMbeans();
      assertTrue(boolean1 == boolean0);
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("OJ/i.b~;ZCIs+% \\-S", hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-476L), hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(boolean1);
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maxLifetime cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test068()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = true;
      boolean boolean1 = true;
      hikariConfig0.setJdbc4ConnectionTest(boolean1);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      String string0 = "volatile";
      hikariConfig0.setConnectionTestQuery(string0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(iConnectionCustomizer0);
      
      hikariConfig0.setRegisterMbeans(boolean1);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      DataSource dataSource0 = null;
      hikariConfig0.setDataSource(dataSource0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      String string1 = "";
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.setTransactionIsolation(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      long long0 = (-435L);
      hikariConfig0.setAcquireRetryDelay(long0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      long long1 = 2566L;
      hikariConfig0.setLeakDetectionThreshold(long1);
      assertFalse(long1 == long0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.setConnectionInitSql(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      String string2 = "-?ITdqSz/Hp4IEG";
      hikariConfig0.addDataSourceProperty(string2, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.setDataSourceClassName(string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid transaction isolation value: 
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test069()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNotNull(hikariConfig0);
      
      HikariConfig hikariConfig1 = new HikariConfig();
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNotNull(hikariConfig1);
      
      DataSource dataSource0 = hikariConfig1.getDataSource();
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(dataSource0);
      
      hikariConfig0.setDataSource(dataSource0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      
      String string0 = "U<";
      hikariConfig0.setCatalog(string0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("U<", hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      boolean boolean0 = true;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("U<", hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      boolean boolean1 = true;
      hikariConfig0.setInitializationFailFast(boolean1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("U<", hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      String string1 = hikariConfig0.getCatalog();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertSame(string1, string0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("U<", hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNotNull(string1);
      assertEquals("U<", string1);
      
      int int0 = (-257);
      hikariConfig0.setAcquireIncrement(int0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("U<", hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
  }

  @Test(timeout = 11000)
  public void test070()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      
      int int0 = 0;
      long long0 = 120000L;
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setAcquireRetryDelay(long0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      long long1 = 1484L;
      hikariConfig0.setMaxLifetime(long1);
      assertFalse(long1 == long0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNotNull(hikariConfig1);
      
      int int1 = (-607);
      hikariConfig1.setAcquireIncrement(int1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(int1 == int0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      
      hikariConfig0.copyState(hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertTrue(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(1484L, hikariConfig1.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      
      hikariConfig0.setConnectionTimeout(long1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(long1 == long0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setMaximumPoolSize(int0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int0 == int1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      String string0 = "";
      hikariConfig0.setLeakDetectionThreshold(long1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(long1 == long0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setDataSourceClassName(string0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      boolean boolean1 = true;
      hikariConfig0.setRegisterMbeans(boolean1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      boolean boolean2 = false;
      boolean boolean3 = true;
      hikariConfig0.setInitializationFailFast(boolean3);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean3 == boolean2);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setRegisterMbeans(boolean2);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean2 == boolean3);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(iConnectionCustomizer0);
      
      hikariConfig0.setConnectionCustomizerClassName(string0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setAcquireRetryDelay(long1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(long1 == long0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      String string1 = hikariConfig0.getConnectionCustomizerClassName();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertSame(string1, string0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(string1);
      assertEquals("", string1);
      
      long long2 = hikariConfig0.getMaxLifetime();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1484L, long2);
      
      int int2 = hikariConfig0.getAcquireIncrement();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, int2);
      
      String string2 = hikariConfig0.getDataSourceClassName();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(string2);
      assertEquals("", string2);
      
      IConnectionCustomizer iConnectionCustomizer1 = hikariConfig0.getConnectionCustomizer();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(iConnectionCustomizer1);
      
      long long3 = hikariConfig0.getLeakDetectionThreshold();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(long3 == long0);
      assertTrue(long3 == long2);
      assertTrue(long3 == long1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1484L, long3);
      
      String string3 = null;
      hikariConfig1.setTransactionIsolation(string3);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertTrue(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(1484L, hikariConfig1.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      
      long long4 = hikariConfig1.getMaxLifetime();
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(long4 == long3);
      assertTrue(long4 == long2);
      assertTrue(long4 == long1);
      assertFalse(long4 == long0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertTrue(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(1484L, hikariConfig1.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(1484L, long4);
      
      boolean boolean4 = hikariConfig0.isRegisterMbeans();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(1484L, hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(1484L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1484L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(boolean4);
  }

  @Test(timeout = 11000)
  public void test071()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      
      int int0 = 0;
      long long0 = 120000L;
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setAcquireRetryDelay(long0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      hikariConfig0.setMaxLifetime(long0);
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      Properties properties1 = new Properties();
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNotNull(properties1);
      
      HikariConfig hikariConfig1 = new HikariConfig(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotNull(hikariConfig1);
      
      int int1 = (-607);
      hikariConfig1.setAcquireIncrement(int1);
      assertNotSame(properties1, properties0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(int1 == int0);
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      
      hikariConfig0.copyState(hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(properties1, properties0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(120000L, hikariConfig1.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isRegisterMbeans());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      
      hikariConfig0.setConnectionTimeout(long0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setMaximumPoolSize(int0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int0 == int1);
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      
      String string0 = "";
      hikariConfig0.setLeakDetectionThreshold(long0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(120000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setDataSourceClassName(string0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(120000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      
      boolean boolean1 = true;
      hikariConfig0.setRegisterMbeans(boolean1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(120000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      
      boolean boolean2 = false;
      boolean boolean3 = false;
      hikariConfig0.setInitializationFailFast(boolean3);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(120000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setRegisterMbeans(boolean2);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(120000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(120000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertNull(iConnectionCustomizer0);
      
      String string1 = null;
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(120000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setAcquireRetryDelay(long0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(120000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      
      String string2 = hikariConfig0.getConnectionCustomizerClassName();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(120000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertNull(string2);
      
      long long1 = hikariConfig0.getMaxLifetime();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(long1 == long0);
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(120000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertEquals(120000L, long1);
      
      int int2 = hikariConfig0.getAcquireIncrement();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(120000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, int2);
      
      String string3 = hikariConfig0.getDataSourceClassName();
      assertSame(string3, string0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(120000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertNotNull(string3);
      assertEquals("", string3);
      
      IConnectionCustomizer iConnectionCustomizer1 = hikariConfig0.getConnectionCustomizer();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(120000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertNull(iConnectionCustomizer1);
      
      long long2 = hikariConfig0.getLeakDetectionThreshold();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(120000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertEquals(120000L, long2);
      
      String string4 = null;
      hikariConfig1.setTransactionIsolation(string4);
      assertNotSame(properties1, properties0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(120000L, hikariConfig1.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isRegisterMbeans());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      
      long long3 = hikariConfig1.getMaxLifetime();
      assertNotSame(properties1, properties0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(long3 == long1);
      assertTrue(long3 == long0);
      assertTrue(long3 == long2);
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(120000L, hikariConfig1.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isRegisterMbeans());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(120000L, long3);
      
      boolean boolean4 = hikariConfig0.isRegisterMbeans();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(120000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertFalse(boolean4);
      
      hikariConfig0.validate();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(120000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.copyState(hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(properties1, properties0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(120000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(120000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(120000L, hikariConfig1.getMaxLifetime());
      assertEquals(10, hikariConfig1.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(120000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(120000L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
  }

  @Test(timeout = 11000)
  public void test072()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNotNull(hikariConfig0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNotNull(hikariConfig1);
      
      int int0 = 0;
      hikariConfig0.copyState(hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      
      Object object0 = properties0.put(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(object0);
      
      hikariConfig1.setAcquireRetries(int0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireRetries());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      
      hikariConfig0.copyState(hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      
      String string0 = hikariConfig0.getDataSourceClassName();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(string0);
      
      int int1 = 356;
      String string1 = null;
      hikariConfig1.setConnectionCustomizerClassName(string1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      
      hikariConfig1.setMaximumPoolSize(int1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(int1 == int0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      
      boolean boolean0 = hikariConfig0.isRegisterMbeans();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(boolean0);
      
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      String string2 = hikariConfig0.getConnectionInitSql();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(string2);
      
      hikariConfig1.setTransactionIsolation(string0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      
      String string3 = "F_";
      hikariConfig0.setCatalog(string3);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("F_", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      String string4 = "maxPoolSize is less than minPoolSize, forcing them equal.";
      hikariConfig1.setTransactionIsolation(string0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("F_", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hikariConfig0.setDataSourceProperties(properties0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("F_", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      
      Object object1 = properties0.computeIfPresent(string4, biFunction0);
      assertNotSame(string4, string3);
      assertFalse(string4.equals((Object)string3));
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertNull(object1);
      
      hikariConfig1.setCatalog(string1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig1.getConnectionCustomizer();
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(iConnectionCustomizer0);
      
      Properties properties1 = hikariConfig1.getDataSourceProperties();
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(properties1, properties0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(properties1.isEmpty());
      assertEquals(1, properties1.size());
      assertNotNull(properties1);
      
      long long0 = hikariConfig0.getIdleTimeout();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("F_", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, long0);
      
      String string5 = "(^&M^K,$";
      hikariConfig1.setConnectionInitSql(string5);
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertTrue(properties0.equals((Object)properties1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals("(^&M^K,$", hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      
      boolean boolean1 = hikariConfig0.isAutoCommit();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean1 == boolean0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("F_", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(boolean1);
  }

  @Test(timeout = 11000)
  public void test073()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = false;
      hikariConfig0.setRegisterMbeans(boolean0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      int int0 = 0;
      boolean boolean1 = true;
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(object0);
      
      hikariConfig0.setMinimumPoolSize(int0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      int int1 = hikariConfig0.getMinimumPoolSize();
      assertTrue(int1 == int0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, int1);
      
      String string0 = "2NYO%4]tA>{ #Vly}(";
      Object object1 = new Object();
      assertNotNull(object1);
      
      int int2 = hikariConfig0.getAcquireRetries();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3, int2);
      
      hikariConfig0.setIdleTimeout(int0);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      String string1 = hikariConfig0.getDataSourceClassName();
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(string1);
      
      long long0 = hikariConfig0.getIdleTimeout();
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, long0);
  }

  @Test(timeout = 11000)
  public void test074()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      
      long long0 = 1625L;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "$jsnNE5m1pUm~(,-p";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      hikariConfig0.setMaxLifetime(long0);
      assertEquals(1625L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      String string1 = hikariConfig0.getConnectionCustomizerClassName();
      assertEquals(1625L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(string1);
      
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      hikariConfig0.setInitializationFailFast(boolean1);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertEquals(1625L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertEquals(1625L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      boolean boolean3 = hikariConfig0.isInitializationFailFast();
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(1625L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(boolean3);
      
      boolean boolean4 = false;
      hikariConfig0.setRegisterMbeans(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertEquals(1625L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test075()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNotNull(hikariDataSource0);
      
      String string0 = "maxLifetime is less than 120000ms, did you specify the wrong time unit?  Using default instead.";
      hikariDataSource0.setConnectionTestQuery(string0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("maxLifetime is less than 120000ms, did you specify the wrong time unit?  Using default instead.", hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      int int0 = 2669;
      String string1 = hikariDataSource0.toString();
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("maxLifetime is less than 120000ms, did you specify the wrong time unit?  Using default instead.", hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNotNull(string1);
      assertEquals("HikariDataSource (null)", string1);
      
      hikariDataSource0.setMinimumPoolSize(int0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("maxLifetime is less than 120000ms, did you specify the wrong time unit?  Using default instead.", hikariDataSource0.getConnectionTestQuery());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      String string2 = "I,T";
      hikariDataSource0.setDataSourceClassName(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("maxLifetime is less than 120000ms, did you specify the wrong time unit?  Using default instead.", hikariDataSource0.getConnectionTestQuery());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("I,T", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      String string3 = "";
      hikariDataSource0.setDataSourceClassName(string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("maxLifetime is less than 120000ms, did you specify the wrong time unit?  Using default instead.", hikariDataSource0.getConnectionTestQuery());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      String string4 = hikariDataSource0.getConnectionTestQuery();
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(string4, string0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("maxLifetime is less than 120000ms, did you specify the wrong time unit?  Using default instead.", hikariDataSource0.getConnectionTestQuery());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNotNull(string4);
      assertEquals("maxLifetime is less than 120000ms, did you specify the wrong time unit?  Using default instead.", string4);
      
      int int1 = hikariDataSource0.getTransactionIsolation();
      assertFalse(int1 == int0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("maxLifetime is less than 120000ms, did you specify the wrong time unit?  Using default instead.", hikariDataSource0.getConnectionTestQuery());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals((-1), int1);
      
      String string5 = hikariDataSource0.getPoolName();
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("maxLifetime is less than 120000ms, did you specify the wrong time unit?  Using default instead.", hikariDataSource0.getConnectionTestQuery());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNotNull(string5);
      assertEquals("HikariPool-0", string5);
  }

  @Test(timeout = 11000)
  public void test076()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNotNull(hikariConfig0);
      
      String string0 = "pcP>hO+";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      assertEquals("pcP>hO+", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      
      boolean boolean0 = false;
      int int0 = 153;
      hikariConfig0.setAcquireRetries(int0);
      assertEquals(153, hikariConfig0.getAcquireRetries());
      assertEquals("pcP>hO+", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertEquals(153, hikariConfig0.getAcquireRetries());
      assertEquals("pcP>hO+", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertFalse(int1 == int0);
      assertEquals(153, hikariConfig0.getAcquireRetries());
      assertEquals("pcP>hO+", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, int1);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNotNull(hikariDataSource0);
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertEquals(153, hikariConfig0.getAcquireRetries());
      assertEquals("pcP>hO+", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      
      hikariDataSource0.setCatalog(string0);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("pcP>hO+", hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      
      String string1 = hikariConfig0.getConnectionCustomizerClassName();
      assertSame(string1, string0);
      assertEquals(153, hikariConfig0.getAcquireRetries());
      assertEquals("pcP>hO+", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNotNull(string1);
      assertEquals("pcP>hO+", string1);
      
      String string2 = hikariDataSource0.getCatalog();
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("pcP>hO+", hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNotNull(string2);
      assertEquals("pcP>hO+", string2);
  }

  @Test(timeout = 11000)
  public void test077()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotNull(hikariConfig0);
      
      String string0 = "pcP>hO+";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("pcP>hO+", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      boolean boolean0 = false;
      int int0 = 153;
      hikariConfig0.setAcquireRetries(int0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("pcP>hO+", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(153, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      boolean boolean1 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean1);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("pcP>hO+", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(153, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("pcP>hO+", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(153, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("pcP>hO+", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("pcP>hO+", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(153, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertFalse(int1 == int0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("pcP>hO+", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("pcP>hO+", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(153, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, int1);
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test078()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNotNull(hikariDataSource0);
      
      long long0 = 715L;
      hikariDataSource0.setConnectionTimeout(long0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(715L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-40);
      byteArray0[0] = byte0;
      byte byte1 = (byte)16;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-19);
      byteArray0[2] = byte2;
      byte byte3 = (byte)95;
      byteArray0[3] = byte3;
      byte byte4 = (byte)4;
      byteArray0[4] = byte4;
      byte byte5 = (byte)29;
      byteArray0[5] = byte5;
      byte byte6 = (byte)111;
      byteArray0[6] = byte6;
      byte byte7 = (byte)75;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-49);
      byteArray0[8] = byte8;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-40), (byte)16, (byte) (-19), (byte)95, (byte)4, (byte)29, (byte)111, (byte)75, (byte) (-49)}, byteArray0);
      assertFalse(boolean0);
      
      String string0 = "";
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(715L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      boolean boolean1 = hikariDataSource0.isJdbc4ConnectionTest();
      assertFalse(boolean1 == boolean0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(715L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(boolean1);
      
      EvoSuiteFile evoSuiteFile1 = null;
      hikariDataSource0.setConnectionTestQuery(string0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(715L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      boolean boolean2 = false;
      boolean boolean3 = true;
      boolean boolean4 = FileSystemHandling.setPermissions(evoSuiteFile1, boolean1, boolean2, boolean3);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertTrue(boolean1 == boolean3);
      assertFalse(boolean2 == boolean3);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(715L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(boolean4);
      
      long long1 = 0L;
      hikariDataSource0.setConnectionTimeout(long1);
      assertFalse(long1 == long0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      int int0 = hikariDataSource0.getTransactionIsolation();
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), int0);
      
      String string1 = hikariDataSource0.getConnectionTestQuery();
      assertSame(string1, string0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertEquals("", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test079()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNotNull(hikariDataSource0);
      
      boolean boolean0 = hikariDataSource0.isInitializationFailFast();
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(boolean0);
      
      int int0 = 3088;
      hikariDataSource0.setAcquireIncrement(int0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      
      boolean boolean1 = hikariDataSource0.isInitializationFailFast();
      assertTrue(boolean1 == boolean0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(boolean1);
      
      int int1 = 410;
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      long long0 = (-1L);
      hikariDataSource0.setAcquireRetryDelay(long0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotNull(hikariConfig0);
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      
      HikariDataSource hikariDataSource1 = new HikariDataSource(hikariConfig0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNotNull(hikariDataSource1);
      
      Object object0 = properties0.put(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1250, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(object0);
      
      int int2 = 74;
      hikariDataSource1.setAcquireIncrement(int2);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      
      hikariDataSource0.copyState(hikariConfig0);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1250, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      
      hikariDataSource0.setAcquireIncrement(int1);
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1250, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      
      hikariDataSource1.validate();
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      
      // Undeclared exception!
      try { 
        hikariDataSource0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test080()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotNull(hikariConfig0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNotNull(hikariConfig1);
      
      int int0 = 0;
      hikariConfig0.copyState(hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      
      Object object0 = properties0.put(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(object0);
      
      hikariConfig1.setAcquireRetries(int0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(0, hikariConfig1.getAcquireRetries());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      
      hikariConfig0.copyState(hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      
      String string0 = hikariConfig0.getDataSourceClassName();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(string0);
      
      int int1 = 356;
      String string1 = null;
      hikariConfig1.setConnectionCustomizerClassName(string1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      
      hikariConfig1.setMaximumPoolSize(int1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(int1 == int0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      
      boolean boolean0 = hikariConfig0.isRegisterMbeans();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(boolean0);
      
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      String string2 = hikariConfig0.getConnectionInitSql();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(string2);
      
      hikariConfig1.setTransactionIsolation(string0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      
      String string3 = "F_";
      hikariConfig0.setCatalog(string3);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("F_", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      String string4 = "maxPoolSize is less than minPoolSize, forcing them equal.";
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = properties0.computeIfPresent(string4, biFunction0);
      assertNotSame(string4, string3);
      assertFalse(string4.equals((Object)string3));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(object1);
      
      String string5 = "ZC";
      hikariConfig1.setCatalog(string5);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals("ZC", hikariConfig1.getCatalog());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("F_", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(iConnectionCustomizer0);
      
      Properties properties1 = hikariConfig1.getDataSourceProperties();
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(properties1, properties0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(properties1.equals((Object)properties0));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals("ZC", hikariConfig1.getCatalog());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotNull(properties1);
      
      long long0 = hikariConfig0.getIdleTimeout();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("F_", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, long0);
      
      String string6 = "(^&M^K,a";
      hikariConfig1.setConnectionInitSql(string6);
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals("ZC", hikariConfig1.getCatalog());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals("(^&M^K,a", hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      
      boolean boolean1 = hikariConfig0.isAutoCommit();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean1 == boolean0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("F_", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(boolean1);
      
      boolean boolean2 = hikariConfig0.isJdbc4ConnectionTest();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("F_", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(boolean2);
  }

  @Test(timeout = 11000)
  public void test081()  throws Throwable  {
      String string0 = "{9J`vKqD]?VH`0:>";
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotNull(hikariConfig0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      hikariConfig0.setIdleTimeout(byte0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)73;
      byteArray0[1] = byte1;
      byte byte2 = (byte)17;
      byteArray0[2] = byte2;
      byte byte3 = (byte)107;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-98);
      byteArray0[4] = byte4;
      byte byte5 = (byte)60;
      byteArray0[5] = byte5;
      byte byte6 = (byte)35;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-9);
      byteArray0[7] = byte7;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)73, (byte)17, (byte)107, (byte) (-98), (byte)60, (byte)35, (byte) (-9)}, byteArray0);
      assertFalse(boolean0);
      
      hikariConfig0.setDataSourceClassName(string0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, long0);
      
      hikariConfig0.validate();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      
      int int0 = hikariConfig0.getTransactionIsolation();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), int0);
      
      long long1 = hikariConfig0.getLeakDetectionThreshold();
      assertTrue(long1 == long0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, long1);
  }

  @Test(timeout = 11000)
  public void test082()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = true;
      boolean boolean1 = true;
      hikariConfig0.setJdbc4ConnectionTest(boolean1);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      String string0 = "volatile";
      hikariConfig0.setConnectionTestQuery(string0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(iConnectionCustomizer0);
      
      hikariConfig0.setRegisterMbeans(boolean1);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      DataSource dataSource0 = null;
      hikariConfig0.setDataSource(dataSource0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      String string1 = "";
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setTransactionIsolation(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      long long0 = (-435L);
      hikariConfig0.setAcquireRetryDelay(long0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      long long1 = 2566L;
      hikariConfig0.setLeakDetectionThreshold(long1);
      assertFalse(long1 == long0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setConnectionInitSql(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      String string2 = "-?ITdqSz/Hp4IEG";
      hikariConfig0.addDataSourceProperty(string2, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setDataSourceClassName(string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setRegisterMbeans(boolean1);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setMaxLifetime(long1);
      assertFalse(long1 == long0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(2566L, hikariConfig0.getMaxLifetime());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(2566L, hikariConfig0.getMaxLifetime());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      boolean boolean2 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(2566L, hikariConfig0.getMaxLifetime());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      String string3 = hikariConfig0.getCatalog();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(2566L, hikariConfig0.getMaxLifetime());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(string3);
      
      int int0 = hikariConfig0.getAcquireRetries();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(2566L, hikariConfig0.getMaxLifetime());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, int0);
      
      hikariConfig0.setConnectionCustomizerClassName(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(2566L, hikariConfig0.getMaxLifetime());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("-?ITdqSz/Hp4IEG", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      String string4 = hikariConfig0.getConnectionCustomizerClassName();
      assertNotSame(string4, string0);
      assertSame(string4, string2);
      assertNotSame(string4, string1);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(2566L, hikariConfig0.getMaxLifetime());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("-?ITdqSz/Hp4IEG", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNotNull(string4);
      assertEquals("-?ITdqSz/Hp4IEG", string4);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid transaction isolation value: 
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test083()  throws Throwable  {
      String string0 = "{9J`vKqD]?VH`0:>";
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-4);
      hikariConfig0.setIdleTimeout(byte0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-4L), hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)73;
      byteArray0[1] = byte1;
      byte byte2 = (byte)17;
      byteArray0[2] = byte2;
      byte byte3 = (byte)107;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-98);
      byteArray0[4] = byte3;
      byte byte5 = (byte)60;
      byteArray0[5] = byte5;
      byte byte6 = (byte)35;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-9);
      byteArray0[7] = byte7;
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-4L), hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-4L), hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // idleTimeout cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test084()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("OeNZCw5$NB7HY");
      String string0 = "w$1$Xb";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      String string1 = "OeNZCw5$NB7HY";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.beans.IntrospectionException: Method not found: setJava.lang.String@0000000002
         //
         verifyException("com.zaxxer.hikari.util.PropertyBeanSetter", e);
      }
  }

  @Test(timeout = 11000)
  public void test085()  throws Throwable  {
      long long0 = 1331L;
      String string0 = null;
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNotNull(hikariConfig0);
      
      HikariConfig hikariConfig1 = new HikariConfig();
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNotNull(hikariConfig1);
      
      int int0 = 0;
      String string1 = "#etnt";
      hikariConfig1.setMinimumPoolSize(int0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      
      long long1 = hikariConfig1.getAcquireRetryDelay();
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(long1 == long0);
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0L, long1);
      
      String string2 = "invalid builtin type: ";
      hikariConfig1.setConnectionTestQuery(string2);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string2, string1);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("invalid builtin type: ", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      
      hikariConfig1.setDataSourceClassName(string1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string1, string2);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("#etnt", hikariConfig1.getDataSourceClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("invalid builtin type: ", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      
      long long2 = (-1841L);
      hikariConfig1.setLeakDetectionThreshold(long2);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals("#etnt", hikariConfig1.getDataSourceClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals((-1841L), hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("invalid builtin type: ", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      
      hikariConfig1.addDataSourceProperty(string2, hikariConfig0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string2, string1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string2.equals((Object)string1));
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("#etnt", hikariConfig1.getDataSourceClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals((-1841L), hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("invalid builtin type: ", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      
      int int1 = 1714;
      hikariConfig1.setAcquireRetries(int1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(int1 == int0);
      assertEquals("#etnt", hikariConfig1.getDataSourceClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals((-1841L), hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("invalid builtin type: ", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(1714, hikariConfig1.getAcquireRetries());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("HikariPool-2", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNotNull(hikariDataSource0);
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("HikariPool-2", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      boolean boolean0 = true;
      hikariConfig1.setUseInstrumentation(boolean0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals("#etnt", hikariConfig1.getDataSourceClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals((-1841L), hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("invalid builtin type: ", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(1714, hikariConfig1.getAcquireRetries());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      
      boolean boolean1 = true;
      hikariConfig1.setConnectionTestQuery(string1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string1, string2);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("#etnt", hikariConfig1.getDataSourceClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("#etnt", hikariConfig1.getConnectionTestQuery());
      assertEquals((-1841L), hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(1714, hikariConfig1.getAcquireRetries());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      
      boolean boolean2 = hikariConfig1.isRegisterMbeans();
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("#etnt", hikariConfig1.getDataSourceClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("#etnt", hikariConfig1.getConnectionTestQuery());
      assertEquals((-1841L), hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(1714, hikariConfig1.getAcquireRetries());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertFalse(boolean2);
      
      boolean boolean3 = hikariConfig0.isInitializationFailFast();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(boolean3);
      
      HikariDataSource hikariDataSource1 = (HikariDataSource)hikariConfig0.getDataSource();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals("HikariPool-2", hikariDataSource1.getPoolName());
      assertNotNull(hikariDataSource1);
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig1.getConnectionCustomizer();
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals("#etnt", hikariConfig1.getDataSourceClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("#etnt", hikariConfig1.getConnectionTestQuery());
      assertEquals((-1841L), hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(1714, hikariConfig1.getAcquireRetries());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(iConnectionCustomizer0);
      
      long long3 = hikariConfig0.getLeakDetectionThreshold();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, long3);
  }

  @Test(timeout = 11000)
  public void test086()  throws Throwable  {
      String string0 = "{9J`vKqD]?VH`0:>";
      HikariConfig hikariConfig0 = new HikariConfig();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNotNull(hikariConfig0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[24];
      byte byte0 = (byte)41;
      hikariConfig0.setIdleTimeout(byte0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(41L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(41L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)73;
      byteArray0[1] = byte1;
      byte byte2 = (byte)17;
      byteArray0[2] = byte2;
      byte byte3 = (byte)107;
      byteArray0[3] = byte3;
      byte byte4 = (byte)7;
      byteArray0[4] = byte4;
      byte byte5 = (byte)60;
      byteArray0[5] = byte5;
      byte byte6 = (byte)35;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-9);
      byteArray0[7] = byte7;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(24, byteArray0.length);
      assertFalse(boolean0);
      
      hikariConfig0.setDataSourceClassName(string0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(41L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(41L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, long0);
      
      hikariConfig0.validate();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      boolean boolean1 = false;
      hikariConfig0.setAutoCommit(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      int int0 = hikariConfig0.getTransactionIsolation();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), int0);
      
      long long1 = hikariConfig0.getLeakDetectionThreshold();
      assertTrue(long1 == long0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, long1);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNotNull(hikariDataSource0);
      
      hikariConfig0.copyState(hikariDataSource0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("{9J`vKqD]?VH`0:>", hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
  }

  @Test(timeout = 11000)
  public void test087()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNotNull(hikariConfig0);
      
      long long0 = 120000L;
      hikariConfig0.setConnectionTimeout(long0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      int int0 = 60;
      hikariConfig0.setAcquireIncrement(int0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setIdleTimeout(long0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertTrue(int1 == int0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, int1);
      
      String string0 = "";
      hikariConfig0.setPoolName(string0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      
      int int2 = hikariConfig0.getMinimumPoolSize();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, int2);
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertNull(iConnectionCustomizer0);
      
      IConnectionCustomizer iConnectionCustomizer1 = hikariConfig0.getConnectionCustomizer();
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertNull(iConnectionCustomizer1);
      
      boolean boolean0 = false;
      hikariConfig0.setInitializationFailFast(boolean0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      
      long long1 = 5000L;
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "/6 #SWe'IgYtwI";
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      hikariConfig0.setMaxLifetime(long1);
      assertFalse(long1 == long0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      
      long long2 = hikariConfig0.getMaxLifetime();
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertEquals(5000L, long2);
      
      int int3 = hikariConfig0.getAcquireIncrement();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, int3);
      
      int int4 = hikariConfig0.getTransactionIsolation();
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), int4);
      
      Properties properties1 = new Properties();
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotNull(properties1);
      
      HikariConfig hikariConfig1 = new HikariConfig(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNotNull(hikariConfig1);
      
      hikariConfig1.setMinimumPoolSize(int1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(properties1, properties0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int4);
      assertFalse(int1 == int2);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(60, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      
      hikariConfig0.copyState(hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(properties1, properties0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(5000L, hikariConfig1.getMaxLifetime());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(120000L, hikariConfig1.getIdleTimeout());
      
      boolean boolean2 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Properties properties2 = hikariConfig0.getDataSourceProperties();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      assertNotNull(properties2);
      
      String string2 = hikariConfig0.getCatalog();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertNull(string2);
      
      String string3 = hikariConfig0.getPoolName();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(string3.equals((Object)string1));
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = hikariConfig0.getConnectionInitSql();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertNull(string4);
      
      String string5 = hikariConfig0.getCatalog();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertNull(string5);
      
      long long3 = hikariConfig0.getAcquireRetryDelay();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, long3);
      
      long long4 = hikariConfig0.getConnectionTimeout();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(long4 == long2);
      assertTrue(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(120000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(120000L, hikariConfig0.getConnectionTimeout());
      assertEquals(120000L, long4);
      
      // Undeclared exception!
      try { 
        hikariConfig1.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test088()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNotNull(hikariConfig0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig1);
      
      int int0 = 0;
      hikariConfig0.copyState(hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      
      Object object0 = properties0.put(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(object0);
      
      hikariConfig1.setAcquireRetries(int0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireRetries());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      
      hikariConfig0.copyState(hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      
      String string0 = hikariConfig0.getDataSourceClassName();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(string0);
      
      int int1 = 356;
      String string1 = null;
      hikariConfig1.setConnectionCustomizerClassName(string1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      
      hikariConfig1.setMaximumPoolSize(int1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(int1 == int0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      
      boolean boolean0 = hikariConfig0.isRegisterMbeans();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(boolean0);
      
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      
      String string2 = hikariConfig0.getConnectionInitSql();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(string2);
      
      hikariConfig1.setTransactionIsolation(string0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      
      hikariConfig0.setCatalog(string2);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      
      String string3 = "maxPoolSize is less than minPoolSize, forcing them equal.";
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = properties0.computeIfPresent(string3, biFunction0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(object1);
      
      String string4 = "ZC";
      hikariConfig1.setCatalog(string4);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string4, string3);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals("ZC", hikariConfig1.getCatalog());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(iConnectionCustomizer0);
      
      Properties properties1 = hikariConfig1.getDataSourceProperties();
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(properties1, properties0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(properties1.equals((Object)properties0));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals("ZC", hikariConfig1.getCatalog());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotNull(properties1);
      
      long long0 = hikariConfig0.getIdleTimeout();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, long0);
      
      String string5 = "(^&M^K,$";
      hikariConfig1.setConnectionInitSql(string5);
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals("ZC", hikariConfig1.getCatalog());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("(^&M^K,$", hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      
      boolean boolean1 = hikariConfig0.isAutoCommit();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean1 == boolean0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(boolean1);
      
      String string6 = hikariConfig1.getConnectionInitSql();
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertSame(string6, string5);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals("ZC", hikariConfig1.getCatalog());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("(^&M^K,$", hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNotNull(string6);
      assertEquals("(^&M^K,$", string6);
      
      String string7 = hikariConfig1.getConnectionInitSql();
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertSame(string7, string6);
      assertSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals("ZC", hikariConfig1.getCatalog());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("(^&M^K,$", hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNotNull(string7);
      assertEquals("(^&M^K,$", string7);
      
      long long1 = hikariConfig0.getIdleTimeout();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(long1 == long0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, long1);
  }

  @Test(timeout = 11000)
  public void test089()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNotNull(hikariConfig0);
      
      int int0 = 0;
      long long0 = 119979L;
      hikariConfig0.setAcquireRetryDelay(long0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.setMaxLifetime(long0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertNotNull(hikariConfig1);
      
      int int1 = (-607);
      hikariConfig1.setAcquireIncrement(int1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(int1 == int0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      
      hikariConfig0.setMaximumPoolSize(int0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int0 == int1);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      String string0 = "";
      hikariConfig0.setLeakDetectionThreshold(long0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.setDataSourceClassName(string0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      boolean boolean1 = false;
      hikariConfig0.setInitializationFailFast(boolean1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean0 == boolean1);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(iConnectionCustomizer0);
      
      String string1 = null;
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      String string2 = hikariConfig0.getConnectionCustomizerClassName();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(string2);
      
      long long1 = hikariConfig0.getMaxLifetime();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(long1 == long0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(119979L, long1);
      
      int int2 = hikariConfig0.getAcquireIncrement();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, int2);
      
      hikariConfig0.setAcquireRetries(int0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      String string3 = hikariConfig0.getDataSourceClassName();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertSame(string3, string0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNotNull(string3);
      assertEquals("", string3);
      
      IConnectionCustomizer iConnectionCustomizer1 = hikariConfig0.getConnectionCustomizer();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(iConnectionCustomizer1);
      
      long long2 = hikariConfig0.getLeakDetectionThreshold();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(119979L, long2);
      
      String string4 = null;
      hikariConfig1.setTransactionIsolation(string4);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      
      long long3 = hikariConfig1.getMaxLifetime();
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(1800000L, long3);
      
      boolean boolean2 = hikariConfig0.isRegisterMbeans();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(119979L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(boolean2);
      
      hikariConfig0.validate();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.copyState(hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(119979L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(10, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireRetries());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("", hikariConfig1.getDataSourceClassName());
      assertEquals(119979L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNull(hikariConfig1.getCatalog());
      
      int int3 = hikariConfig1.getAcquireRetries();
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(10, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireRetries());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals("", hikariConfig1.getDataSourceClassName());
      assertEquals(119979L, hikariConfig1.getLeakDetectionThreshold());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0, int3);
  }

  @Test(timeout = 11000)
  public void test090()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNotNull(hikariDataSource0);
      
      int int0 = 2669;
      String string0 = hikariDataSource0.toString();
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNotNull(string0);
      assertEquals("HikariDataSource (null)", string0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      hikariDataSource0.setDataSourceProperties(properties0);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      hikariDataSource0.setMinimumPoolSize(int0);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      
      boolean boolean0 = true;
      hikariDataSource0.setRegisterMbeans(boolean0);
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      
      String string1 = "I,T";
      hikariDataSource0.setDataSourceClassName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("I,T", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      
      long long0 = 1867L;
      hikariDataSource0.setIdleTimeout(long0);
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1867L, hikariDataSource0.getIdleTimeout());
      assertEquals("I,T", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      
      String string2 = "Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.";
      String string3 = hikariDataSource0.getConnectionTestQuery();
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1867L, hikariDataSource0.getIdleTimeout());
      assertEquals("I,T", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertNull(string3);
      
      long long1 = (-2288L);
      hikariDataSource0.setIdleTimeout(long1);
      assertFalse(long1 == long0);
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("I,T", hikariDataSource0.getDataSourceClassName());
      assertEquals((-2288L), hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      
      int int1 = hikariDataSource0.getTransactionIsolation();
      assertFalse(int1 == int0);
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("I,T", hikariDataSource0.getDataSourceClassName());
      assertEquals((-2288L), hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), int1);
      
      String string4 = hikariDataSource0.getPoolName();
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("I,T", hikariDataSource0.getDataSourceClassName());
      assertEquals((-2288L), hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertNotNull(string4);
      assertEquals("HikariPool-0", string4);
      
      long long2 = hikariDataSource0.getIdleTimeout();
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("I,T", hikariDataSource0.getDataSourceClassName());
      assertEquals((-2288L), hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-2288L), long2);
      
      long long3 = hikariDataSource0.getAcquireRetryDelay();
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("I,T", hikariDataSource0.getDataSourceClassName());
      assertEquals((-2288L), hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, long3);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // idleTimeout cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test091()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNotNull(hikariDataSource0);
      
      int int0 = 2669;
      String string0 = hikariDataSource0.toString();
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNotNull(string0);
      assertEquals("HikariDataSource (null)", string0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      hikariDataSource0.setDataSourceProperties(properties0);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      hikariDataSource0.setMinimumPoolSize(int0);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      
      String string1 = "I,T";
      boolean boolean0 = false;
      hikariDataSource0.setJdbc4ConnectionTest(boolean0);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      
      hikariDataSource0.setDataSourceClassName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("I,T", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      
      long long0 = 1867L;
      hikariDataSource0.setIdleTimeout(long0);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1867L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("I,T", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      
      String string2 = "";
      String string3 = hikariDataSource0.getConnectionTestQuery();
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1867L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("I,T", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(string3);
      
      int int1 = hikariDataSource0.getTransactionIsolation();
      assertFalse(int1 == int0);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1867L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("I,T", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), int1);
      
      String string4 = hikariDataSource0.getPoolName();
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1867L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("I,T", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertNotNull(string4);
      assertEquals("HikariPool-0", string4);
      
      long long1 = hikariDataSource0.getIdleTimeout();
      assertTrue(long1 == long0);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1867L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("I,T", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1867L, long1);
      
      long long2 = hikariDataSource0.getAcquireRetryDelay();
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(1867L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(2669, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("I,T", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, long2);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test092()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = true;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      boolean boolean1 = false;
      hikariConfig0.setRegisterMbeans(boolean1);
      assertFalse(boolean1 == boolean0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      String string0 = "volatile";
      hikariConfig0.setConnectionTestQuery(string0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertFalse(boolean0 == boolean1);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      DataSource dataSource0 = null;
      hikariConfig0.setDataSource(dataSource0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      long long0 = 1479L;
      hikariConfig0.setConnectionTimeout(long0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      String string1 = "";
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      long long1 = 2566L;
      hikariConfig0.setLeakDetectionThreshold(long1);
      assertFalse(long1 == long0);
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setConnectionInitSql(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      String string2 = "javassist.compiler.ast.NewExpr";
      hikariConfig0.addDataSourceProperty(string2, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setDataSourceClassName(string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.validate();
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertFalse(boolean0 == boolean1);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      long long2 = hikariConfig0.getMaxLifetime();
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, long2);
      
      hikariConfig0.setMaxLifetime(long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(2566L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(2566L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      boolean boolean2 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean2);
      assertFalse(boolean2 == boolean0);
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(2566L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      
      String string3 = hikariConfig0.getCatalog();
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(2566L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(string3);
      
      int int0 = hikariConfig0.getAcquireRetries();
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(2566L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, int0);
      
      hikariConfig0.setConnectionCustomizerClassName(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(2566L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("javassist.compiler.ast.NewExpr", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      
      String string4 = hikariConfig0.getConnectionCustomizerClassName();
      assertNotSame(string4, string0);
      assertSame(string4, string2);
      assertNotSame(string4, string1);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(2566L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("javassist.compiler.ast.NewExpr", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNotNull(string4);
      assertEquals("javassist.compiler.ast.NewExpr", string4);
      
      hikariConfig0.validate();
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      
      long long3 = (-1L);
      hikariConfig0.setMaxLifetime(long3);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1L), hikariConfig0.getMaxLifetime());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      
      long long4 = hikariConfig0.getAcquireRetryDelay();
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1L), hikariConfig0.getMaxLifetime());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1479L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, long4);
  }

  @Test(timeout = 11000)
  public void test093()  throws Throwable  {
      long long0 = 1331L;
      String string0 = null;
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNotNull(hikariConfig0);
      
      HikariConfig hikariConfig1 = new HikariConfig();
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNotNull(hikariConfig1);
      
      int int0 = 0;
      String string1 = "#etnt";
      hikariConfig1.setMinimumPoolSize(int0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      
      long long1 = hikariConfig1.getAcquireRetryDelay();
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(long1 == long0);
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0L, long1);
      
      hikariConfig1.setConnectionTestQuery(string1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("#etnt", hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      
      hikariConfig1.setDataSourceClassName(string1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("#etnt", hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("#etnt", hikariConfig1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      
      long long2 = (-1841L);
      hikariConfig1.setLeakDetectionThreshold(long2);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("#etnt", hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("#etnt", hikariConfig1.getDataSourceClassName());
      assertEquals((-1841L), hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      
      int int1 = 1714;
      String string2 = "A$dgV6Gt^AK3(X*i";
      String string3 = "";
      hikariConfig1.setPoolName(string3);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("#etnt", hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("#etnt", hikariConfig1.getDataSourceClassName());
      assertEquals((-1841L), hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals("", hikariConfig1.getPoolName());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      
      hikariConfig1.addDataSourceProperty(string2, string1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("#etnt", hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("#etnt", hikariConfig1.getDataSourceClassName());
      assertEquals((-1841L), hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals("", hikariConfig1.getPoolName());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      hikariConfig1.setAcquireRetries(int1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(int1 == int0);
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(1714, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("#etnt", hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("#etnt", hikariConfig1.getDataSourceClassName());
      assertEquals((-1841L), hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals("", hikariConfig1.getPoolName());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      
      boolean boolean0 = true;
      hikariConfig1.setUseInstrumentation(boolean0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(1714, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("#etnt", hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("#etnt", hikariConfig1.getDataSourceClassName());
      assertEquals((-1841L), hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals("", hikariConfig1.getPoolName());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      
      boolean boolean1 = true;
      hikariConfig1.setConnectionTestQuery(string1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(1714, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("#etnt", hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("#etnt", hikariConfig1.getDataSourceClassName());
      assertEquals((-1841L), hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals("", hikariConfig1.getPoolName());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      
      boolean boolean2 = hikariConfig0.isInitializationFailFast();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(boolean2);
      
      long long3 = hikariConfig1.getLeakDetectionThreshold();
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertTrue(long3 == long2);
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(1714, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("#etnt", hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("#etnt", hikariConfig1.getDataSourceClassName());
      assertEquals((-1841L), hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals("", hikariConfig1.getPoolName());
      assertEquals(0, hikariConfig1.getMinimumPoolSize());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals((-1841L), long3);
  }

  @Test(timeout = 11000)
  public void test094()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNotNull(hikariConfig0);
      
      boolean boolean0 = true;
      boolean boolean1 = true;
      hikariConfig0.setJdbc4ConnectionTest(boolean1);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      String string0 = "volatile";
      hikariConfig0.setConnectionTestQuery(string0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(iConnectionCustomizer0);
      
      hikariConfig0.setRegisterMbeans(boolean1);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      DataSource dataSource0 = null;
      hikariConfig0.setDataSource(dataSource0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      String string1 = "";
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      hikariConfig0.setTransactionIsolation(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      long long0 = (-435L);
      hikariConfig0.setMaxLifetime(long0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-435L), hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      hikariConfig0.setAcquireRetryDelay(long0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-435L), hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-435L), hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      
      long long1 = 2566L;
      hikariConfig0.setLeakDetectionThreshold(long1);
      assertFalse(long1 == long0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-435L), hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      
      hikariConfig0.setConnectionInitSql(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-435L), hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      
      String string2 = "-?ITdqSz/Hp4IEG";
      hikariConfig0.addDataSourceProperty(string2, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-435L), hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      
      hikariConfig0.setDataSourceClassName(string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(2566L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("volatile", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-435L), hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maxLifetime cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test095()  throws Throwable  {
      String string0 = "{9J`vKqD]?VH`0:>";
      HikariConfig hikariConfig0 = new HikariConfig();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNotNull(hikariConfig0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      hikariConfig0.setIdleTimeout(byte0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)73;
      byteArray0[1] = byte1;
      byte byte2 = (byte)17;
      byteArray0[2] = byte2;
      byte byte3 = (byte)107;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-98);
      byteArray0[4] = byte4;
      byte byte5 = (byte)60;
      byteArray0[5] = byte5;
      byte byte6 = (byte)35;
      byte byte7 = (byte) (-9);
      byteArray0[7] = byte7;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)73, (byte)17, (byte)107, (byte) (-98), (byte)60, (byte)0, (byte) (-9)}, byteArray0);
      assertFalse(boolean0);
      
      hikariConfig0.setDataSourceClassName(string0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, long0);
      
      hikariConfig0.setMaxLifetime(byteArray0[6]);
      assertEquals(8, byteArray0.length);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertArrayEquals(new byte[] {(byte)0, (byte)73, (byte)17, (byte)107, (byte) (-98), (byte)60, (byte)0, (byte) (-9)}, byteArray0);
      
      hikariConfig0.validate();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      
      int int0 = hikariConfig0.getTransactionIsolation();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), int0);
      
      long long1 = hikariConfig0.getLeakDetectionThreshold();
      assertTrue(long1 == long0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, long1);
      
      long long2 = hikariConfig0.getAcquireRetryDelay();
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("{9J`vKqD]?VH`0:>", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, long2);
  }

  @Test(timeout = 11000)
  public void test096()  throws Throwable  {
      long long0 = 1331L;
      String string0 = null;
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNotNull(hikariConfig0);
      
      int int0 = 0;
      String string1 = "#etnt";
      hikariConfig0.setMinimumPoolSize(int0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      long long1 = hikariConfig0.getAcquireRetryDelay();
      assertFalse(long1 == long0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, long1);
      
      String string2 = "invalid builtin type: ";
      hikariConfig0.setConnectionTestQuery(string2);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("invalid builtin type: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.setDataSourceClassName(string1);
      assertNotSame(string1, string2);
      assertFalse(string1.equals((Object)string2));
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("invalid builtin type: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("#etnt", hikariConfig0.getDataSourceClassName());
      
      long long2 = (-1841L);
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNotNull(hikariDataSource0);
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("invalid builtin type: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("#etnt", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      hikariConfig0.setLeakDetectionThreshold(long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1841L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("invalid builtin type: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("#etnt", hikariConfig0.getDataSourceClassName());
      
      int int1 = 1714;
      hikariConfig0.setAcquireRetries(int1);
      assertFalse(int1 == int0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1841L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1714, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("invalid builtin type: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("#etnt", hikariConfig0.getDataSourceClassName());
      
      boolean boolean0 = true;
      hikariConfig0.setUseInstrumentation(boolean0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1841L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1714, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("invalid builtin type: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("#etnt", hikariConfig0.getDataSourceClassName());
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1841L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1714, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("invalid builtin type: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("#etnt", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      boolean boolean1 = true;
      hikariConfig0.setConnectionTestQuery(string1);
      assertNotSame(string1, string2);
      assertFalse(string1.equals((Object)string2));
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1841L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1714, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("#etnt", hikariConfig0.getDataSourceClassName());
      assertEquals("#etnt", hikariConfig0.getConnectionTestQuery());
      
      boolean boolean2 = hikariConfig0.isInitializationFailFast();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1841L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(1714, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("#etnt", hikariConfig0.getDataSourceClassName());
      assertEquals("#etnt", hikariConfig0.getConnectionTestQuery());
      assertFalse(boolean2);
      
      hikariConfig0.validate();
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1714, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("#etnt", hikariConfig0.getDataSourceClassName());
      assertEquals("#etnt", hikariConfig0.getConnectionTestQuery());
  }

  @Test(timeout = 11000)
  public void test097()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotNull(hikariConfig0);
      
      Properties properties1 = hikariConfig0.getDataSourceProperties();
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNotNull(properties1);
      
      int int0 = hikariConfig0.getAcquireRetries();
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, int0);
      
      String string0 = "LeSr0snv&$`7H";
      hikariConfig0.setCatalog(string0);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("LeSr0snv&$`7H", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("LeSr0snv&$`7H", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, long0);
      
      String string1 = "";
      hikariConfig0.setCatalog(string1);
      assertNotSame(properties0, properties1);
      assertNotSame(string1, string0);
      assertTrue(properties0.equals((Object)properties1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      int int1 = hikariConfig0.getMinimumPoolSize();
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertFalse(int1 == int0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, int1);
      
      int int2 = hikariConfig0.getAcquireRetries();
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, int2);
      
      long long1 = hikariConfig0.getConnectionTimeout();
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertFalse(long1 == long0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, long1);
      
      String string2 = hikariConfig0.getCatalog();
      assertNotSame(properties0, properties1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertTrue(properties0.equals((Object)properties1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 11000)
  public void test098()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNotNull(hikariConfig0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNotNull(hikariConfig1);
      
      int int0 = 0;
      hikariConfig0.copyState(hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertTrue(hikariConfig1.isAutoCommit());
      
      Object object0 = properties0.put(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(object0);
      
      hikariConfig1.setAcquireRetries(int0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0, hikariConfig1.getAcquireRetries());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertTrue(hikariConfig1.isAutoCommit());
      
      hikariConfig0.copyState(hikariConfig1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertTrue(hikariConfig1.isAutoCommit());
      
      String string0 = hikariConfig0.getDataSourceClassName();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(string0);
      
      int int1 = 356;
      String string1 = null;
      hikariConfig1.setConnectionCustomizerClassName(string1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertTrue(hikariConfig1.isAutoCommit());
      
      hikariConfig1.setMaximumPoolSize(int1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(int1 == int0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      
      boolean boolean0 = hikariConfig0.isRegisterMbeans();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(boolean0);
      
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      
      String string2 = hikariConfig0.getConnectionInitSql();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(string2);
      
      hikariConfig1.setTransactionIsolation(string0);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      
      hikariConfig0.setCatalog(string2);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      
      String string3 = "maxPoolSize is less than minPoolSize, forcing them equal.";
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = properties0.computeIfPresent(string3, biFunction0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(object1);
      
      String string4 = "ZC";
      long long0 = (-834L);
      hikariConfig1.setMaxLifetime(long0);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-834L), hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      
      hikariConfig1.setCatalog(string4);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string4, string3);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-834L), hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("ZC", hikariConfig1.getCatalog());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(iConnectionCustomizer0);
      
      Properties properties1 = hikariConfig1.getDataSourceProperties();
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(properties1, properties0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(properties1.equals((Object)properties0));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-834L), hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("ZC", hikariConfig1.getCatalog());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNotNull(properties1);
      
      long long1 = hikariConfig0.getIdleTimeout();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(long1 == long0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, long1);
      
      String string5 = "(^&M^K,$";
      hikariConfig1.setConnectionInitSql(string5);
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-834L), hikariConfig1.getMaxLifetime());
      assertEquals("(^&M^K,$", hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("ZC", hikariConfig1.getCatalog());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      
      boolean boolean1 = hikariConfig0.isAutoCommit();
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(boolean1 == boolean0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(boolean1);
      
      long long2 = hikariConfig1.getMaxLifetime();
      assertNotSame(properties0, properties1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals((-834L), hikariConfig1.getMaxLifetime());
      assertEquals("(^&M^K,$", hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("ZC", hikariConfig1.getCatalog());
      assertEquals(356, hikariConfig1.getMaximumPoolSize());
      assertEquals((-834L), long2);
  }

  @Test(timeout = 11000)
  public void test099()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNotNull(hikariConfig0);
      
      String string0 = "Error loading properties file";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Error loading properties file", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = "";
      hikariConfig0.setDataSourceClassName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Error loading properties file", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      
      hikariConfig0.addDataSourceProperty(string0, object0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Error loading properties file", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      
      int int0 = hikariConfig0.getAcquireIncrement();
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Error loading properties file", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, int0);
      
      String string2 = null;
      hikariConfig0.setAcquireIncrement(int0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Error loading properties file", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      
      hikariConfig0.setPoolName(string2);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Error loading properties file", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      
      int int1 = hikariConfig0.getMinimumPoolSize();
      assertFalse(int1 == int0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Error loading properties file", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, int1);
      
      String string3 = hikariConfig0.getPoolName();
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Error loading properties file", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(string3);
      
      int int2 = hikariConfig0.getTransactionIsolation();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Error loading properties file", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals((-1), int2);
      
      String string4 = hikariConfig0.getPoolName();
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("Error loading properties file", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(string4);
  }

  @Test(timeout = 11000)
  public void test100()  throws Throwable  {
      long long0 = 30L;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("booleanValue");
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      long long1 = 0L;
      boolean boolean1 = true;
      String string1 = "booleanValue";
      HikariConfig hikariConfig0 = new HikariConfig(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNotNull(hikariConfig0);
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }
}
