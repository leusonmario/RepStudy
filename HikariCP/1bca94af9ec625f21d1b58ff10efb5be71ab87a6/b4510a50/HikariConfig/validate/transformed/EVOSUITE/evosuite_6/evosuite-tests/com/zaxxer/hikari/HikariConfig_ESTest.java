/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 23:46:08 GMT 2021
 */

package com.zaxxer.hikari;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPool;
import com.zaxxer.hikari.IConnectionCustomizer;
import com.zaxxer.hikari.proxy.IHikariConnectionProxy;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.Enumeration;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HikariConfig_ESTest extends HikariConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test000()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNotNull(hikariDataSource0);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      String string0 = hikariDataSource0.getConnectionTestQuery();
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(string0);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.setMinimumPoolSize(hikariDataSource0.transactionIsolation);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test001()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNotNull(hikariConfig0);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      String string0 = "C%ticfZJ9L05x9I";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNotNull(hikariDataSource0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      
      int int0 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      hikariConfig0.validate();
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      hikariConfig0.setAcquireIncrement(hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
  }

  @Test(timeout = 11000)
  public void test002()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Xs");
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      String string1 = "Xs";
      HikariConfig hikariConfig0 = new HikariConfig(string1);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotNull(hikariConfig0);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(string1.equals((Object)string0));
      
      hikariConfig0.dataSourceClassName = string0;
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      HikariConfig.IDLE_TIMEOUT = (long) hikariConfig0.transactionIsolation;
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      hikariConfig0.idleTimeout = HikariConfig.IDLE_TIMEOUT;
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1L), hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // idleTimeout cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test003()  throws Throwable  {
      String string0 = "\\";
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNotNull(hikariDataSource0);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      hikariDataSource0.dataSourceClassName = string0;
      assertEquals("\\", hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      HikariDataSource hikariDataSource1 = null;
      try {
        hikariDataSource1 = new HikariDataSource(hikariDataSource0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: \\
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test004()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNotNull(hikariDataSource0);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      hikariDataSource0.idleTimeout = (long) hikariDataSource0.acquireRetries;
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      
      hikariDataSource0.setLeakDetectionThreshold(hikariDataSource0.acquireRetries);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3L, hikariDataSource0.getIdleTimeout());
      assertEquals(3L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(3L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      String string0 = "";
      hikariDataSource0.setDataSourceClassName(string0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3L, hikariDataSource0.getIdleTimeout());
      assertEquals(3L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(3L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      hikariDataSource0.validate();
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      String string1 = "No connection wait timeout is set, this might cause an infinite wait.";
      hikariDataSource0.setCatalog(hikariDataSource0.connectionTestQuery);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      hikariDataSource0.transactionIsolationName = hikariDataSource0.catalog;
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      
      String string2 = hikariDataSource0.getConnectionCustomizerClassName();
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(string2);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
  }

  @Test(timeout = 11000)
  public void test005()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotNull(hikariConfig0);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      
      int int0 = hikariConfig0.getAcquireIncrement();
      assertEquals(0, int0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
  }

  @Test(timeout = 11000)
  public void test006()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.setJdbc4ConnectionTest(hikariConfig0.isAutoCommit);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.setConnectionTimeout(hikariConfig0.MAX_LIFETIME);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.setAutoCommit(hikariConfig0.isRegisterMbeans);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.setMinimumPoolSize(hikariConfig0.minPoolSize);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.setDataSourceProperties(hikariConfig0.dataSourceProperties);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.setPoolName(hikariConfig0.poolName);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
  }

  @Test(timeout = 11000)
  public void test007()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNotNull(hikariDataSource0);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.setConnectionTimeout(hikariDataSource0.poolNumber);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test008()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      String string0 = "m?i[O<\\Z!:vq";
      hikariConfig0.leakDetectionThreshold = hikariConfig0.IDLE_TIMEOUT;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      boolean boolean0 = true;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNotNull(hikariDataSource0);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      long long0 = (-14L);
      hikariConfig0.maxLifetime = long0;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-14L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      String string1 = "maxPoolSize cannot be negative";
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-14L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNotSame(string0, string1);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-14L), hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(string0.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maxLifetime cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test009()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNotNull(hikariConfig0);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      HikariConfig hikariConfig1 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.copyState(hikariConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception copying HikariConfig state: null
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test010()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test011()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNotNull(hikariConfig0);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      HikariConfig hikariConfig1 = null;
      try {
        hikariConfig1 = new HikariConfig(hikariConfig0.poolName);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test012()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNotNull(hikariDataSource0);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      
      HikariConfig hikariConfig0 = new HikariConfig(hikariDataSource0.dataSourceProperties);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNotNull(hikariConfig0);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariDataSource0.copyState(hikariConfig0);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      String string0 = "V7sYd_?W";
      hikariConfig0.dataSourceClassName = string0;
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      
      boolean boolean0 = false;
      hikariDataSource0.setRegisterMbeans(boolean0);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      
      int int0 = 0;
      hikariDataSource0.setAcquireRetries(hikariDataSource0.minPoolSize);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      
      String string1 = hikariDataSource0.getPoolName();
      assertEquals("HikariPool-0", string1);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(string1.equals((Object)string0));
      
      hikariConfig0.setMaxLifetime(int0);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariConfig0.validate();
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      int int1 = hikariDataSource0.getMaximumPoolSize();
      assertEquals(60, int1);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(int1 == int0);
      
      int int2 = hikariConfig0.maxPoolSize;
      assertEquals(60, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string2 = "javassitt.Dytecode.CodeIterator$Branch16";
      hikariConfig0.addDataSourceProperty(string2, string2);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      long long0 = hikariDataSource0.getConnectionTimeout();
      assertEquals(5000L, long0);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      
      long long1 = hikariDataSource0.getMaxLifetime();
      assertEquals(1800000L, long1);
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 11000)
  public void test013()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertNotNull(hikariConfig0);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      int int0 = hikariConfig0.getMinimumPoolSize();
      assertEquals(10, int0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
  }

  @Test(timeout = 11000)
  public void test014()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNotNull(hikariConfig0);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      
      // Undeclared exception!
      try { 
        hikariConfig0.setMaximumPoolSize(hikariConfig0.transactionIsolation);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test015()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNotNull(hikariConfig0);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      boolean boolean0 = true;
      String string0 = "";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long0);
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariConfig0.setIdleTimeout(long0);
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariConfig0.setTransactionIsolation(hikariConfig0.dataSourceClassName);
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariConfig0.setInitializationFailFast(hikariConfig0.isRegisterMbeans);
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariConfig0.setUseInstrumentation(boolean0);
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      boolean boolean1 = hikariConfig0.isInitializationFailFast();
      assertFalse(boolean1);
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(boolean1 == boolean0);
      
      long long1 = hikariConfig0.getIdleTimeout();
      assertEquals(0L, long1);
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(long1 == long0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid transaction isolation value: 
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test016()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNotNull(hikariDataSource0);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      int int0 = (-1987);
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireRetries(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test017()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNotNull(hikariDataSource0);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      HikariConfig hikariConfig0 = new HikariConfig(hikariDataSource0.dataSourceProperties);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNotNull(hikariConfig0);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      hikariDataSource0.setDataSource(hikariConfig0.dataSource);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      String string0 = null;
      hikariDataSource0.setConnectionTestQuery(hikariConfig0.poolName);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      boolean boolean0 = false;
      hikariDataSource0.isJdbc4connectionTest = boolean0;
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      
      hikariDataSource0.copyState(hikariConfig0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      String string1 = "V7sYd_?W";
      hikariConfig0.dataSourceClassName = string1;
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("V7sYd_?W", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      boolean boolean1 = true;
      String string2 = hikariConfig0.getConnectionInitSql();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("V7sYd_?W", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(string2);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      int int0 = 0;
      hikariConfig0.setMaximumPoolSize(int0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("V7sYd_?W", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      hikariDataSource0.setConnectionInitSql(hikariConfig0.dataSourceClassName);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("V7sYd_?W", hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("V7sYd_?W", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      long long0 = 2235L;
      hikariConfig0.setMaxLifetime(long0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("V7sYd_?W", hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals(2235L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("V7sYd_?W", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2235L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      hikariConfig0.validate();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("V7sYd_?W", hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("V7sYd_?W", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.maxPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("V7sYd_?W", hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("V7sYd_?W", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.maxPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
  }

  @Test(timeout = 11000)
  public void test018()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNotNull(hikariDataSource0);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      hikariDataSource0.isJdbc4connectionTest = hikariDataSource0.isRegisterMbeans;
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      
      hikariDataSource0.setAcquireRetryDelay(hikariDataSource0.transactionIsolation);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      hikariDataSource0.setDataSourceClassName(hikariDataSource0.poolName);
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test019()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNotNull(hikariDataSource0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      hikariDataSource0.setConnectionTimeout(hikariDataSource0.leakDetectionThreshold);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(2147483647L, hikariDataSource0.getConnectionTimeout());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(2147483647L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test020()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      hikariConfig0.connectionTimeout = (long) hikariConfig0.acquireRetries;
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test021()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNotNull(hikariDataSource0);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      boolean boolean0 = hikariDataSource0.isJdbc4ConnectionTest();
      assertTrue(boolean0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
  }

  @Test(timeout = 11000)
  public void test022()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNotNull(hikariDataSource0);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      
      long long0 = 921L;
      hikariDataSource0.setAcquireRetryDelay(long0);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
  }

  @Test(timeout = 11000)
  public void test023()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      String string0 = hikariDataSource0.getCatalog();
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(string0);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      hikariDataSource0.setDataSourceClassName(string0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      hikariDataSource0.setCatalog(string0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      long long0 = hikariDataSource0.getMaxLifetime();
      assertEquals(1800000L, long0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
  }

  @Test(timeout = 11000)
  public void test024()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotNull(hikariConfig0);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      HikariConfig.poolNumber = hikariConfig0.transactionIsolation;
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      
      String string0 = "connectionTimeout cannot be less than 100ms";
      hikariConfig0.connectionTestQuery = string0;
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("connectionTimeout cannot be less than 100ms", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      
      long long0 = (-1164L);
      boolean boolean0 = false;
      hikariConfig0.isInitializationFailFast = boolean0;
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("connectionTimeout cannot be less than 100ms", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      
      long long1 = 0L;
      HikariConfig.CONNECTION_TIMEOUT = long1;
      String string1 = "<U>%bbNZ%hhlmMm2wt";
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("connectionTimeout cannot be less than 100ms", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("<U>%bbNZ%hhlmMm2wt", hikariConfig0.getConnectionCustomizerClassName());
      assertNotSame(string1, string0);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(string1.equals((Object)string0));
      
      hikariConfig0.setLeakDetectionThreshold(long0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("connectionTimeout cannot be less than 100ms", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1164L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("<U>%bbNZ%hhlmMm2wt", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1164L), hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(long0 == long1);
      
      hikariConfig0.setAcquireRetryDelay(long0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("connectionTimeout cannot be less than 100ms", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1164L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("<U>%bbNZ%hhlmMm2wt", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1164L), hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(long0 == long1);
  }

  @Test(timeout = 11000)
  public void test025()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      String string0 = hikariDataSource0.getConnectionInitSql();
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(string0);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      long long0 = 2518L;
      hikariDataSource0.setMaxLifetime(long0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(2518L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(2518L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      String string1 = hikariDataSource0.getDataSourceClassName();
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(2518L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(string1);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(2518L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      boolean boolean0 = hikariDataSource0.isAutoCommit();
      assertTrue(boolean0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(2518L, hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(2518L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
  }

  @Test(timeout = 11000)
  public void test026()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotNull(hikariConfig0);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      boolean boolean0 = false;
      hikariConfig0.setInitializationFailFast(boolean0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      int int0 = 0;
      hikariConfig0.setAcquireIncrement(int0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      String string0 = "javassist.bytecode.FieldInfo";
      hikariConfig0.setConnectionTestQuery(string0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.bytecode.FieldInfo", hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      long long0 = 2082L;
      hikariConfig0.setIdleTimeout(long0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(2082L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.bytecode.FieldInfo", hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(2082L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
  }

  @Test(timeout = 11000)
  public void test027()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNotNull(hikariConfig0);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      boolean boolean0 = false;
      hikariConfig0.setAutoCommit(boolean0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      boolean boolean1 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean1);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test028()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      
      boolean boolean0 = false;
      hikariDataSource0.setJdbc4ConnectionTest(boolean0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
  }

  @Test(timeout = 11000)
  public void test029()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      String string0 = hikariConfig0.getConnectionTestQuery();
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(string0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      int int0 = (-4602);
      int int1 = 4797;
      hikariConfig0.setMaximumPoolSize(int1);
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(4797, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4797, hikariConfig0.maxPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(int1 == int0);
      
      hikariConfig0.minPoolSize = int0;
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-4602), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(4797, hikariConfig0.getMaximumPoolSize());
      
      hikariConfig0.poolName = string0;
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-4602), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getPoolName());
      assertEquals(4797, hikariConfig0.getMaximumPoolSize());
      
      long long0 = hikariConfig0.getLeakDetectionThreshold();
      assertEquals(0L, long0);
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-4602), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getPoolName());
      assertEquals(4797, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4797, hikariConfig0.maxPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-4602), hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      boolean boolean0 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean0);
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-4602), hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getPoolName());
      assertEquals(4797, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(4797, hikariConfig0.maxPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-4602), hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      // Undeclared exception!
      try { 
        hikariConfig0.addDataSourceProperty(string0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test030()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNotNull(hikariConfig0);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      String string0 = hikariConfig0.getCatalog();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(string0);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      boolean boolean0 = false;
      hikariConfig0.setUseInstrumentation(boolean0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Enumeration<Object> enumeration0 = properties0.elements();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(enumeration0);
      
      Object object1 = properties0.put(object0, object0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(object1);
      
      Object object2 = null;
  }

  @Test(timeout = 11000)
  public void test031()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotNull(hikariConfig0);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      int int0 = 891;
      hikariConfig0.setAcquireRetryDelay(int0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      String string0 = "#UJn_6K";
      hikariConfig0.connectionTestQuery = string0;
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("#UJn_6K", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      hikariConfig0.setMinimumPoolSize(int0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(891, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("#UJn_6K", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(891, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      int int1 = hikariConfig0.getAcquireIncrement();
      assertEquals(0, int1);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(891, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("#UJn_6K", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(891, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 11000)
  public void test032()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNotNull(hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      int int0 = 466;
      hikariConfig0.setAcquireRetries(int0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(466, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(466, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      
      long long0 = hikariConfig0.getConnectionTimeout();
      assertEquals(5000L, long0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(466, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(466, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      
      hikariConfig0.leakDetectionThreshold = long0;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(466, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      
      String string0 = "cs 9Z5+8UlpVhb|!4O";
      hikariConfig0.setConnectionTestQuery(string0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(466, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("cs 9Z5+8UlpVhb|!4O", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(466, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      
      boolean boolean0 = hikariConfig0.isJdbc4ConnectionTest();
      assertTrue(boolean0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(466, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("cs 9Z5+8UlpVhb|!4O", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(466, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      
      String string1 = "connectionCustomizationClass specified class '";
      hikariConfig0.setCatalog(string1);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(466, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("connectionCustomizationClass specified class '", hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("cs 9Z5+8UlpVhb|!4O", hikariConfig0.getConnectionTestQuery());
      assertNotSame(string1, string0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(466, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(string1.equals((Object)string0));
      
      hikariConfig0.maxPoolSize = int0;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(466, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(466, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("connectionCustomizationClass specified class '", hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("cs 9Z5+8UlpVhb|!4O", hikariConfig0.getConnectionTestQuery());
      
      long long1 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long1);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(466, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(466, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("connectionCustomizationClass specified class '", hikariConfig0.getCatalog());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("cs 9Z5+8UlpVhb|!4O", hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(466, hikariConfig0.maxPoolSize);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(466, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(long1 == long0);
      
      int int1 = (-2166);
      // Undeclared exception!
      try { 
        hikariConfig0.setMinimumPoolSize(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test033()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNotNull(hikariDataSource0);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      String string0 = "la`sW#4F";
      hikariDataSource0.setDataSourceClassName(string0);
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("la`sW#4F", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      boolean boolean0 = hikariDataSource0.isAutoCommit();
      assertTrue(boolean0);
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("la`sW#4F", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      int int0 = hikariDataSource0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals("la`sW#4F", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
  }

  @Test(timeout = 11000)
  public void test034()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNotNull(hikariConfig0);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test035()  throws Throwable  {
      String string0 = "Ju7vL+j&L$";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test036()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotNull(hikariConfig0);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      HikariConfig hikariConfig1 = new HikariConfig();
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNotNull(hikariConfig1);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.copyState(hikariConfig1);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string0 = "8(<(fHB K8";
      hikariConfig1.dataSourceClassName = hikariConfig0.dataSourceClassName;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      
      hikariConfig0.setConnectionTestQuery(string0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("8(<(fHB K8", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      hikariConfig0.maxLifetime = hikariConfig1.maxLifetime;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("8(<(fHB K8", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("8(<(fHB K8", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      long long1 = hikariConfig0.getMaxLifetime();
      assertEquals(1800000L, long1);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("8(<(fHB K8", hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(long1 == long0);
      
      long long2 = (-5965L);
      // Undeclared exception!
      try { 
        hikariConfig1.setConnectionTimeout(long2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test037()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNotNull(hikariDataSource0);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      
      String string0 = "";
      hikariDataSource0.setPoolName(string0);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getPoolName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      
      String string1 = "";
      hikariDataSource0.setConnectionInitSql(string1);
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getPoolName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertSame(string1, string0);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
  }

  @Test(timeout = 11000)
  public void test038()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNotNull(hikariDataSource0);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      long long0 = (-888L);
      hikariDataSource0.maxLifetime = long0;
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-888L), hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      boolean boolean0 = hikariDataSource0.isRegisterMbeans();
      assertFalse(boolean0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-888L), hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-888L), hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      String string0 = hikariDataSource0.getCatalog();
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-888L), hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(string0);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-888L), hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      boolean boolean1 = hikariDataSource0.isInitializationFailFast();
      assertFalse(boolean1);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-888L), hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-888L), hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(boolean1 == boolean0);
      
      int int0 = hikariDataSource0.getAcquireIncrement();
      assertEquals(0, int0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-888L), hikariDataSource0.getMaxLifetime());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-888L), hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isAutoCommit);
  }

  @Test(timeout = 11000)
  public void test039()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      HikariConfig.poolNumber = hikariConfig0.transactionIsolation;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      String string0 = "javassist.bytecode.CodeIterator$If16";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      long long0 = 766L;
      hikariConfig0.setAcquireRetryDelay(long0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      hikariConfig0.maxPoolSize = HikariConfig.poolNumber;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      boolean boolean0 = false;
      hikariConfig0.isJdbc4connectionTest = boolean0;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      boolean boolean1 = true;
      hikariConfig0.setJdbc4ConnectionTest(boolean1);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(boolean1 == boolean0);
      
      hikariConfig0.setAutoCommit(boolean0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(boolean0 == boolean1);
      
      boolean boolean2 = false;
      hikariConfig0.setInitializationFailFast(boolean2);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(boolean2 == boolean1);
      
      HikariConfig.MAX_LIFETIME = (long) hikariConfig0.maxPoolSize;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      
      hikariConfig0.maxPoolSize = HikariConfig.poolNumber;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isAutoCommit());
      
      hikariConfig0.idleTimeout = HikariConfig.MAX_LIFETIME;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1L), hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isAutoCommit());
      
      long long1 = (-388L);
      hikariConfig0.setLeakDetectionThreshold(long1);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-388L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1L), hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-388L), hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-1L), HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(long1 == long0);
      
      String string1 = hikariConfig0.getCatalog();
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-388L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1L), hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(string1);
      assertEquals((-388L), hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-1L), HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      int int0 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-388L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1L), hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-388L), hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-1L), HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      String string2 = hikariConfig0.getConnectionInitSql();
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-388L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1L), hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isAutoCommit());
      assertNull(string2);
      assertEquals((-388L), hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-1L), HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      long long2 = hikariConfig0.getLeakDetectionThreshold();
      assertEquals((-388L), long2);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-388L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1L), hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-388L), hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-1L), HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      
      boolean boolean3 = true;
      hikariConfig0.setUseInstrumentation(boolean3);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-388L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1L), hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-388L), hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-1L), HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      hikariConfig0.setIdleTimeout(HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-388L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1L), hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-388L), hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-1L), HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(HikariConfig.poolNumber == int0);
      
      boolean boolean4 = false;
      hikariConfig0.setUseInstrumentation(boolean4);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-388L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals((-1L), hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-388L), hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-1L), HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      
      // Undeclared exception!
      try { 
        hikariConfig0.setMinimumPoolSize(HikariConfig.poolNumber);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test040()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test041()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNotNull(hikariConfig0);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      Object object0 = properties0.remove((Object) hikariConfig0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(object0);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      String string0 = "connectionTimeout is less than 100ms, did you specify the wrong time unit?  Using default instead.";
      HikariConfig hikariConfig1 = null;
      try {
        hikariConfig1 = new HikariConfig(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test042()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      int int0 = 0;
      hikariConfig0.setMaximumPoolSize(int0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      boolean boolean0 = true;
      long long0 = 1474L;
      HikariConfig.CONNECTION_TIMEOUT = long0;
      hikariConfig0.setInitializationFailFast(boolean0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1474L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      int int1 = 2035;
      hikariConfig0.setMaximumPoolSize(int1);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(2035, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1474L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(2035, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(int1 == int0);
      
      String string0 = "";
      hikariConfig0.poolName = string0;
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(2035, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      
      long long1 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long1);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(2035, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1474L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(2035, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(long1 == long0);
      
      hikariConfig0.setConnectionInitSql(string0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(2035, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1474L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(2035, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test043()  throws Throwable  {
      String string0 = null;
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 11000)
  public void test044()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNotNull(hikariDataSource0);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      int int0 = (-1589);
      hikariDataSource0.setLeakDetectionThreshold(int0);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1589L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1589L), hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      HikariConfig.poolNumber = int0;
      int int1 = (-1329);
      String string0 = "P,i'UA<nHb[ul.E.Mb";
      int int2 = (-792);
      hikariDataSource0.acquireRetries = int2;
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-792), hikariDataSource0.getAcquireRetries());
      assertEquals((-1589L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      hikariDataSource0.maxPoolSize = int2;
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-792), hikariDataSource0.getMaximumPoolSize());
      assertEquals((-792), hikariDataSource0.getAcquireRetries());
      assertEquals((-1589L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-792), hikariDataSource0.getMaximumPoolSize());
      assertEquals((-792), hikariDataSource0.getAcquireRetries());
      assertEquals((-1589L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals("P,i'UA<nHb[ul.E.Mb", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-792), hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals((-792), hikariDataSource0.maxPoolSize);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1589L), hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1589), HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.setMaximumPoolSize(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test045()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNotNull(hikariConfig0);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      int int0 = 10;
      String string0 = "04WY#~#Kv#";
      hikariConfig0.setPoolName(string0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("04WY#~#Kv#", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      hikariConfig0.leakDetectionThreshold = (long) int0;
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("04WY#~#Kv#", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      String string1 = "doubleValue";
      hikariConfig0.dataSourceClassName = string1;
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("doubleValue", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("04WY#~#Kv#", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      String string2 = "";
      hikariConfig0.transactionIsolationName = string2;
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("doubleValue", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("04WY#~#Kv#", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      hikariConfig0.minPoolSize = int0;
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("doubleValue", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("04WY#~#Kv#", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      
      boolean boolean0 = false;
      int int1 = (-985);
      // Undeclared exception!
      try { 
        hikariConfig0.setMaximumPoolSize(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test046()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNotNull(hikariDataSource0);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      
      int int0 = 0;
      hikariDataSource0.setMinimumPoolSize(int0);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      
      DataSource dataSource0 = null;
      hikariDataSource0.dataSource = dataSource0;
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      
      String string0 = hikariDataSource0.getConnectionTestQuery();
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(string0);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(0, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      
      HikariDataSource hikariDataSource1 = null;
      try {
        hikariDataSource1 = new HikariDataSource(hikariDataSource0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test047()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      long long0 = 2040L;
      hikariConfig0.idleTimeout = long0;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(2040L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      String string0 = "";
      boolean boolean0 = false;
      hikariConfig0.isRegisterMbeans = boolean0;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(2040L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setCatalog(string0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(2040L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2040L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test048()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNotNull(hikariConfig0);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      String string0 = "Exception copying HikariConfig state: ";
      hikariConfig0.catalog = string0;
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("Exception copying HikariConfig state: ", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      String string1 = hikariConfig0.getConnectionCustomizerClassName();
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("Exception copying HikariConfig state: ", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(string1);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      int int0 = (-509);
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("Exception copying HikariConfig state: ", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      hikariConfig0.setAcquireIncrement(int0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("Exception copying HikariConfig state: ", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      int int1 = 0;
      hikariConfig0.setAcquireIncrement(int1);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("Exception copying HikariConfig state: ", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(int1 == int0);
      
      String string2 = null;
      hikariConfig0.poolName = string2;
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("Exception copying HikariConfig state: ", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      int int2 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int2);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("Exception copying HikariConfig state: ", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test049()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotNull(hikariConfig0);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      int int0 = 0;
      hikariConfig0.connectionTimeout = (long) int0;
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      hikariConfig0.transactionIsolation = int0;
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      hikariConfig0.leakDetectionThreshold = (long) int0;
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      hikariConfig0.setAcquireRetryDelay(int0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0, hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0, hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      String string0 = "";
      hikariConfig0.catalog = string0;
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      int int1 = 181;
      hikariConfig0.setMinimumPoolSize(int1);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(181, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(181, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0, hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(int1 == int0);
      
      long long1 = 30L;
      HikariConfig.CONNECTION_TIMEOUT = long1;
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test050()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNotNull(hikariDataSource0);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      int int0 = 0;
      hikariDataSource0.setMaximumPoolSize(int0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(0, hikariDataSource0.maxPoolSize);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      int int1 = hikariDataSource0.getAcquireRetries();
      assertEquals(3, int1);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(0, hikariDataSource0.maxPoolSize);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(int1 == int0);
      
      int int2 = hikariDataSource0.getMinimumPoolSize();
      assertEquals(10, int2);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(0, hikariDataSource0.maxPoolSize);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean0 = hikariDataSource0.isInitializationFailFast();
      assertFalse(boolean0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(0, hikariDataSource0.maxPoolSize);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      Properties properties0 = hikariDataSource0.getDataSourceProperties();
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(0, hikariDataSource0.maxPoolSize);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
  }

  @Test(timeout = 11000)
  public void test051()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(dataSource0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      String string0 = ">)' Bn@OE{9";
      hikariConfig0.setPoolName(string0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(">)' Bn@OE{9", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
  }

  @Test(timeout = 11000)
  public void test052()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      boolean boolean0 = true;
      hikariConfig0.isAutoCommit = boolean0;
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      int int0 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      boolean boolean1 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean1);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(boolean1 == boolean0);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNotNull(hikariDataSource0);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
  }

  @Test(timeout = 11000)
  public void test053()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNotNull(hikariDataSource0);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      String string0 = "`)F-*z^gpj#";
      hikariDataSource0.setPoolName(string0);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("`)F-*z^gpj#", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      String string1 = ")lUZk0QcKv3{c9o {n";
      hikariDataSource0.connectionInitSql = string1;
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("`)F-*z^gpj#", hikariDataSource0.getPoolName());
      assertEquals(")lUZk0QcKv3{c9o {n", hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      
      long long0 = (-888L);
      hikariDataSource0.setMaxLifetime(long0);
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-888L), hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("`)F-*z^gpj#", hikariDataSource0.getPoolName());
      assertEquals(")lUZk0QcKv3{c9o {n", hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-888L), hikariDataSource0.maxLifetime);
      
      String string2 = "";
      hikariDataSource0.setLeakDetectionThreshold(long0);
      assertEquals((-888L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-888L), hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("`)F-*z^gpj#", hikariDataSource0.getPoolName());
      assertEquals(")lUZk0QcKv3{c9o {n", hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-888L), hikariDataSource0.leakDetectionThreshold);
      assertEquals((-888L), hikariDataSource0.maxLifetime);
      
      hikariDataSource0.addDataSourceProperty(string2, string2);
      assertEquals((-888L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-888L), hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("`)F-*z^gpj#", hikariDataSource0.getPoolName());
      assertEquals(")lUZk0QcKv3{c9o {n", hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-888L), hikariDataSource0.leakDetectionThreshold);
      assertEquals((-888L), hikariDataSource0.maxLifetime);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = hikariDataSource0.isInitializationFailFast();
      assertFalse(boolean0);
      assertEquals((-888L), hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-888L), hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("`)F-*z^gpj#", hikariDataSource0.getPoolName());
      assertEquals(")lUZk0QcKv3{c9o {n", hikariDataSource0.getConnectionInitSql());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-888L), hikariDataSource0.leakDetectionThreshold);
      assertEquals((-888L), hikariDataSource0.maxLifetime);
  }

  @Test(timeout = 11000)
  public void test054()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      String string0 = "SV=%ey1Gca>Lm";
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      
      String string1 = "X\"|+g.R2v+[pF~*]lmg";
      properties0.store((Writer) mockFileWriter0, string1);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNotNull(hikariConfig0);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      int int0 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      long long0 = 48L;
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test055()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      
      String string0 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotNull(string0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
  }

  @Test(timeout = 11000)
  public void test056()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNotNull(hikariDataSource0);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      
      String string0 = "leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.";
      hikariDataSource0.catalog = string0;
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      String string1 = "javassist.bytecode.stackmap.BasicBlock$JsrBytecode";
      String string2 = "--b>Q";
      String string3 = "";
      hikariDataSource0.setDataSourceClassName(string3);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        hikariDataSource0.getConnection(string1, string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: 
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test057()  throws Throwable  {
      String string0 = ",gym/Q";
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      String string1 = "";
      String string2 = ")!0N4H?Rx";
      hikariConfig0.connectionInitSql = string2;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(")!0N4H?Rx", hikariConfig0.getConnectionInitSql());
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(")!0N4H?Rx", hikariConfig0.getConnectionInitSql());
      assertNull(dataSource0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.dataSource = dataSource0;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(")!0N4H?Rx", hikariConfig0.getConnectionInitSql());
      
      hikariConfig0.setDataSourceClassName(string1);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(")!0N4H?Rx", hikariConfig0.getConnectionInitSql());
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = true;
      int int0 = 150;
      hikariConfig0.setAcquireRetries(int0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(")!0N4H?Rx", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(150, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.setAutoCommit(boolean0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(")!0N4H?Rx", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(150, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      boolean boolean1 = hikariConfig0.isInitializationFailFast();
      assertFalse(boolean1);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(")!0N4H?Rx", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(150, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(boolean1 == boolean0);
      
      long long0 = 1477L;
      hikariConfig0.setLeakDetectionThreshold(long0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1477L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(")!0N4H?Rx", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1477L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(150, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      String string3 = "@+j7";
      hikariConfig0.setConnectionCustomizerClassName(string3);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("@+j7", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1477L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(")!0N4H?Rx", hikariConfig0.getConnectionInitSql());
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1477L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(150, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      hikariConfig0.setMinimumPoolSize(int0);
      assertEquals(150, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("@+j7", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1477L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(")!0N4H?Rx", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1477L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(150, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(150, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.validate();
      assertEquals(150, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(150, hikariConfig0.getMaximumPoolSize());
      assertEquals(")!0N4H?Rx", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(150, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(150, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(150, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertEquals(150, int1);
      assertEquals(150, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(150, hikariConfig0.getMaximumPoolSize());
      assertEquals(")!0N4H?Rx", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(150, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(150, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(150, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(int1 == int0);
      
      String string4 = "";
      hikariConfig0.setConnectionInitSql(string4);
      assertEquals(150, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(150, hikariConfig0.getMaximumPoolSize());
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(string4, string1);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(150, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(150, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(150, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      properties0.putAll(hikariConfig0.dataSourceProperties);
      assertEquals(150, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(150, hikariConfig0.getMaximumPoolSize());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(150, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(150, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(150, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      Object object0 = properties0.put(string4, hikariConfig0);
      assertEquals(150, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(150, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(string4, string1);
      assertNull(object0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(150, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(150, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(150, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertEquals(150, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(150, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(150, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(150, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(150, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.connectionInitSql = string0;
      assertEquals(150, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(",gym/Q", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(150, hikariConfig0.getMaximumPoolSize());
      
      boolean boolean2 = true;
      hikariConfig0.setInitializationFailFast(boolean2);
      assertEquals(150, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(",gym/Q", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(150, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(150, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(150, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(150, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(boolean2 == boolean1);
      
      hikariConfig0.setLeakDetectionThreshold(int1);
      assertEquals(150, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(",gym/Q", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(150L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(150, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(150, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(150, hikariConfig0.maxPoolSize);
      assertEquals(150L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(150, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(int1 == int0);
      
      boolean boolean3 = hikariConfig0.isAutoCommit();
      assertTrue(boolean3);
      assertEquals(150, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(",gym/Q", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(150L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(150, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(150, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(150, hikariConfig0.maxPoolSize);
      assertEquals(150L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(150, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String string5 = "";
      hikariConfig0.setConnectionTestQuery(string5);
      assertEquals(150, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(",gym/Q", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(150L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(150, hikariConfig0.getMaximumPoolSize());
      assertNotSame(string5, string2);
      assertSame(string5, string1);
      assertSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(150, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(150, hikariConfig0.maxPoolSize);
      assertEquals(150L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(150, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean4 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean4);
      assertEquals(150, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(",gym/Q", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(150L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(150, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(150, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(150, hikariConfig0.maxPoolSize);
      assertEquals(150L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(150, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      
      long long1 = 0L;
      hikariConfig0.setLeakDetectionThreshold(long1);
      assertEquals(150, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(",gym/Q", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(150, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(150, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(150, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(150, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(150, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 11000)
  public void test058()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNotNull(hikariDataSource0);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      int int0 = hikariDataSource0.getAcquireRetries();
      assertEquals(3, int0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      long long0 = 100L;
      HikariConfig.IDLE_TIMEOUT = long0;
      boolean boolean0 = true;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(100L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      String string0 = "";
      hikariDataSource0.setCatalog(string0);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("", hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(100L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      String string1 = hikariDataSource0.getConnectionTestQuery();
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("", hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(string1);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(100L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      hikariDataSource0.setCatalog(string1);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(100L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      long long1 = 531L;
      hikariDataSource0.setAcquireRetryDelay(long1);
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(100L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(long1 == long0);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.addDataSourceProperty(string1, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test059()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      HikariConfig hikariConfig1 = new HikariConfig(hikariConfig0.dataSourceProperties);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotNull(hikariConfig1);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.setDataSource(hikariConfig1.dataSource);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string0 = null;
      hikariConfig1.setConnectionTestQuery(string0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.setConnectionTestQuery(hikariConfig1.poolName);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.copyState(hikariConfig1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.copyState(hikariConfig1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string1 = "V7sYd_?W";
      hikariConfig1.dataSourceClassName = string1;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      
      boolean boolean0 = true;
      hikariConfig1.minPoolSize = hikariConfig0.poolNumber;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      hikariConfig1.setJdbc4ConnectionTest(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string2 = hikariConfig1.getConnectionInitSql();
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNull(string2);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.setConnectionCustomizerClassName(string2);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string3 = hikariConfig1.getDataSourceClassName();
      assertEquals("V7sYd_?W", string3);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertSame(string3, string1);
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotNull(string3);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      int int0 = 0;
      hikariConfig1.setMaximumPoolSize(int0);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      int int1 = 3511;
      hikariConfig0.setAcquireRetries(int1);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int1 == int0);
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long0);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      String string4 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string4);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotNull(string4);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean1 = hikariConfig0.isJdbc4ConnectionTest();
      assertTrue(boolean1);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = false;
      hikariConfig1.setRegisterMbeans(boolean2);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNull(dataSource0);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      hikariConfig0.setConnectionInitSql(hikariConfig1.dataSourceClassName);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertSame(string1, string3);
      assertNotSame(string1, string4);
      assertSame(hikariConfig1.dataSourceClassName, string3);
      assertSame(hikariConfig1.dataSourceClassName, string1);
      assertNotSame(hikariConfig1.dataSourceClassName, string4);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(hikariConfig1.dataSourceClassName.equals((Object)string4));
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig1.getConnectionCustomizer();
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNull(iConnectionCustomizer0);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig1.validate();
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      long long1 = 2235L;
      hikariConfig1.setMaxLifetime(long1);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(2235L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(2235L, hikariConfig1.maxLifetime);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(long1 == long0);
      
      int int2 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int2);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      int int3 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int3);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      hikariConfig0.setMaxLifetime(int3);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1L), hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      hikariConfig0.setLeakDetectionThreshold(hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(2235L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals((-1L), hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(2235L, hikariConfig1.maxLifetime);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string5 = "javassist.bytecode.CodeIterator$Branch16";
      hikariConfig1.addDataSourceProperty(string5, string5);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(2235L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals((-1L), hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(2235L, hikariConfig1.maxLifetime);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 11000)
  public void test060()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      String string0 = "vD6ssq~:9|*KY8";
      properties0.clear();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      Object object0 = properties0.remove((Object) string0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(object0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotNull(hikariConfig0);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      int int0 = 0;
      hikariConfig0.setConnectionTimeout(int0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2147483647L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      hikariConfig0.acquireRetries = int0;
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      int int1 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int1);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2147483647L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(int1 == int0);
      
      long long0 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2147483647L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
  }

  @Test(timeout = 11000)
  public void test061()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotNull(hikariConfig0);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      boolean boolean0 = hikariConfig0.isInitializationFailFast();
      assertFalse(boolean0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      Properties properties1 = hikariConfig0.getDataSourceProperties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertNotNull(properties1);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(properties1.equals((Object)properties0));
      
      String string0 = "";
      hikariConfig0.setPoolName(string0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotSame(properties0, properties1);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(properties0.equals((Object)properties1));
      
      String string1 = "";
      hikariConfig0.setDataSourceClassName(string1);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotSame(properties0, properties1);
      assertSame(string1, string0);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(properties0.equals((Object)properties1));
      
      String string2 = hikariConfig0.getConnectionTestQuery();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotSame(properties0, properties1);
      assertNull(string2);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(properties0.equals((Object)properties1));
      
      int int0 = (-1525);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = null;
      // Undeclared exception!
      try { 
        properties0.put(object0, object1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test062()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      int int0 = 0;
      HikariConfig.poolNumber = int0;
      String string0 = "57P03";
      boolean boolean0 = true;
      hikariConfig0.isRegisterMbeans = boolean0;
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setConnectionInitSql(string0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("57P03", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(0, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariConfig0.catalog = string0;
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("57P03", hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("57P03", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      long long0 = (-1495L);
      HikariConfig hikariConfig1 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.copyState(hikariConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception copying HikariConfig state: null
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test063()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNotNull(hikariDataSource0);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      
      String string0 = "2pzjsuceSmk7Hp";
      hikariDataSource0.connectionCustomizerClassName = string0;
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("2pzjsuceSmk7Hp", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      boolean boolean0 = true;
      hikariDataSource0.isAutoCommit = boolean0;
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("2pzjsuceSmk7Hp", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      String string1 = hikariDataSource0.getConnectionTestQuery();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("2pzjsuceSmk7Hp", hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(string1);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
  }

  @Test(timeout = 11000)
  public void test064()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNotNull(hikariDataSource0);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      int int0 = 0;
      hikariDataSource0.setMaximumPoolSize(int0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0, hikariDataSource0.maxPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      String string0 = null;
      hikariDataSource0.setTransactionIsolation(string0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0, hikariDataSource0.maxPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      DataSource dataSource0 = hikariDataSource0.getDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(dataSource0);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0, hikariDataSource0.maxPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      boolean boolean0 = true;
      hikariDataSource0.setUseInstrumentation(boolean0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0, hikariDataSource0.maxPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      String string1 = "\\+\"xE>S?~FIM a9<";
      hikariDataSource0.setPoolName(string1);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getMaximumPoolSize());
      assertEquals("\\+\"xE>S?~FIM a9<", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0, hikariDataSource0.maxPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
  }

  @Test(timeout = 11000)
  public void test065()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNotNull(hikariConfig0);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      boolean boolean0 = true;
      hikariConfig0.isRegisterMbeans = boolean0;
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      boolean boolean1 = true;
      String string0 = "";
      boolean boolean2 = true;
      boolean boolean3 = true;
      hikariConfig0.isRegisterMbeans = boolean3;
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.setInitializationFailFast(boolean2);
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      hikariConfig0.setConnectionCustomizerClassName(string0);
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      hikariConfig0.setRegisterMbeans(boolean1);
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      boolean boolean4 = false;
      hikariConfig0.isInitializationFailFast = boolean4;
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      int int0 = 60;
      hikariConfig0.setAcquireRetries(int0);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int1);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(int1 == int0);
      
      hikariConfig0.setDataSourceClassName(string0);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      String string1 = "";
      hikariConfig0.addDataSourceProperty(string1, string1);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertSame(string1, string0);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long0);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      hikariConfig0.setIdleTimeout(long0);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      hikariConfig0.dataSourceProperties = properties0;
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(hikariConfig0.dataSourceProperties.isEmpty());
      assertEquals(0, hikariConfig0.dataSourceProperties.size());
      
      String string2 = hikariConfig0.getConnectionCustomizerClassName();
      assertEquals("", string2);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertNotNull(string2);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      long long1 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long1);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(long1 == long0);
      
      hikariConfig0.setTransactionIsolation(string1);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      String string3 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string3);
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotNull(string3);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean5 = true;
      hikariConfig0.setInitializationFailFast(boolean5);
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(boolean5 == boolean4);
      
      boolean boolean6 = false;
      hikariConfig0.setUseInstrumentation(boolean6);
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)properties0.entrySet();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(string1.equals((Object)string3));
      
      boolean boolean7 = hikariConfig0.isInitializationFailFast();
      assertTrue(boolean7);
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean0);
      
      boolean boolean8 = hikariConfig0.isRegisterMbeans();
      assertTrue(boolean8);
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(boolean8 == boolean4);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean7);
      assertFalse(boolean8 == boolean6);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean0);
      
      hikariConfig0.setConnectionTestQuery(string2);
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertSame(string2, string0);
      assertNotSame(string2, string3);
      assertSame(string2, string1);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(string2.equals((Object)string3));
      
      boolean boolean9 = hikariConfig0.isRegisterMbeans();
      assertTrue(boolean9);
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(boolean9 == boolean4);
      assertTrue(boolean9 == boolean8);
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean2);
      assertTrue(boolean9 == boolean3);
      assertTrue(boolean9 == boolean7);
      assertFalse(boolean9 == boolean6);
      assertTrue(boolean9 == boolean5);
      assertTrue(boolean9 == boolean0);
  }

  @Test(timeout = 11000)
  public void test066()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = properties0.put(object0, object1);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertNull(object2);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.beans.IntrospectionException: Method not found: setJava.lang.Object@0000000002
         //
         verifyException("com.zaxxer.hikari.util.PropertyBeanSetter", e);
      }
  }

  @Test(timeout = 11000)
  public void test067()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNotNull(hikariConfig0);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      int int0 = 0;
      long long0 = (-1897L);
      String string0 = "";
      hikariConfig0.setTransactionIsolation(string0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      hikariConfig0.maxLifetime = long0;
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1897L), hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      
      hikariConfig0.acquireRetries = int0;
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1897L), hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      
      int int1 = 0;
      String string1 = "y?";
      hikariConfig0.setPoolName(string1);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("y?", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals((-1897L), hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNotSame(string1, string0);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-1897L), hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(string1.equals((Object)string0));
      
      hikariConfig0.setMaximumPoolSize(int1);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals("y?", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals((-1897L), hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-1897L), hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      int int2 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int2);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertEquals("y?", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals((-1897L), hikariConfig0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-1897L), hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 11000)
  public void test068()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNotNull(hikariConfig0);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      int int0 = 0;
      hikariConfig0.setMaximumPoolSize(int0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      boolean boolean0 = false;
      hikariConfig0.setAutoCommit(boolean0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      long long0 = 4702L;
      hikariConfig0.setConnectionTimeout(long0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(4702L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(4702L, hikariConfig0.connectionTimeout);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      long long1 = 30L;
      hikariConfig0.setAcquireRetryDelay(long1);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(4702L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(4702L, hikariConfig0.connectionTimeout);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 11000)
  public void test069()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNotNull(hikariDataSource0);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      
      boolean boolean0 = false;
      String string0 = "array initializer is not supported";
      hikariDataSource0.setConnectionTestQuery(string0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("array initializer is not supported", hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      
      int int0 = (-599);
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireRetries(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test070()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNotNull(hikariDataSource0);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      String string0 = "0%/:N9<Ym";
      DataSource dataSource0 = hikariDataSource0.dataSource;
      assertNull(dataSource0);
      
      int int0 = (-468);
      hikariDataSource0.transactionIsolation = int0;
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-468), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      
      long long0 = 1404L;
      HikariConfig.MAX_LIFETIME = long0;
      hikariDataSource0.setDataSource(dataSource0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-468), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-468), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1404L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      hikariDataSource0.addDataSourceProperty(string0, string0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-468), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-468), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1404L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      boolean boolean0 = hikariDataSource0.isRegisterMbeans();
      assertFalse(boolean0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals((-468), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-468), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1404L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      int int1 = (-398);
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireRetries(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test071()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotNull(hikariConfig0);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      
      String string0 = "\\NN:p?";
      hikariConfig0.dataSourceClassName = string0;
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("\\NN:p?", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      Object object0 = properties0.put(hikariConfig0, string0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("\\NN:p?", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(object0);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      
      Set<Object> set0 = properties0.keySet();
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNotNull(hikariDataSource0);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      
      boolean boolean0 = properties0.remove((Object) hikariDataSource0, (Object) hikariConfig0);
      assertFalse(boolean0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("\\NN:p?", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      
      String string1 = "";
      hikariConfig0.poolName = string1;
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("\\NN:p?", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      long long0 = (-2734L);
      hikariConfig0.setMaxLifetime(long0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("\\NN:p?", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-2734L), hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-2734L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      
      int int0 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("\\NN:p?", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-2734L), hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-2734L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      
      long long1 = 10L;
      hikariDataSource0.connectionTimeout = long1;
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      hikariConfig0.setAcquireRetryDelay(int0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("\\NN:p?", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-2734L), hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-2734L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      
      long long2 = hikariConfig0.getMaxLifetime();
      assertEquals((-2734L), long2);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("\\NN:p?", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-2734L), hikariConfig0.getMaxLifetime());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-2734L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      
      int int1 = 1039;
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = properties0.put(object1, hikariDataSource0);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(object2);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(10L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      
      hikariConfig0.setMinimumPoolSize(int1);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("\\NN:p?", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-2734L), hikariConfig0.getMaxLifetime());
      assertEquals(1039, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1039, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-2734L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(int1 == int0);
      
      boolean boolean1 = hikariDataSource0.isRegisterMbeans();
      assertFalse(boolean1);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(10L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = hikariDataSource0.isJdbc4ConnectionTest();
      assertTrue(boolean2);
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(10L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      DataSource dataSource0 = hikariDataSource0.getDataSource();
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(10L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(dataSource0);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(10L, hikariDataSource0.connectionTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      
      String string2 = hikariConfig0.getPoolName();
      assertEquals("", string2);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("\\NN:p?", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-2734L), hikariConfig0.getMaxLifetime());
      assertEquals(1039, hikariConfig0.getMinimumPoolSize());
      assertEquals("", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotNull(string2);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1039, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals((-2734L), hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test072()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNotNull(hikariConfig0);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      int int0 = (-2504);
      hikariConfig0.transactionIsolation = int0;
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      long long0 = 187L;
      hikariConfig0.idleTimeout = long0;
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      Properties properties1 = new Properties();
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNotNull(properties1);
      
      hikariConfig0.dataSourceProperties = properties1;
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals(0, hikariConfig0.dataSourceProperties.size());
      assertTrue(hikariConfig0.dataSourceProperties.isEmpty());
      
      String string0 = "";
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties1.replaceAll(biFunction0);
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      
      Object object0 = properties1.put(string0, hikariConfig0.dataSourceProperties);
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1, properties1.size());
      assertFalse(properties1.isEmpty());
      assertFalse(hikariConfig0.dataSourceProperties.isEmpty());
      assertEquals(1, hikariConfig0.dataSourceProperties.size());
      assertSame(hikariConfig0.dataSourceProperties, properties1);
      assertNull(object0);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-2504), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(187L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariConfig0.maxPoolSize = int0;
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-2504), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      
      Enumeration<Object> enumeration0 = hikariConfig0.dataSourceProperties.elements();
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-2504), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1, properties1.size());
      assertFalse(properties1.isEmpty());
      assertFalse(hikariConfig0.dataSourceProperties.isEmpty());
      assertEquals(1, hikariConfig0.dataSourceProperties.size());
      assertSame(hikariConfig0.dataSourceProperties, properties1);
      assertNotNull(enumeration0);
      assertEquals((-2504), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-2504), hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(187L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      Object object1 = hikariConfig0.dataSourceProperties.put(properties1, string0);
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-2504), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(2, properties1.size());
      assertFalse(properties1.isEmpty());
      assertFalse(hikariConfig0.dataSourceProperties.isEmpty());
      assertEquals(2, hikariConfig0.dataSourceProperties.size());
      assertSame(hikariConfig0.dataSourceProperties, properties1);
      assertNull(object1);
      assertEquals((-2504), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-2504), hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(187L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariConfig0.setConnectionTestQuery(string0);
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-2504), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-2504), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-2504), hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(187L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariConfig0.setMaxLifetime(long0);
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-2504), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(187L, hikariConfig0.getMaxLifetime());
      assertEquals((-2504), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-2504), hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(187L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(187L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-2504), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(187L, hikariConfig0.getMaxLifetime());
      assertNull(iConnectionCustomizer0);
      assertEquals((-2504), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-2504), hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(187L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(187L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      int int1 = hikariConfig0.getTransactionIsolation();
      assertEquals((-2504), int1);
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-2504), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(187L, hikariConfig0.getMaxLifetime());
      assertEquals((-2504), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-2504), hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(187L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(187L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(int1 == int0);
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-2504), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(187L, hikariConfig0.getMaxLifetime());
      assertNull(dataSource0);
      assertEquals((-2504), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-2504), hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(187L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(187L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariConfig0.dataSource = dataSource0;
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-2504), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(187L, hikariConfig0.getMaxLifetime());
      
      String string1 = hikariConfig0.getConnectionCustomizerClassName();
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-2504), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(187L, hikariConfig0.getMaxLifetime());
      assertNull(string1);
      assertEquals((-2504), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-2504), hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(187L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(187L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      long long1 = hikariConfig0.getMaxLifetime();
      assertEquals(187L, long1);
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-2504), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(187L, hikariConfig0.getMaxLifetime());
      assertEquals((-2504), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-2504), hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(187L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(187L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(long1 == long0);
      
      Properties properties2 = hikariConfig0.getDataSourceProperties();
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-2504), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(187L, hikariConfig0.getMaxLifetime());
      assertFalse(properties2.isEmpty());
      assertEquals(2, properties2.size());
      assertSame(properties2, properties1);
      assertNotNull(properties2);
      assertEquals((-2504), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-2504), hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(187L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(187L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariConfig0.setConnectionInitSql(string0);
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-2504), hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(187L, hikariConfig0.getMaxLifetime());
      assertEquals((-2504), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-2504), hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(187L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(187L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      boolean boolean0 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean0);
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-2504), hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(187L, hikariConfig0.getMaxLifetime());
      assertEquals((-2504), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-2504), hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(187L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(187L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      int int2 = hikariConfig0.getMinimumPoolSize();
      assertEquals(10, int2);
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-2504), hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(187L, hikariConfig0.getMaxLifetime());
      assertEquals((-2504), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-2504), hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(187L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(187L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      long long2 = hikariConfig0.getMaxLifetime();
      assertEquals(187L, long2);
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-2504), hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(187L, hikariConfig0.getMaxLifetime());
      assertEquals((-2504), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-2504), hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(187L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(187L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      String string2 = hikariConfig0.getConnectionTestQuery();
      assertEquals("", string2);
      assertEquals((-2504), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(187L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-2504), hikariConfig0.getMaximumPoolSize());
      assertEquals("", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(187L, hikariConfig0.getMaxLifetime());
      assertSame(string2, string0);
      assertNotNull(string2);
      assertEquals((-2504), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-2504), hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(187L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(187L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
  }

  @Test(timeout = 11000)
  public void test073()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNotNull(hikariDataSource0);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      int int0 = 0;
      hikariDataSource0.setAcquireRetries(int0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0, hikariDataSource0.acquireRetries);
      
      boolean boolean0 = true;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0, hikariDataSource0.acquireRetries);
      
      HikariDataSource hikariDataSource1 = null;
      try {
        hikariDataSource1 = new HikariDataSource(hikariDataSource0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test074()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNotNull(hikariDataSource0);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      
      long long0 = 2266L;
      hikariDataSource0.leakDetectionThreshold = long0;
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2266L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      boolean boolean0 = true;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2266L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2266L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      
      int int0 = 1149;
      IConnectionCustomizer iConnectionCustomizer0 = hikariDataSource0.getConnectionCustomizer();
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2266L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(iConnectionCustomizer0);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2266L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      
      hikariDataSource0.connectionCustomizer = iConnectionCustomizer0;
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2266L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      String string0 = "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      hikariDataSource0.addDataSourceProperty(string0, object0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2266L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2266L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      
      hikariDataSource0.setMaximumPoolSize(int0);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2266L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1149, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2266L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1149, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      
      String string1 = "x*uqT2";
      hikariDataSource0.setTransactionIsolation(string1);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2266L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1149, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNotSame(string1, string0);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2266L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1149, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertFalse(string1.equals((Object)string0));
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNotNull(hikariDataSource1);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals(0L, hikariDataSource1.leakDetectionThreshold);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      
      hikariDataSource0.setDataSource(hikariDataSource1);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2266L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1149, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2266L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1149, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals(0L, hikariDataSource1.leakDetectionThreshold);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      
      String string2 = hikariDataSource1.getConnectionInitSql();
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertNull(string2);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals(0L, hikariDataSource1.leakDetectionThreshold);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      
      hikariDataSource1.setTransactionIsolation(string1);
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNotSame(string1, string0);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals(0L, hikariDataSource1.leakDetectionThreshold);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertFalse(string1.equals((Object)string0));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      
      boolean boolean1 = hikariDataSource0.isInitializationFailFast();
      assertTrue(boolean1);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2266L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1149, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2266L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1149, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertTrue(boolean1 == boolean0);
      
      String string3 = hikariDataSource1.getConnectionInitSql();
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertNull(string3);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals(0L, hikariDataSource1.leakDetectionThreshold);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      
      hikariDataSource0.setIdleTimeout(hikariDataSource1.MAX_LIFETIME);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2266L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1149, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2266L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1149, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals(0L, hikariDataSource1.leakDetectionThreshold);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      
      hikariDataSource0.setTransactionIsolation(hikariDataSource1.transactionIsolationName);
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getIdleTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(2266L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(1149, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2266L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1149, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, hikariDataSource0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals(0L, hikariDataSource1.leakDetectionThreshold);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      
      long long1 = (-2906L);
      // Undeclared exception!
      try { 
        hikariDataSource1.setConnectionTimeout(long1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test075()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNotNull(hikariConfig0);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      String string0 = "S_7LKxP%Rpeb%sA{P";
      int int0 = 112;
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(dataSource0);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariConfig0.setDataSource(dataSource0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      boolean boolean0 = false;
      hikariConfig0.isRegisterMbeans = boolean0;
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      
      hikariConfig0.transactionIsolation = int0;
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(112, hikariConfig0.getTransactionIsolation());
      
      hikariConfig0.setConnectionInitSql(string0);
      assertEquals("S_7LKxP%Rpeb%sA{P", hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(112, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(112, hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      long long0 = 1971L;
      hikariConfig0.setAcquireRetryDelay(long0);
      assertEquals("S_7LKxP%Rpeb%sA{P", hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(112, hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(112, hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      String string1 = "X+,";
      hikariConfig0.setConnectionInitSql(string1);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("X+,", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(112, hikariConfig0.getTransactionIsolation());
      assertNotSame(string1, string0);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(112, hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = false;
      hikariConfig0.isJdbc4connectionTest = boolean1;
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("X+,", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(112, hikariConfig0.getTransactionIsolation());
      
      // Undeclared exception!
      try { 
        hikariConfig0.setDataSourceProperties(properties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test076()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNotNull(hikariDataSource0);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      hikariDataSource0.dataSourceProperties = properties0;
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(hikariDataSource0.dataSourceProperties.isEmpty());
      assertEquals(0, hikariDataSource0.dataSourceProperties.size());
      
      String string0 = hikariDataSource0.getPoolName();
      assertEquals("HikariPool-0", string0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNotNull(string0);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      int int0 = hikariDataSource0.getAcquireRetries();
      assertEquals(3, int0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      String string1 = "connectionTimeout cannot be less than 100ms";
      hikariDataSource0.transactionIsolationName = string1;
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      
      Object object0 = properties0.put(string0, hikariDataSource0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(string0, string1);
      assertNull(object0);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(string0.equals((Object)string1));
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = properties0.put(hikariDataSource0.dataSourceProperties, object1);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(hikariDataSource0.dataSourceProperties.isEmpty());
      assertEquals(2, hikariDataSource0.dataSourceProperties.size());
      assertSame(hikariDataSource0.dataSourceProperties, properties0);
      assertNull(object2);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      hikariDataSource0.setIdleTimeout(int0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(3L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(3L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      hikariDataSource0.setDataSourceProperties(properties0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(3L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(3L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
  }

  @Test(timeout = 11000)
  public void test077()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNotNull(hikariDataSource0);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      int int0 = 0;
      String string0 = "";
      hikariDataSource0.idleTimeout = (long) int0;
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      hikariDataSource0.setDataSourceClassName(string0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      hikariDataSource0.setAcquireRetries(int0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      String string1 = hikariDataSource0.getCatalog();
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(string1);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(0L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      long long0 = 143L;
      hikariDataSource0.setIdleTimeout(long0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(143L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(143L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      long long1 = hikariDataSource0.getIdleTimeout();
      assertEquals(143L, long1);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(143L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(143L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertTrue(long1 == long0);
      
      String string2 = "uL> X-AV/q";
      hikariDataSource0.catalog = string2;
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals("uL> X-AV/q", hikariDataSource0.getCatalog());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(143L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      
      boolean boolean0 = true;
      hikariDataSource0.setJdbc4ConnectionTest(boolean0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals("uL> X-AV/q", hikariDataSource0.getCatalog());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(143L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(143L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      String string3 = "727TiN>";
      String string4 = "";
      hikariDataSource0.addDataSourceProperty(string3, string4);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals("uL> X-AV/q", hikariDataSource0.getCatalog());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(143L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertNotSame(string4, string3);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(143L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      hikariDataSource0.setTransactionIsolation(string0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals("uL> X-AV/q", hikariDataSource0.getCatalog());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(143L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(143L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      
      long long2 = 1973L;
      hikariDataSource0.setConnectionTimeout(long2);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals("uL> X-AV/q", hikariDataSource0.getCatalog());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(143L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1973L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1973L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(143L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      long long3 = hikariDataSource0.getConnectionTimeout();
      assertEquals(1973L, long3);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals("uL> X-AV/q", hikariDataSource0.getCatalog());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(143L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1973L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1973L, hikariDataSource0.connectionTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(143L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertFalse(long3 == long1);
      assertTrue(long3 == long2);
      assertFalse(long3 == long0);
  }

  @Test(timeout = 11000)
  public void test078()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      String string0 = "p\\WTzkLX;AmCuI5u";
      boolean boolean0 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      
      hikariConfig0.connectionCustomizerClassName = string0;
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("p\\WTzkLX;AmCuI5u", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      boolean boolean1 = true;
      hikariConfig0.isInitializationFailFast = boolean1;
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("p\\WTzkLX;AmCuI5u", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      boolean boolean2 = true;
      hikariConfig0.isRegisterMbeans = boolean2;
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("p\\WTzkLX;AmCuI5u", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      boolean boolean3 = hikariConfig0.isAutoCommit();
      assertTrue(boolean3);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("p\\WTzkLX;AmCuI5u", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      boolean boolean4 = true;
      hikariConfig0.setUseInstrumentation(boolean4);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("p\\WTzkLX;AmCuI5u", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("p\\WTzkLX;AmCuI5u", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(dataSource0);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      
      boolean boolean5 = hikariConfig0.isRegisterMbeans();
      assertTrue(boolean5);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("p\\WTzkLX;AmCuI5u", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = null;
      // Undeclared exception!
      try { 
        properties0.put(object0, object1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test079()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNotNull(hikariConfig0);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      hikariConfig0.dataSourceProperties = properties0;
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, hikariConfig0.dataSourceProperties.size());
      assertTrue(hikariConfig0.dataSourceProperties.isEmpty());
      
      String string0 = "m?i[O<\\Z!:vq";
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      long long0 = 3124L;
      long long1 = 0L;
      String string1 = "javassist.compiler.ast.Keyword";
      hikariConfig0.dataSourceClassName = string1;
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      boolean boolean0 = true;
      hikariConfig0.setAutoCommit(boolean0);
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariConfig0.leakDetectionThreshold = long1;
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      hikariConfig0.setAcquireRetryDelay(long1);
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(long1 == long0);
      
      boolean boolean1 = true;
      hikariConfig0.isJdbc4connectionTest = boolean1;
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      hikariConfig0.setAcquireRetryDelay(long0);
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(long0 == long1);
      
      boolean boolean2 = true;
      String string2 = "maxPoolSize cannot be negative";
      Object object0 = properties0.put(string2, string0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNull(object0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      hikariConfig0.setRegisterMbeans(boolean2);
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      long long2 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long2);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = properties0.put(hikariConfig0.dataSourceClassName, object1);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(hikariConfig0.dataSourceClassName, string2);
      assertSame(hikariConfig0.dataSourceClassName, string0);
      assertNotSame(hikariConfig0.dataSourceClassName, string1);
      assertNull(object2);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(hikariConfig0.dataSourceClassName.equals((Object)string2));
      assertFalse(hikariConfig0.dataSourceClassName.equals((Object)string1));
      
      hikariConfig0.validate();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      int int0 = hikariConfig0.getAcquireIncrement();
      assertEquals(0, int0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariConfig0.setMinimumPoolSize(int0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(dataSource0);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      
      hikariConfig0.addDataSourceProperty(string0, object3);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(object3, object1);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(object3.equals((Object)object1));
      
      long long3 = hikariConfig0.getMaxLifetime();
      assertEquals(1800000L, long3);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      
      hikariConfig0.setMinimumPoolSize(int0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
  }

  @Test(timeout = 11000)
  public void test080()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNotNull(hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      boolean boolean0 = hikariConfig0.isInitializationFailFast();
      assertFalse(boolean0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      int int0 = 2562;
      boolean boolean1 = true;
      hikariConfig0.isRegisterMbeans = boolean1;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      
      hikariConfig0.setAcquireIncrement(int0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      int int1 = hikariConfig0.getMinimumPoolSize();
      assertEquals(10, int1);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(int1 == int0);
      
      String string0 = "(OU83}pYdcnY_Qm";
      hikariConfig0.catalog = string0;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("(OU83}pYdcnY_Qm", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      
      int int2 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int2);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("(OU83}pYdcnY_Qm", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      hikariConfig0.dataSourceProperties = properties0;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("(OU83}pYdcnY_Qm", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, hikariConfig0.dataSourceProperties.size());
      assertTrue(hikariConfig0.dataSourceProperties.isEmpty());
      
      long long0 = hikariConfig0.getMaxLifetime();
      assertEquals(1800000L, long0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("(OU83}pYdcnY_Qm", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      String string1 = hikariConfig0.getConnectionInitSql();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("(OU83}pYdcnY_Qm", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(string1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      int int3 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int3);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("(OU83}pYdcnY_Qm", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      String string2 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string2);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("(OU83}pYdcnY_Qm", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(string2.equals((Object)string0));
      
      int int4 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int4);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("(OU83}pYdcnY_Qm", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      
      long long1 = 1784L;
      hikariConfig0.setAcquireRetryDelay(long1);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("(OU83}pYdcnY_Qm", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(long1 == long0);
      
      boolean boolean2 = hikariConfig0.isInitializationFailFast();
      assertFalse(boolean2);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals("(OU83}pYdcnY_Qm", hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 11000)
  public void test081()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNotNull(hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      boolean boolean0 = true;
      hikariConfig0.isRegisterMbeans = boolean0;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      int int0 = 0;
      hikariConfig0.minPoolSize = int0;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      String string0 = "java/lang/Class";
      hikariConfig0.setPoolName(string0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("java/lang/Class", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      long long0 = 0L;
      int int1 = (-1896);
      HikariConfig.poolNumber = int1;
      HikariConfig.poolNumber = hikariConfig0.minPoolSize;
      hikariConfig0.setAcquireRetryDelay(long0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("java/lang/Class", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      long long1 = (-1L);
      HikariConfig.IDLE_TIMEOUT = long1;
      hikariConfig0.setMaxLifetime(long0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("java/lang/Class", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertFalse(long0 == long1);
      
      int int2 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int2);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("java/lang/Class", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = hikariConfig0.getMinimumPoolSize();
      assertEquals(0, int3);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("java/lang/Class", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      
      long long2 = 0L;
      hikariConfig0.setMaxLifetime(long2);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("java/lang/Class", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertFalse(long2 == long1);
      
      int int4 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int4);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("java/lang/Class", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      
      String string1 = "";
      hikariConfig0.setDataSourceClassName(string1);
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals("java/lang/Class", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(string1, string0);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertFalse(string1.equals((Object)string0));
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals("java/lang/Class", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      
      long long3 = hikariConfig0.getMaxLifetime();
      assertEquals(0L, long3);
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals("java/lang/Class", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1L), HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(long3 == long0);
      assertTrue(long3 == long2);
      assertFalse(long3 == long1);
  }

  @Test(timeout = 11000)
  public void test082()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotNull(hikariConfig0);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      boolean boolean0 = true;
      hikariConfig0.isJdbc4connectionTest = boolean0;
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      String string0 = "' could not be loaded";
      boolean boolean1 = true;
      hikariConfig0.setConnectionInitSql(string0);
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("' could not be loaded", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      hikariConfig0.isAutoCommit = boolean1;
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("' could not be loaded", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      hikariConfig0.connectionCustomizerClassName = string0;
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("' could not be loaded", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("' could not be loaded", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test083()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      String string0 = "";
      boolean boolean0 = false;
      hikariDataSource0.setRegisterMbeans(boolean0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      hikariDataSource0.setCatalog(string0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      String string1 = "Stk}lQE`";
      hikariDataSource0.setPoolName(string1);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("Stk}lQE`", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNotSame(string1, string0);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = false;
      hikariDataSource0.isInitializationFailFast = boolean1;
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("Stk}lQE`", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      hikariDataSource0.setDataSourceProperties(properties0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("Stk}lQE`", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      long long0 = 30L;
      hikariDataSource0.setLeakDetectionThreshold(long0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(30L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("Stk}lQE`", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(30L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      long long1 = hikariDataSource0.getLeakDetectionThreshold();
      assertEquals(30L, long1);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(30L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("Stk}lQE`", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(30L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertTrue(long1 == long0);
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = properties0.computeIfPresent(hikariDataSource0, biFunction0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(30L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("Stk}lQE`", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(object0);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(30L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      boolean boolean2 = hikariDataSource0.isInitializationFailFast();
      assertFalse(boolean2);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(30L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("Stk}lQE`", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(30L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      hikariDataSource0.setDataSourceProperties(properties0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(30L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("Stk}lQE`", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(30L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      long long2 = hikariDataSource0.getIdleTimeout();
      assertEquals(600000L, long2);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(30L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("Stk}lQE`", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(30L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      hikariDataSource0.setConnectionTestQuery(string1);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(30L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("Stk}lQE`", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("Stk}lQE`", hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNotSame(string1, string0);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(30L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(string1.equals((Object)string0));
      
      long long3 = hikariDataSource0.getAcquireRetryDelay();
      assertEquals(0L, long3);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(30L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("Stk}lQE`", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("Stk}lQE`", hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("", hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(30L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
  }

  @Test(timeout = 11000)
  public void test084()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNotNull(hikariConfig0);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      String string0 = "javassist.bytecode.InvokeDynamicInfo";
      hikariConfig0.setConnectionInitSql(string0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("javassist.bytecode.InvokeDynamicInfo", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test085()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNotNull(hikariConfig0);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      String string0 = hikariConfig0.getConnectionTestQuery();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(string0);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      boolean boolean0 = true;
      int int0 = (-1887);
      hikariConfig0.minPoolSize = int0;
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1887), hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1887), hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1887), hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1887), hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1887), hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      boolean boolean1 = true;
      hikariConfig0.setInitializationFailFast(boolean1);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1887), hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1887), hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      boolean boolean2 = true;
      String string1 = "m(";
      hikariConfig0.setInitializationFailFast(boolean0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1887), hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1887), hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      hikariConfig0.setPoolName(string1);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("m(", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1887), hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1887), hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      hikariConfig0.setInitializationFailFast(boolean2);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("m(", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1887), hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1887), hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      int int1 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int1);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("m(", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1887), hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1887), hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(int1 == int0);
      
      boolean boolean3 = hikariConfig0.isJdbc4ConnectionTest();
      assertTrue(boolean3);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("m(", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1887), hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1887), hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("m(", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1887), hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(dataSource0);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1887), hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      hikariConfig0.setMaxLifetime(int0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("m(", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1887), hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1887L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1887), hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1887L), hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(int0 == int1);
      
      hikariConfig0.setTransactionIsolation(string0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("m(", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1887), hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1887L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1887), hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1887L), hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      int int2 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int2);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("m(", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1887), hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1887L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1887), hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1887L), hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      hikariConfig0.setInitializationFailFast(boolean3);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("m(", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1887), hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1887L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1887), hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1887L), hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      int int3 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int3);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("m(", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1887), hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1887L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1887), hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1887L), hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      String string2 = hikariConfig0.getPoolName();
      assertEquals("m(", string2);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("m(", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1887), hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1887L), hikariConfig0.getMaxLifetime());
      assertSame(string2, string1);
      assertNotNull(string2);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1887), hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1887L), hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      int int4 = hikariConfig0.getMinimumPoolSize();
      assertEquals((-1887), int4);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("m(", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1887), hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1887L), hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1887), hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1887L), hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
  }

  @Test(timeout = 11000)
  public void test086()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNotNull(hikariDataSource0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      int int0 = HikariConfig.poolNumber;
      assertEquals(1, int0);
      
      String string0 = "RuntimeVisibleAnnotations";
      hikariDataSource0.setConnectionTestQuery(string0);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("RuntimeVisibleAnnotations", hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      long long0 = 100L;
      HikariConfig.IDLE_TIMEOUT = long0;
      boolean boolean0 = true;
      hikariDataSource0.setInitializationFailFast(boolean0);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("RuntimeVisibleAnnotations", hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(100L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      String string1 = "";
      hikariDataSource0.setCatalog(string1);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("", hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("RuntimeVisibleAnnotations", hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNotSame(string1, string0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(100L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = hikariDataSource0.getConnectionTestQuery();
      assertEquals("RuntimeVisibleAnnotations", string2);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("", hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("RuntimeVisibleAnnotations", hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotNull(string2);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(100L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(string2.equals((Object)string1));
      
      hikariDataSource0.setCatalog(string2);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("RuntimeVisibleAnnotations", hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("RuntimeVisibleAnnotations", hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(100L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(string2.equals((Object)string1));
      
      long long1 = 531L;
      hikariDataSource0.setAcquireRetryDelay(long1);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("RuntimeVisibleAnnotations", hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("RuntimeVisibleAnnotations", hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(100L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(long1 == long0);
      
      hikariDataSource0.addDataSourceProperty(string2, string1);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("RuntimeVisibleAnnotations", hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("RuntimeVisibleAnnotations", hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(100L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      
      long long2 = hikariDataSource0.getMaxLifetime();
      assertEquals(1800000L, long2);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("RuntimeVisibleAnnotations", hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("RuntimeVisibleAnnotations", hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(100L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      hikariDataSource0.setDataSourceClassName(string1);
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("RuntimeVisibleAnnotations", hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isInitializationFailFast());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("RuntimeVisibleAnnotations", hikariDataSource0.getConnectionTestQuery());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(100L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
  }

  @Test(timeout = 11000)
  public void test087()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNotNull(hikariConfig0);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      boolean boolean0 = false;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = " ";
      hikariConfig0.poolName = string0;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(" ", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, hikariConfig0.catalog);
      assertFalse(boolean1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(" ", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(boolean1 == boolean0);
      
      hikariConfig0.setInitializationFailFast(boolean0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(" ", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(boolean0 == boolean1);
      
      long long0 = hikariConfig0.getConnectionTimeout();
      assertEquals(5000L, long0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(" ", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      
      hikariConfig0.maxLifetime = long0;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(" ", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      String string1 = "";
      hikariConfig0.setCatalog(string1);
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(" ", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNotSame(string1, string0);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.maxLifetime);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = hikariConfig0.getPoolName();
      assertEquals(" ", string2);
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(" ", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotNull(string2);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.maxLifetime);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = hikariConfig0.getCatalog();
      assertEquals("", string3);
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(" ", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotNull(string3);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.maxLifetime);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertEquals("", hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(5000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(" ", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.maxLifetime);
      
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test088()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNotNull(hikariDataSource0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      String string0 = "leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.";
      hikariDataSource0.catalog = string0;
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      String string1 = "--b>Q";
      String string2 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      hikariDataSource0.setDataSourceClassName(string2);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = hikariDataSource0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      boolean boolean1 = true;
      hikariDataSource0.setRegisterMbeans(boolean1);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(boolean1 == boolean0);
      
      hikariDataSource0.setAutoCommit(boolean1);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = false;
      hikariDataSource0.validate();
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      hikariDataSource0.setRegisterMbeans(boolean1);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      
      hikariDataSource0.setAutoCommit(boolean2);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = "No connection wait timeout is set, this might cause an infinite wait.";
      hikariDataSource0.setCatalog(string3);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("No connection wait timeout is set, this might cause an infinite wait.", hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = "BM?q1%MQ*bw74";
      hikariDataSource0.setCatalog(string4);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      hikariDataSource0.setAutoCommit(boolean2);
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int1 = (-234);
      hikariDataSource0.setLoginTimeout(int1);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals((-234), hikariDataSource0.getLoginTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(int1 == int0);
      
      hikariDataSource0.setConnectionTestQuery(hikariDataSource0.catalog);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals((-234), hikariDataSource0.getLoginTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(hikariDataSource0.catalog, string2);
      assertSame(hikariDataSource0.catalog, string4);
      assertNotSame(hikariDataSource0.catalog, string0);
      assertNotSame(hikariDataSource0.catalog, string3);
      assertNotSame(hikariDataSource0.catalog, string1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(hikariDataSource0.catalog.equals((Object)string2));
      assertFalse(hikariDataSource0.catalog.equals((Object)string0));
      assertFalse(hikariDataSource0.catalog.equals((Object)string3));
      assertFalse(hikariDataSource0.catalog.equals((Object)string1));
      
      String string5 = hikariDataSource0.getConnectionCustomizerClassName();
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals((-234), hikariDataSource0.getLoginTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(string5);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      hikariDataSource0.maxPoolSize = int0;
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals((-234), hikariDataSource0.getLoginTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      boolean boolean3 = hikariDataSource0.isRegisterMbeans();
      assertTrue(boolean3);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals((-234), hikariDataSource0.getLoginTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.maxPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      long long0 = hikariDataSource0.getAcquireRetryDelay();
      assertEquals(0L, long0);
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertTrue(hikariDataSource0.isRegisterMbeans());
      assertEquals((-234), hikariDataSource0.getLoginTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getConnectionTestQuery());
      assertEquals((-1), hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals((-1), hikariDataSource0.maxPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
  }

  @Test(timeout = 11000)
  public void test089()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "maxPoolSize cannot be negative";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNotNull(hikariDataSource0);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      long long0 = hikariDataSource0.getMaxLifetime();
      assertEquals(1800000L, long0);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      String string1 = "javassist.bytecode.StackMapTable";
      String string2 = "";
      hikariDataSource0.setDataSourceClassName(string2);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      hikariDataSource0.connectionInitSql = string1;
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariDataSource0.getConnectionCustomizer();
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(iConnectionCustomizer0);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      String string3 = hikariDataSource0.getDataSourceClassName();
      assertEquals("", string3);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotNull(string3);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      Properties properties0 = hikariDataSource0.getDataSourceProperties();
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      byte[] byteArray0 = null;
      boolean boolean3 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      int int0 = hikariDataSource0.getMaximumPoolSize();
      assertEquals(60, int0);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      hikariDataSource0.setConnectionTestQuery(string1);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      
      long long1 = (-363L);
      HikariConfig.MAX_LIFETIME = long1;
      String string4 = hikariDataSource0.getPoolName();
      assertEquals("HikariPool-0", string4);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotNull(string4);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-363L), HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = hikariDataSource0.getAcquireRetries();
      assertEquals(3, int1);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-363L), HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(int1 == int0);
      
      long long2 = hikariDataSource0.getAcquireRetryDelay();
      assertEquals(0L, long2);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-363L), HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      long long3 = hikariDataSource0.getMaxLifetime();
      assertEquals(1800000L, long3);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-363L), HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      
      hikariDataSource0.validate();
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-363L), HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      DataSource dataSource0 = hikariDataSource0.getDataSource();
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(dataSource0);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-363L), HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      HikariConfig hikariConfig0 = new HikariConfig(hikariDataSource0.dataSourceProperties);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionTestQuery());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("javassist.bytecode.StackMapTable", hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals((-363L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNotNull(hikariConfig0);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-363L), HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-363L), hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-363L), HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariConfig0.copyState(hikariDataSource0);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals((-363L), hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals((-363L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-363L), HikariConfig.MAX_LIFETIME);
      assertEquals((-363L), hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-363L), hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-363L), HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      hikariDataSource0.copyState(hikariConfig0);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals((-363L), hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals((-363L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-363L), HikariConfig.MAX_LIFETIME);
      assertEquals((-363L), hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-363L), hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-363L), HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      String string5 = hikariConfig0.getConnectionInitSql();
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals((-363L), hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals((-363L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(string5);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-363L), HikariConfig.MAX_LIFETIME);
      assertEquals((-363L), hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-363L), hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-363L), HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      
      int int2 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int2);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals((-363L), hikariDataSource0.getMaxLifetime());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals((-363L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-363L), HikariConfig.MAX_LIFETIME);
      assertEquals((-363L), hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-363L), hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-363L), HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string6 = hikariDataSource0.getConnectionInitSql();
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals((-363L), hikariDataSource0.getMaxLifetime());
      assertNull(string6);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-363L), HikariConfig.MAX_LIFETIME);
      assertEquals((-363L), hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      int int3 = hikariDataSource0.getAcquireRetries();
      assertEquals(3, int3);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals((-363L), hikariDataSource0.getMaxLifetime());
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-363L), HikariConfig.MAX_LIFETIME);
      assertEquals((-363L), hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 11000)
  public void test090()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      byte byte0 = (byte)11;
      byteArray0[0] = byte0;
      byte byte1 = (byte)25;
      byteArray0[1] = byte1;
      byte byte2 = (byte)5;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-1);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)2;
      byteArray0[5] = byte5;
      byte byte6 = (byte)67;
      byteArray0[6] = byte6;
      byte byte7 = (byte)32;
      byteArray0[7] = byte7;
      byte byte8 = (byte)82;
      byteArray0[8] = byte8;
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)11, (byte)25, (byte)5, (byte) (-1), (byte)0, (byte)2, (byte)67, (byte)32, (byte)82}, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(9, byteArray0.length);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNotNull(hikariDataSource0);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      long long0 = 5000L;
      String string0 = "B";
      hikariDataSource0.setDataSourceClassName(string0);
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("B", hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      hikariDataSource0.setMaxLifetime(long0);
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(5000L, hikariDataSource0.getMaxLifetime());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals("B", hikariDataSource0.getDataSourceClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(5000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      
      String string1 = "%*#ZZBQNzrB>5)\\9p|";
      // Undeclared exception!
      try { 
        hikariDataSource0.getConnection(string0, string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: B
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test091()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNotNull(hikariDataSource0);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      
      String string0 = "";
      hikariDataSource0.connectionInitSql = string0;
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      
      HikariConfig.poolNumber = hikariDataSource0.maxPoolSize;
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      
      int int0 = hikariDataSource0.getMaximumPoolSize();
      assertEquals(60, int0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      
      String string1 = hikariDataSource0.getConnectionInitSql();
      assertEquals("", string1);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      
      String string2 = hikariDataSource0.getCatalog();
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(string2);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      
      boolean boolean1 = hikariDataSource0.isAutoCommit();
      assertTrue(boolean1);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = hikariDataSource0.isJdbc4ConnectionTest();
      assertTrue(boolean2);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string3 = hikariDataSource0.getCatalog();
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(string3);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      
      long long0 = hikariDataSource0.getAcquireRetryDelay();
      assertEquals(0L, long0);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      
      long long1 = hikariDataSource0.getConnectionTimeout();
      assertEquals(5000L, long1);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(long1 == long0);
      
      long long2 = hikariDataSource0.getConnectionTimeout();
      assertEquals(5000L, long2);
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      
      Properties properties0 = hikariDataSource0.getDataSourceProperties();
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      
      String string4 = hikariDataSource0.getCatalog();
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("", hikariDataSource0.getConnectionInitSql());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertNull(string4);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test092()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      
      boolean boolean0 = true;
      hikariDataSource0.setAutoCommit(boolean0);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      
      long long0 = 8L;
      HikariConfig.CONNECTION_TIMEOUT = long0;
      String string0 = "";
      hikariDataSource0.poolName = string0;
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(8L, hikariDataSource1.getConnectionTimeout());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNotNull(hikariDataSource1);
      assertEquals(0L, hikariDataSource1.leakDetectionThreshold);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(8L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(8L, hikariDataSource1.connectionTimeout);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      
      String string1 = "d|Dd8N";
      hikariDataSource1.setTransactionIsolation(string1);
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(8L, hikariDataSource1.getConnectionTimeout());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertNotSame(string1, string0);
      assertEquals(0L, hikariDataSource1.leakDetectionThreshold);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(8L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(8L, hikariDataSource1.connectionTimeout);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(string1.equals((Object)string0));
      
      long long1 = 120000L;
      hikariDataSource1.setIdleTimeout(long1);
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(120000L, hikariDataSource1.getIdleTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(8L, hikariDataSource1.getConnectionTimeout());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertEquals(0L, hikariDataSource1.leakDetectionThreshold);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertEquals(120000L, hikariDataSource1.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(8L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertEquals(8L, hikariDataSource1.connectionTimeout);
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      assertFalse(long1 == long0);
      
      hikariDataSource1.connectionCustomizer = hikariDataSource0.connectionCustomizer;
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(120000L, hikariDataSource1.getIdleTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(8L, hikariDataSource1.getConnectionTimeout());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertTrue(hikariDataSource1.isAutoCommit());
      
      hikariDataSource1.setConnectionTimeout(hikariDataSource0.leakDetectionThreshold);
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("", hikariDataSource0.getPoolName());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(2147483647L, hikariDataSource1.getConnectionTimeout());
      assertEquals(120000L, hikariDataSource1.getIdleTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertNotSame(hikariDataSource0, hikariDataSource1);
      assertNotSame(hikariDataSource1, hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(8L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(2147483647L, hikariDataSource1.connectionTimeout);
      assertEquals(0L, hikariDataSource1.leakDetectionThreshold);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertEquals(120000L, hikariDataSource1.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(8L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertFalse(hikariDataSource0.equals((Object)hikariDataSource1));
      assertFalse(hikariDataSource1.equals((Object)hikariDataSource0));
      
      String string2 = "/H(dt9d@S&ErMGFYu";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string2);
      assertNotNull(mockPrintWriter0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      double double0 = (-1330.7212);
      mockPrintWriter0.print(double0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char char0 = 'V';
      PrintWriter printWriter0 = mockPrintWriter0.append(char0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotNull(printWriter0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test093()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Xs");
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      String string1 = "Xs";
      HikariConfig hikariConfig0 = new HikariConfig(string1);
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(string1.equals((Object)string0));
      
      long long0 = 0L;
      HikariConfig.IDLE_TIMEOUT = long0;
      long long1 = 16L;
      hikariConfig0.connectionTimeout = long1;
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(16L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test094()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNotNull(hikariDataSource0);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      String string0 = "Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.";
      hikariDataSource0.setDataSourceClassName(string0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      String string1 = "";
      int int0 = 1019;
      hikariDataSource0.setMinimumPoolSize(int0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1019, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1019, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      hikariDataSource0.setTransactionIsolation(string1);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1019, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNotSame(string1, string0);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1019, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = hikariDataSource0.getTransactionIsolation();
      assertEquals((-1), int1);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1019, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1019, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(int1 == int0);
      
      long long0 = hikariDataSource0.getMaxLifetime();
      assertEquals(1800000L, long0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1019, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1019, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      long long1 = hikariDataSource0.getIdleTimeout();
      assertEquals(600000L, long1);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1019, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1019, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(long1 == long0);
      
      boolean boolean0 = hikariDataSource0.isJdbc4ConnectionTest();
      assertTrue(boolean0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1019, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1019, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      
      long long2 = hikariDataSource0.getIdleTimeout();
      assertEquals(600000L, long2);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1019, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals("Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.", hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1019, hikariDataSource0.minPoolSize);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid transaction isolation value: 
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test095()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNotNull(hikariDataSource0);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      String string0 = "leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.";
      hikariDataSource0.catalog = string0;
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      
      long long0 = 10000L;
      hikariDataSource0.idleTimeout = long0;
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10000L, hikariDataSource0.getIdleTimeout());
      
      String string1 = "javassist.bytecode.stackmap.BasicBlock$JsrBytecode";
      String string2 = "--b>Q";
      String string3 = "";
      int int0 = hikariDataSource0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10000L, hikariDataSource0.getIdleTimeout());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      hikariDataSource0.setDataSourceClassName(string3);
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10000L, hikariDataSource0.getIdleTimeout());
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        hikariDataSource0.getConnection(string1, string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: 
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test096()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      HikariConfig hikariConfig1 = new HikariConfig(hikariConfig0.dataSourceProperties);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNotNull(hikariConfig1);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.setDataSource(hikariConfig1.dataSource);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string0 = null;
      hikariConfig1.setConnectionTestQuery(string0);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.setConnectionTestQuery(hikariConfig1.poolName);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.copyState(hikariConfig1);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.copyState(hikariConfig1);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string1 = "V7sYd_?W";
      hikariConfig1.dataSourceClassName = string1;
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      
      boolean boolean0 = true;
      hikariConfig1.minPoolSize = hikariConfig0.poolNumber;
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      
      hikariConfig1.setJdbc4ConnectionTest(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string2 = hikariConfig1.getConnectionInitSql();
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNull(string2);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.setConnectionCustomizerClassName(string2);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string3 = hikariConfig1.getDataSourceClassName();
      assertEquals("V7sYd_?W", string3);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertSame(string3, string1);
      assertNotNull(string3);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      int int0 = 0;
      hikariConfig1.setMaximumPoolSize(int0);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      int int1 = 3511;
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long0);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      String string4 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string4);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotNull(string4);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean1 = hikariConfig0.isJdbc4ConnectionTest();
      assertTrue(boolean1);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = false;
      hikariConfig1.setRegisterMbeans(boolean2);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNull(dataSource0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      hikariConfig0.setConnectionInitSql(hikariConfig1.dataSourceClassName);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig1.getConnectionCustomizer();
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNull(iConnectionCustomizer0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig1.validate();
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      long long1 = 2235L;
      hikariConfig1.setMaxLifetime(long1);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(2235L, hikariConfig1.getMaxLifetime());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2235L, hikariConfig1.maxLifetime);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(long1 == long0);
      
      int int2 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int2);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      hikariConfig1.validate();
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      int int3 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int3);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      hikariConfig0.setMaxLifetime(int3);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1L), hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      hikariConfig0.setLeakDetectionThreshold(hikariConfig1.transactionIsolation);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1L), hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string5 = "javassist.bytecode.CodeIterator$Branch16";
      hikariConfig1.addDataSourceProperty(string5, string5);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1L), hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = hikariConfig1.getPoolName();
      assertEquals("HikariPool-0", string6);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string6, string3);
      assertSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotNull(string6);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1L), hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test097()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNotNull(hikariConfig0);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      
      String string0 = "bad array access";
      hikariConfig0.setConnectionInitSql(string0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("bad array access", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      
      String string1 = "";
      long long0 = 586L;
      hikariConfig0.leakDetectionThreshold = long0;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("bad array access", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(586L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      hikariConfig0.connectionTestQuery = string1;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("bad array access", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(586L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      
      long long1 = 158L;
      String string2 = "tQ3SbiQDW)HQgT?G R#";
      String string3 = "<G_T&:e_)Ur~Y<`\"";
      hikariConfig0.setConnectionCustomizerClassName(string3);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("bad array access", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(586L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("<G_T&:e_)Ur~Y<`\"", hikariConfig0.getConnectionCustomizerClassName());
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(586L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      hikariConfig0.connectionCustomizerClassName = string2;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("tQ3SbiQDW)HQgT?G R#", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("bad array access", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(586L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      hikariConfig0.leakDetectionThreshold = long1;
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("tQ3SbiQDW)HQgT?G R#", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("bad array access", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(158L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      
      long long2 = 1105L;
      hikariConfig0.setConnectionTimeout(long2);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("tQ3SbiQDW)HQgT?G R#", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("bad array access", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1105L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(158L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1105L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(158L, hikariConfig0.leakDetectionThreshold);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      String string4 = hikariConfig0.getConnectionCustomizerClassName();
      assertEquals("tQ3SbiQDW)HQgT?G R#", string4);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("tQ3SbiQDW)HQgT?G R#", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("bad array access", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1105L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(158L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNotSame(string4, string1);
      assertSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotNull(string4);
      assertEquals(1105L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(158L, hikariConfig0.leakDetectionThreshold);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      long long3 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long3);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("tQ3SbiQDW)HQgT?G R#", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("bad array access", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1105L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(158L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1105L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(158L, hikariConfig0.leakDetectionThreshold);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("tQ3SbiQDW)HQgT?G R#", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("bad array access", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1105L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(158L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(dataSource0);
      assertEquals(1105L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(158L, hikariConfig0.leakDetectionThreshold);
      
      long long4 = hikariConfig0.getConnectionTimeout();
      assertEquals(1105L, long4);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("tQ3SbiQDW)HQgT?G R#", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("bad array access", hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1105L, hikariConfig0.getConnectionTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(158L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1105L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(158L, hikariConfig0.leakDetectionThreshold);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertTrue(long4 == long2);
      assertFalse(long4 == long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HikariConfig hikariConfig1 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      String string5 = null;
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string5);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.copyState(hikariConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception copying HikariConfig state: null
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test098()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNotNull(hikariConfig0);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      String string0 = "SQLException";
      hikariConfig0.setConnectionTestQuery(string0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("SQLException", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      int int0 = 14;
      String string1 = "bad signature: ";
      String string2 = "maxPoolSize is less than minPoolSize, forcing them equal.";
      hikariConfig0.dataSourceClassName = string2;
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("SQLException", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      hikariConfig0.setMinimumPoolSize(int0);
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("SQLException", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      int int1 = 0;
      String string3 = "javassist.bytecode.CodeIterator$If16";
      hikariConfig0.setConnectionCustomizerClassName(string3);
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("SQLException", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      hikariConfig0.setAcquireRetryDelay(int0);
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("SQLException", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(int0 == int1);
      
      hikariConfig0.setAcquireIncrement(int1);
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("SQLException", hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(int1 == int0);
      
      hikariConfig0.setConnectionTestQuery(string1);
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      
      hikariConfig0.connectionInitSql = string1;
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      long long0 = (-1L);
      hikariConfig0.setAcquireRetryDelay(long0);
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      hikariConfig0.setDataSourceClassName(string2);
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      
      hikariConfig0.setAcquireRetries(int0);
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(14, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(int0 == int1);
      
      long long1 = 2497L;
      hikariConfig0.maxLifetime = long1;
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2497L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      HikariConfig.poolNumber = hikariConfig0.maxPoolSize;
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2497L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      long long2 = hikariConfig0.getConnectionTimeout();
      assertEquals(5000L, long2);
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2497L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2497L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(14, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      String string4 = hikariConfig0.getCatalog();
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2497L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(string4);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2497L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(14, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      int int2 = hikariConfig0.getAcquireRetries();
      assertEquals(14, int2);
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2497L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2497L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(14, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int3);
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2497L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2497L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(14, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      hikariConfig0.poolName = string1;
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2497L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("bad signature: ", hikariConfig0.getPoolName());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      String string5 = hikariConfig0.getCatalog();
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2497L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("bad signature: ", hikariConfig0.getPoolName());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(string5);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2497L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(14, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      int int4 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int4);
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2497L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("bad signature: ", hikariConfig0.getPoolName());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2497L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(14, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      
      boolean boolean0 = hikariConfig0.isJdbc4ConnectionTest();
      assertTrue(boolean0);
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2497L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("bad signature: ", hikariConfig0.getPoolName());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2497L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(14, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      long long3 = 3155L;
      hikariConfig0.isInitializationFailFast = boolean0;
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2497L, hikariConfig0.getMaxLifetime());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("bad signature: ", hikariConfig0.getPoolName());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      
      hikariConfig0.setConnectionTimeout(long3);
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2497L, hikariConfig0.getMaxLifetime());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("bad signature: ", hikariConfig0.getPoolName());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2497L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(14, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      
      int int5 = hikariConfig0.getAcquireRetries();
      assertEquals(14, int5);
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2497L, hikariConfig0.getMaxLifetime());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("bad signature: ", hikariConfig0.getPoolName());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2497L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(14, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(int5 == int3);
      assertTrue(int5 == int2);
      assertFalse(int5 == int4);
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      
      long long4 = hikariConfig0.getMaxLifetime();
      assertEquals(2497L, long4);
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2497L, hikariConfig0.getMaxLifetime());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("bad signature: ", hikariConfig0.getPoolName());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2497L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(14, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertTrue(long4 == long1);
      assertFalse(long4 == long0);
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2497L, hikariConfig0.getMaxLifetime());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("bad signature: ", hikariConfig0.getPoolName());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2497L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(14, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      String string6 = hikariConfig0.getConnectionInitSql();
      assertEquals("bad signature: ", string6);
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2497L, hikariConfig0.getMaxLifetime());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("bad signature: ", hikariConfig0.getPoolName());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotNull(string6);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2497L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(14, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2497L, hikariConfig0.getMaxLifetime());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("bad signature: ", hikariConfig0.getPoolName());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(dataSource0);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2497L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(14, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      Properties properties1 = hikariConfig0.getDataSourceProperties();
      assertEquals(14, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.bytecode.CodeIterator$If16", hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("bad signature: ", hikariConfig0.getConnectionTestQuery());
      assertEquals("bad signature: ", hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(2497L, hikariConfig0.getMaxLifetime());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(14, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("bad signature: ", hikariConfig0.getPoolName());
      assertEquals("maxPoolSize is less than minPoolSize, forcing them equal.", hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertSame(properties1, properties0);
      assertNotNull(properties1);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(2497L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(14, hikariConfig0.minPoolSize);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(14, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
  }

  @Test(timeout = 11000)
  public void test099()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNotNull(hikariConfig0);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      String string0 = "C%ticfZJ9L05x9I";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      hikariConfig0.catalog = string0;
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      
      boolean boolean0 = hikariConfig0.isInitializationFailFast();
      assertFalse(boolean0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      boolean boolean1 = hikariConfig0.isJdbc4ConnectionTest();
      assertTrue(boolean1);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(boolean1 == boolean0);
      
      hikariConfig0.setConnectionCustomizerClassName(string0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(dataSource0);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      hikariConfig0.setDataSource(dataSource0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      String string1 = "~Sgaw_.FT!\\WRa48p";
      hikariConfig0.setCatalog(string1);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("~Sgaw_.FT!\\WRa48p", hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNotSame(string1, string0);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(string1.equals((Object)string0));
      
      long long0 = 2253L;
      hikariConfig0.setIdleTimeout(long0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("~Sgaw_.FT!\\WRa48p", hikariConfig0.getCatalog());
      assertEquals(2253L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(2253L, hikariConfig0.idleTimeout);
      
      boolean boolean2 = hikariConfig0.isJdbc4ConnectionTest();
      assertTrue(boolean2);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("~Sgaw_.FT!\\WRa48p", hikariConfig0.getCatalog());
      assertEquals(2253L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(2253L, hikariConfig0.idleTimeout);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("~Sgaw_.FT!\\WRa48p", hikariConfig0.getCatalog());
      assertEquals(2253L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(2253L, hikariConfig0.idleTimeout);
      
      int int0 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("~Sgaw_.FT!\\WRa48p", hikariConfig0.getCatalog());
      assertEquals(2253L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(2253L, hikariConfig0.idleTimeout);
      
      String string2 = hikariConfig0.getCatalog();
      assertEquals("~Sgaw_.FT!\\WRa48p", string2);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("~Sgaw_.FT!\\WRa48p", hikariConfig0.getCatalog());
      assertEquals(2253L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotNull(string2);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(2253L, hikariConfig0.idleTimeout);
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test100()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNotNull(hikariConfig0);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      long long0 = 100L;
      long long1 = (-2502L);
      hikariConfig0.connectionTimeout = long1;
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-2502L), hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.setAcquireRetryDelay(long0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-2502L), hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-2502L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(long0 == long1);
      
      boolean boolean0 = hikariConfig0.isJdbc4ConnectionTest();
      assertTrue(boolean0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-2502L), hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-2502L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      String string0 = "one of either dataSource or dataSourceClassName must be specified";
      hikariConfig0.addDataSourceProperty(string0, string0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-2502L), hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-2502L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      boolean boolean1 = hikariConfig0.isAutoCommit();
      assertTrue(boolean1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-2502L), hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-2502L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(boolean1 == boolean0);
      
      int int0 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-2502L), hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-2502L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      long long2 = 4702L;
      HikariConfig.CONNECTION_TIMEOUT = long2;
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-2502L), hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(dataSource0);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-2502L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(4702L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      
      HikariConfig hikariConfig1 = new HikariConfig();
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(4702L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNotNull(hikariConfig1);
      assertEquals(4702L, hikariConfig1.connectionTimeout);
      assertEquals(4702L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      long long3 = 5000L;
      hikariConfig1.setAutoCommit(hikariConfig0.isRegisterMbeans);
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-2502L), hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(4702L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-2502L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(4702L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(4702L, hikariConfig1.connectionTimeout);
      assertEquals(4702L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig1.isAutoCommit);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig1.setDataSource(hikariConfig0.dataSource);
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-2502L), hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(4702L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-2502L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(4702L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(4702L, hikariConfig1.connectionTimeout);
      assertEquals(4702L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig1.isAutoCommit);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig1.connectionTimeout = long3;
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      
      hikariConfig0.isJdbc4connectionTest = hikariConfig1.isAutoCommit;
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-2502L), hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      
      hikariConfig0.copyState(hikariConfig1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-2502L), hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-2502L), hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-2502L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(4702L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(4702L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals((-2502L), hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      int int1 = 1821;
      hikariConfig1.isAutoCommit = boolean0;
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-2502L), hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-2502L), hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      
      hikariConfig1.minPoolSize = int1;
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(1821, hikariConfig1.getMinimumPoolSize());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-2502L), hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      
      int int2 = hikariConfig0.getAcquireIncrement();
      assertEquals(0, int2);
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-2502L), hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-2502L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(4702L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string1 = "+\":&Db";
      hikariConfig1.poolName = string1;
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals("+\":&Db", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(1821, hikariConfig1.getMinimumPoolSize());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-2502L), hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      
      long long4 = hikariConfig1.getConnectionTimeout();
      assertEquals((-2502L), long4);
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals("+\":&Db", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(1821, hikariConfig1.getMinimumPoolSize());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-2502L), hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(4702L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals((-2502L), hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(1821, hikariConfig1.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertTrue(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      boolean boolean2 = hikariConfig1.isJdbc4ConnectionTest();
      assertFalse(boolean2);
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals("+\":&Db", hikariConfig1.getPoolName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(1821, hikariConfig1.getMinimumPoolSize());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals((-2502L), hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(4702L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals((-2502L), hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(1821, hikariConfig1.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      DataSource dataSource1 = hikariConfig0.getDataSource();
      assertNull(hikariConfig0.getCatalog());
      assertEquals((-2502L), hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNull(dataSource1);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-2502L), hikariConfig0.connectionTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(4702L, HikariConfig.CONNECTION_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
  }

  @Test(timeout = 11000)
  public void test101()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotNull(hikariConfig0);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      hikariConfig0.dataSourceProperties = properties0;
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, hikariConfig0.dataSourceProperties.size());
      assertTrue(hikariConfig0.dataSourceProperties.isEmpty());
      
      String string0 = "m?i[O<\\Z!:vq";
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      long long0 = 3124L;
      long long1 = 0L;
      String string1 = "javassist.compiler.ast.Keyword";
      hikariConfig0.dataSourceClassName = string1;
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      boolean boolean0 = true;
      hikariConfig0.setAutoCommit(boolean0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      hikariConfig0.leakDetectionThreshold = long1;
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      hikariConfig0.setAcquireRetryDelay(long1);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(long1 == long0);
      
      boolean boolean1 = false;
      hikariConfig0.isJdbc4connectionTest = boolean1;
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      hikariConfig0.setAcquireRetryDelay(long0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(long0 == long1);
      
      boolean boolean2 = true;
      String string2 = "maxPoolSize cannot be negative";
      Object object0 = properties0.put(string2, string0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNull(object0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      hikariConfig0.setRegisterMbeans(boolean2);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(boolean2 == boolean1);
      
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      long long2 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long2);
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test102()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotNull(hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      HikariConfig hikariConfig1 = new HikariConfig(hikariConfig0.dataSourceProperties);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNotNull(hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.setDataSource(hikariConfig1.dataSource);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string0 = null;
      hikariConfig1.setConnectionTestQuery(string0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.setConnectionTestQuery(hikariConfig1.poolName);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.copyState(hikariConfig1);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.copyState(hikariConfig1);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string1 = "V7sYd_?W";
      hikariConfig1.dataSourceClassName = string1;
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      
      boolean boolean0 = true;
      hikariConfig1.minPoolSize = hikariConfig0.poolNumber;
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      hikariConfig1.setJdbc4ConnectionTest(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.setConnectionCustomizerClassName(hikariConfig1.connectionCustomizerClassName);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string2 = hikariConfig1.getDataSourceClassName();
      assertEquals("V7sYd_?W", string2);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertSame(string2, string1);
      assertNotNull(string2);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      int int0 = 0;
      hikariConfig1.setMaximumPoolSize(int0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      int int1 = 3511;
      hikariConfig0.setAcquireRetries(int1);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int1 == int0);
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      String string3 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string3);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotNull(string3);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = hikariConfig0.isJdbc4ConnectionTest();
      assertTrue(boolean1);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(boolean1 == boolean0);
      
      hikariConfig1.setMaxLifetime(int0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(0L, hikariConfig1.maxLifetime);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertFalse(int0 == int1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      boolean boolean2 = true;
      hikariConfig1.setRegisterMbeans(boolean2);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isRegisterMbeans);
      assertEquals(0L, hikariConfig1.maxLifetime);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertTrue(boolean2 == boolean1);
      
      hikariConfig0.setConnectionInitSql(hikariConfig1.dataSourceClassName);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isRegisterMbeans);
      assertEquals(0L, hikariConfig1.maxLifetime);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig1.getConnectionCustomizer();
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isRegisterMbeans());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNull(iConnectionCustomizer0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isRegisterMbeans);
      assertEquals(0L, hikariConfig1.maxLifetime);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig1.validate();
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isRegisterMbeans());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getMaxLifetime());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isRegisterMbeans);
      assertEquals(0L, hikariConfig1.maxLifetime);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      long long1 = 2235L;
      hikariConfig1.setMaxLifetime(long1);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(2235L, hikariConfig1.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isRegisterMbeans());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isRegisterMbeans);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(2235L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(long1 == long0);
      
      int int2 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int2);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int3);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      hikariConfig0.setLeakDetectionThreshold(hikariConfig1.transactionIsolation);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(2235L, hikariConfig1.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isRegisterMbeans());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isRegisterMbeans);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(2235L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string4 = "javassitt.Dytecode.CodeIterator$Branch16";
      hikariConfig1.addDataSourceProperty(string4, string4);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals(2235L, hikariConfig1.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertTrue(hikariConfig1.isRegisterMbeans());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isRegisterMbeans);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(2235L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      long long2 = hikariConfig0.getConnectionTimeout();
      assertEquals(5000L, long2);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      long long3 = hikariConfig0.getMaxLifetime();
      assertEquals(1800000L, long3);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      int int4 = hikariConfig0.getAcquireRetries();
      assertEquals(3511, int4);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(3511, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNull(dataSource0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3511, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
  }

  @Test(timeout = 11000)
  public void test103()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotNull(hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      HikariConfig hikariConfig1 = new HikariConfig(hikariConfig0.dataSourceProperties);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNotNull(hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.setDataSource(hikariConfig1.dataSource);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string0 = null;
      hikariConfig1.setConnectionTestQuery(string0);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.setConnectionTestQuery(hikariConfig1.poolName);
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      boolean boolean0 = false;
      hikariConfig0.isJdbc4connectionTest = boolean0;
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      
      hikariConfig0.copyState(hikariConfig1);
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.copyState(hikariConfig1);
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string1 = "V7sYd_?W";
      hikariConfig1.dataSourceClassName = string1;
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      
      boolean boolean1 = true;
      hikariConfig1.minPoolSize = hikariConfig0.poolNumber;
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      
      hikariConfig1.setJdbc4ConnectionTest(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string2 = hikariConfig1.getConnectionInitSql();
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNull(string2);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.setConnectionCustomizerClassName(string2);
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string3 = hikariConfig1.getDataSourceClassName();
      assertEquals("V7sYd_?W", string3);
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertSame(string3, string1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotNull(string3);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      int int0 = 0;
      hikariConfig1.setMaximumPoolSize(int0);
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      int int1 = 3511;
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long0);
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      String string4 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string4);
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotNull(string4);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean2 = hikariConfig0.isJdbc4ConnectionTest();
      assertFalse(boolean2);
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = false;
      hikariConfig1.setRegisterMbeans(boolean3);
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNull(dataSource0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      hikariConfig0.setConnectionInitSql(hikariConfig1.dataSourceClassName);
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig1.getConnectionCustomizer();
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNull(iConnectionCustomizer0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig1.validate();
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      long long1 = 2235L;
      hikariConfig1.setMaxLifetime(long1);
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals(2235L, hikariConfig1.getMaxLifetime());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals(2235L, hikariConfig1.maxLifetime);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(long1 == long0);
      
      int int2 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int2);
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      hikariConfig1.validate();
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      int int3 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int3);
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      hikariConfig0.setMaxLifetime(int3);
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      hikariConfig0.setLeakDetectionThreshold(hikariConfig1.transactionIsolation);
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1L), hikariConfig0.maxLifetime);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string5 = "javassist.bytecode.CodeIterator$Branch16";
      hikariConfig1.addDataSourceProperty(string5, string5);
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1L), hikariConfig0.maxLifetime);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = hikariConfig1.getPoolName();
      assertEquals("HikariPool-0", string6);
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertSame(string6, string4);
      assertNotNull(string6);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1L), hikariConfig0.maxLifetime);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      
      hikariConfig1.validate();
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1L), hikariConfig0.getMaxLifetime());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertFalse(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1L), hikariConfig0.maxLifetime);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(hikariConfig1.isAutoCommit);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
  }

  @Test(timeout = 11000)
  public void test104()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      String string0 = "m?i[O<\\Z!:vq";
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      long long0 = 3124L;
      String string1 = "javassist.compiler.ast.Keyword";
      hikariConfig0.dataSourceClassName = string1;
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      
      boolean boolean0 = true;
      hikariConfig0.setAutoCommit(boolean0);
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      hikariConfig0.leakDetectionThreshold = hikariConfig0.IDLE_TIMEOUT;
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      
      hikariConfig0.setAcquireRetryDelay(hikariConfig0.maxPoolSize);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      boolean boolean1 = true;
      hikariConfig0.isJdbc4connectionTest = boolean1;
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      
      hikariConfig0.setAcquireRetryDelay(long0);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      boolean boolean2 = true;
      String string2 = "maxPoolSize cannot be negative";
      Object object0 = properties0.put(string2, string0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNull(object0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      hikariConfig0.setRegisterMbeans(boolean2);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      
      long long1 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long1);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(long1 == long0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = properties0.put(hikariConfig0.dataSourceClassName, object1);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertNull(object2);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      hikariConfig0.validate();
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      int int0 = hikariConfig0.getAcquireIncrement();
      assertEquals(0, int0);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      hikariConfig0.setMinimumPoolSize(int0);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertNull(dataSource0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      
      hikariConfig0.addDataSourceProperty(string0, object3);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(object3, object1);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(object3.equals((Object)object1));
      
      long long2 = hikariConfig0.getMaxLifetime();
      assertEquals(1800000L, long2);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      hikariConfig0.setMinimumPoolSize(int0);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getCatalog());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
  }

  @Test(timeout = 11000)
  public void test105()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      long long0 = 3155L;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = 0;
      boolean boolean1 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(boolean1 == boolean0);
      
      hikariConfig0.setConnectionTimeout(long0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      long long1 = 789L;
      boolean boolean2 = false;
      hikariConfig0.setAutoCommit(boolean2);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(boolean2 == boolean0);
      
      hikariConfig0.setLeakDetectionThreshold(long1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(long1 == long0);
      
      hikariConfig0.setAcquireIncrement(int0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.setRegisterMbeans(boolean2);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean3);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      hikariConfig0.setMaximumPoolSize(int0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      hikariConfig0.setMinimumPoolSize(int0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      boolean boolean4 = false;
      hikariConfig0.setRegisterMbeans(boolean4);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(iConnectionCustomizer0);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Properties properties1 = (Properties)properties0.clone();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNotNull(hikariConfig1);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertTrue(properties0.equals((Object)properties1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      Properties properties2 = (Properties)properties0.clone();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      assertNotSame(properties0, properties1);
      assertNotSame(properties0, properties2);
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties1);
      assertNotNull(properties2);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = properties0.put(hikariConfig1, object0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNotSame(properties0, properties1);
      assertNotSame(properties0, properties2);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNull(object1);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(properties0.equals((Object)properties2));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(properties0, properties1);
      assertNotSame(properties0, properties2);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(properties0.equals((Object)properties2));
      
      String string0 = "";
      hikariConfig1.setPoolName(string0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertEquals("", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getCatalog());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertNotSame(properties0, properties1);
      assertNotSame(properties0, properties2);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(properties0.equals((Object)properties2));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertEquals(0, int1);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3155L, hikariConfig0.getConnectionTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(3155L, hikariConfig0.connectionTimeout);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 11000)
  public void test106()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNotNull(hikariConfig0);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      String string0 = "m?i[O<\\Z!:vq";
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      
      long long0 = 3124L;
      String string1 = "javassist.compiler.ast.Keyword";
      hikariConfig0.dataSourceClassName = string1;
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      boolean boolean0 = true;
      hikariConfig0.setAutoCommit(boolean0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isAutoCommit);
      
      hikariConfig0.leakDetectionThreshold = hikariConfig0.IDLE_TIMEOUT;
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.setAcquireRetryDelay(hikariConfig0.maxPoolSize);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      
      boolean boolean1 = true;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNotNull(hikariDataSource0);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      
      hikariConfig0.isJdbc4connectionTest = boolean1;
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.setAcquireRetryDelay(long0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      
      boolean boolean2 = true;
      String string2 = "maxPoolSize cannot be negative";
      Object object0 = properties0.put(string2, string0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNull(object0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      hikariConfig0.setRegisterMbeans(boolean2);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      long long1 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long1);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertFalse(long1 == long0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = properties0.put(hikariConfig0.dataSourceClassName, object1);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(object2);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      
      hikariConfig0.validate();
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      
      int int0 = hikariConfig0.getAcquireIncrement();
      assertEquals(0, int0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      
      hikariConfig0.setMinimumPoolSize(int0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      
      HikariDataSource hikariDataSource1 = (HikariDataSource)hikariConfig0.getDataSource();
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariDataSource1.getTransactionIsolation());
      assertEquals(1800000L, hikariDataSource1.getMaxLifetime());
      assertFalse(hikariDataSource1.isInitializationFailFast());
      assertEquals(0, hikariDataSource1.getAcquireIncrement());
      assertEquals(0L, hikariDataSource1.getLeakDetectionThreshold());
      assertNull(hikariDataSource1.getConnectionTestQuery());
      assertEquals(600000L, hikariDataSource1.getIdleTimeout());
      assertEquals(3, hikariDataSource1.getAcquireRetries());
      assertNull(hikariDataSource1.getConnectionInitSql());
      assertEquals(60, hikariDataSource1.getMaximumPoolSize());
      assertEquals(5000L, hikariDataSource1.getConnectionTimeout());
      assertTrue(hikariDataSource1.isJdbc4ConnectionTest());
      assertEquals(0L, hikariDataSource1.getAcquireRetryDelay());
      assertNull(hikariDataSource1.getCatalog());
      assertEquals(0, hikariDataSource1.getLoginTimeout());
      assertNull(hikariDataSource1.getDataSourceClassName());
      assertTrue(hikariDataSource1.isAutoCommit());
      assertEquals("HikariPool-1", hikariDataSource1.getPoolName());
      assertNull(hikariDataSource1.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource1.isRegisterMbeans());
      assertEquals(10, hikariDataSource1.getMinimumPoolSize());
      assertSame(hikariDataSource1, hikariDataSource0);
      assertNotNull(hikariDataSource1);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource1.minPoolSize);
      assertEquals((-1), hikariDataSource1.transactionIsolation);
      assertEquals(0L, hikariDataSource1.leakDetectionThreshold);
      assertTrue(hikariDataSource1.isAutoCommit);
      assertFalse(hikariDataSource1.isInitializationFailFast);
      assertFalse(hikariDataSource1.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(600000L, hikariDataSource1.idleTimeout);
      assertEquals(60, hikariDataSource1.maxPoolSize);
      assertEquals(1800000L, hikariDataSource1.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariDataSource1.connectionTimeout);
      assertEquals(3, hikariDataSource1.acquireRetries);
      assertTrue(hikariDataSource1.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      
      hikariConfig0.addDataSourceProperty(string0, object3);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(object3, object1);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(object3.equals((Object)object1));
      
      long long2 = hikariConfig0.getMaxLifetime();
      assertEquals(1800000L, long2);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      hikariConfig0.setMinimumPoolSize(int0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
  }

  @Test(timeout = 11000)
  public void test107()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNotNull(hikariConfig0);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      boolean boolean0 = true;
      int int0 = 0;
      hikariConfig0.minPoolSize = int0;
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      
      hikariConfig0.setAcquireRetries(int0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      String string0 = "java/lang/Class";
      long long0 = 0L;
      int int1 = (-1896);
      HikariConfig.poolNumber = int1;
      HikariConfig.poolNumber = hikariConfig0.minPoolSize;
      hikariConfig0.setAcquireRetryDelay(long0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0, HikariConfig.poolNumber);
      
      long long1 = (-1L);
      HikariConfig.IDLE_TIMEOUT = long1;
      hikariConfig0.setMaxLifetime(long0);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1L), HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0, HikariConfig.poolNumber);
      assertFalse(long0 == long1);
      
      int int2 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int2);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1L), HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0, HikariConfig.poolNumber);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = hikariConfig0.getMinimumPoolSize();
      assertEquals(0, int3);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1L), HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0, HikariConfig.poolNumber);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      long long2 = 0L;
      hikariConfig0.setMaxLifetime(long2);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1L), HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0, HikariConfig.poolNumber);
      assertFalse(long2 == long1);
      
      int int4 = hikariConfig0.getAcquireRetries();
      assertEquals(0, int4);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1L), HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0, HikariConfig.poolNumber);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      
      String string1 = "";
      hikariConfig0.setDataSourceClassName(string1);
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNotSame(string1, string0);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1L), HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0, HikariConfig.poolNumber);
      assertFalse(string1.equals((Object)string0));
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals((-1L), HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0, HikariConfig.poolNumber);
  }

  @Test(timeout = 11000)
  public void test108()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      long long0 = 3153L;
      int int0 = 0;
      boolean boolean0 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      
      hikariConfig0.setConnectionTimeout(long0);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3153L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3153L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      
      long long1 = 789L;
      boolean boolean1 = false;
      hikariConfig0.setAutoCommit(boolean1);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3153L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3153L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      
      hikariConfig0.setLeakDetectionThreshold(long1);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3153L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3153L, hikariConfig0.connectionTimeout);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(long1 == long0);
      
      hikariConfig0.setAcquireIncrement(int0);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3153L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3153L, hikariConfig0.connectionTimeout);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      
      hikariConfig0.setRegisterMbeans(boolean1);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3153L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3153L, hikariConfig0.connectionTimeout);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      
      boolean boolean2 = hikariConfig0.isRegisterMbeans();
      assertFalse(boolean2);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(3153L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3153L, hikariConfig0.connectionTimeout);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      hikariConfig0.setMaximumPoolSize(int0);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3153L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3153L, hikariConfig0.connectionTimeout);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      
      hikariConfig0.setMinimumPoolSize(int0);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3153L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3153L, hikariConfig0.connectionTimeout);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      
      boolean boolean3 = false;
      hikariConfig0.setRegisterMbeans(boolean3);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3153L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3153L, hikariConfig0.connectionTimeout);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertTrue(boolean3 == boolean2);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Properties properties1 = (Properties)properties0.clone();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      
      long long2 = (-4689L);
      hikariConfig0.maxLifetime = long2;
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-4689L), hikariConfig0.getMaxLifetime());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3153L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNotNull(hikariConfig1);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(properties0.equals((Object)properties1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      Properties properties2 = (Properties)properties0.clone();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties2.size());
      assertTrue(properties2.isEmpty());
      assertNotSame(properties0, properties1);
      assertNotSame(properties0, properties2);
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      assertNotNull(properties2);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = properties0.put(hikariConfig1, object0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNotSame(properties0, properties1);
      assertNotSame(properties0, properties2);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNull(object1);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(properties0.equals((Object)properties2));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.setDataSourceProperties(properties0);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-4689L), hikariConfig0.getMaxLifetime());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3153L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(properties0, properties1);
      assertNotSame(properties0, properties2);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals((-4689L), hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3153L, hikariConfig0.connectionTimeout);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(properties0.equals((Object)properties2));
      
      String string0 = "";
      hikariConfig1.setPoolName(string0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals("", hikariConfig1.getPoolName());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNotSame(properties0, properties1);
      assertNotSame(properties0, properties2);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(properties0.equals((Object)properties2));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      boolean boolean4 = hikariConfig0.isAutoCommit();
      assertFalse(boolean4);
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-4689L), hikariConfig0.getMaxLifetime());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(3153L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(789L, hikariConfig0.getLeakDetectionThreshold());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals((-4689L), hikariConfig0.maxLifetime);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(0, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3153L, hikariConfig0.connectionTimeout);
      assertEquals(789L, hikariConfig0.leakDetectionThreshold);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
  }

  @Test(timeout = 11000)
  public void test109()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNotNull(hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      HikariConfig hikariConfig1 = new HikariConfig(hikariConfig0.dataSourceProperties);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotNull(hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.setDataSource(hikariConfig1.dataSource);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string0 = null;
      hikariConfig1.setConnectionTestQuery(string0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.setConnectionTestQuery(hikariConfig1.poolName);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.copyState(hikariConfig1);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.copyState(hikariConfig1);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string1 = "V7sYd_?W";
      hikariConfig1.dataSourceClassName = string1;
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      
      hikariConfig1.minPoolSize = hikariConfig0.poolNumber;
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      
      hikariConfig1.setJdbc4ConnectionTest(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.setConnectionCustomizerClassName(hikariConfig1.dataSourceClassName);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string2 = hikariConfig1.getDataSourceClassName();
      assertEquals("V7sYd_?W", string2);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertSame(string2, string1);
      assertNotNull(string2);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      int int0 = 0;
      hikariConfig1.setMaximumPoolSize(int0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      int int1 = 3511;
      hikariConfig1.setIdleTimeout(hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(5000L, hikariConfig1.idleTimeout);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      String string3 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string3);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotNull(string3);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = hikariConfig0.isJdbc4ConnectionTest();
      assertTrue(boolean0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      boolean boolean1 = false;
      DataSource dataSource0 = hikariConfig0.getDataSource();
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNull(dataSource0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      hikariConfig0.setConnectionInitSql(hikariConfig1.dataSourceClassName);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(5000L, hikariConfig1.idleTimeout);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig1.getConnectionCustomizer();
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(5000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(0, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNull(iConnectionCustomizer0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(0, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(5000L, hikariConfig1.idleTimeout);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig1.validate();
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      long long1 = 2235L;
      hikariConfig1.setMaxLifetime(long1);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(2235L, hikariConfig1.getMaxLifetime());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2235L, hikariConfig1.maxLifetime);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(long1 == long0);
      
      int int2 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int2);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      hikariConfig1.validate();
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      int int3 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int3);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      hikariConfig0.setMaxLifetime(int3);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1L), hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1L), hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      hikariConfig0.setLeakDetectionThreshold(hikariConfig1.transactionIsolation);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1L), hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1L), hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string4 = "javassist.bytecode.CodeIterator$Branch16";
      hikariConfig1.addDataSourceProperty(string4, string4);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1L), hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1L), hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      String string5 = hikariConfig1.getPoolName();
      assertEquals("HikariPool-0", string5);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals("HikariPool-1", hikariConfig0.getConnectionTestQuery());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1L), hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("V7sYd_?W", hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertEquals("HikariPool-0", hikariConfig1.getPoolName());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertEquals("V7sYd_?W", hikariConfig1.getDataSourceClassName());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getCatalog());
      assertEquals("HikariPool-1", hikariConfig1.getConnectionTestQuery());
      assertEquals(2, hikariConfig1.getMaximumPoolSize());
      assertEquals(2, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertTrue(hikariConfig1.isAutoCommit());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertNotSame(string5, string1);
      assertSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotNull(string5);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals((-1L), hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(2, hikariConfig1.maxPoolSize);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(2, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 11000)
  public void test110()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      boolean boolean0 = true;
      hikariConfig0.isRegisterMbeans = boolean0;
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      boolean boolean1 = true;
      String string0 = "";
      boolean boolean2 = true;
      boolean boolean3 = true;
      hikariConfig0.isRegisterMbeans = boolean3;
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setInitializationFailFast(boolean2);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      hikariConfig0.setConnectionCustomizerClassName(string0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      hikariConfig0.setRegisterMbeans(boolean1);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      boolean boolean4 = false;
      hikariConfig0.isInitializationFailFast = boolean4;
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      int int0 = 60;
      hikariConfig0.setAcquireRetries(int0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int1);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(int1 == int0);
      
      hikariConfig0.setDataSourceClassName(string0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      String string1 = "";
      hikariConfig0.addDataSourceProperty(string1, string1);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertSame(string1, string0);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      long long0 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      hikariConfig0.setIdleTimeout(long0);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      hikariConfig0.dataSourceProperties = properties0;
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(hikariConfig0.dataSourceProperties.isEmpty());
      assertEquals(0, hikariConfig0.dataSourceProperties.size());
      
      String string2 = hikariConfig0.getConnectionCustomizerClassName();
      assertEquals("", string2);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertNotNull(string2);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      long long1 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long1);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(long1 == long0);
      
      hikariConfig0.setTransactionIsolation(string1);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      String string3 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string3);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotNull(string3);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean5 = true;
      hikariConfig0.setInitializationFailFast(boolean5);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(boolean5 == boolean4);
      
      boolean boolean6 = false;
      Enumeration<Object> enumeration0 = properties0.keys();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(enumeration0);
      
      hikariConfig0.setUseInstrumentation(boolean6);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)properties0.entrySet();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(set0);
      
      hikariConfig0.setConnectionCustomizerClassName(string1);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotSame(string1, string3);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(string1.equals((Object)string3));
      
      boolean boolean7 = hikariConfig0.isInitializationFailFast();
      assertTrue(boolean7);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean0);
      
      boolean boolean8 = hikariConfig0.isRegisterMbeans();
      assertTrue(boolean8);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean0);
      assertFalse(boolean8 == boolean6);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean5);
      assertFalse(boolean8 == boolean4);
      
      hikariConfig0.setConnectionTestQuery(string2);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertSame(string2, string0);
      assertNotSame(string2, string3);
      assertSame(string2, string1);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(string2.equals((Object)string3));
      
      boolean boolean9 = hikariConfig0.isRegisterMbeans();
      assertTrue(boolean9);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean7);
      assertTrue(boolean9 == boolean3);
      assertFalse(boolean9 == boolean4);
      assertTrue(boolean9 == boolean0);
      assertTrue(boolean9 == boolean5);
      assertFalse(boolean9 == boolean6);
      assertTrue(boolean9 == boolean2);
      assertTrue(boolean9 == boolean8);
      
      int int2 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int2);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      long long2 = hikariConfig0.getIdleTimeout();
      assertEquals(0L, long2);
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals("", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("", hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
  }

  @Test(timeout = 11000)
  public void test111()  throws Throwable  {
      long long0 = 10L;
      System.setCurrentTimeMillis(long0);
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      int int0 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      String string0 = "javassist.bytecode.SignatureAttribute$ObjectType";
      hikariConfig0.transactionIsolationName = string0;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      DataSource dataSource0 = null;
      int int1 = (-998);
      hikariConfig0.dataSourceClassName = string0;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("javassist.bytecode.SignatureAttribute$ObjectType", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.connectionCustomizerClassName = string0;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("javassist.bytecode.SignatureAttribute$ObjectType", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("javassist.bytecode.SignatureAttribute$ObjectType", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.transactionIsolation = int1;
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-998), hikariConfig0.getTransactionIsolation());
      assertEquals("javassist.bytecode.SignatureAttribute$ObjectType", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("javassist.bytecode.SignatureAttribute$ObjectType", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setDataSource(dataSource0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-998), hikariConfig0.getTransactionIsolation());
      assertEquals("javassist.bytecode.SignatureAttribute$ObjectType", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("javassist.bytecode.SignatureAttribute$ObjectType", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-998), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      int int2 = hikariConfig0.getMaximumPoolSize();
      assertEquals(60, int2);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-998), hikariConfig0.getTransactionIsolation());
      assertEquals("javassist.bytecode.SignatureAttribute$ObjectType", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("javassist.bytecode.SignatureAttribute$ObjectType", hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-998), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      hikariConfig0.setCatalog(string0);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("javassist.bytecode.SignatureAttribute$ObjectType", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-998), hikariConfig0.getTransactionIsolation());
      assertEquals("javassist.bytecode.SignatureAttribute$ObjectType", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("javassist.bytecode.SignatureAttribute$ObjectType", hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-998), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      long long1 = hikariConfig0.getConnectionTimeout();
      assertEquals(5000L, long1);
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("javassist.bytecode.SignatureAttribute$ObjectType", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals((-998), hikariConfig0.getTransactionIsolation());
      assertEquals("javassist.bytecode.SignatureAttribute$ObjectType", hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals("javassist.bytecode.SignatureAttribute$ObjectType", hikariConfig0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-998), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(long1 == long0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid transaction isolation value: javassist.bytecode.SignatureAttribute$ObjectType
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test112()  throws Throwable  {
      String string0 = "";
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNotNull(hikariDataSource0);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      long long0 = 100L;
      hikariDataSource0.setConnectionTimeout(long0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(100L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      long long1 = hikariDataSource0.getAcquireRetryDelay();
      assertEquals(0L, long1);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(100L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(long1 == long0);
      
      String string1 = "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      hikariDataSource0.addDataSourceProperty(string1, object0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertSame(string1, string0);
      assertEquals(100L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNotNull(hikariConfig0);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      hikariDataSource0.copyState(hikariConfig0);
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(100L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      
      hikariDataSource0.idleTimeout = hikariConfig0.IDLE_TIMEOUT;
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      
      String string2 = null;
      hikariConfig0.setTransactionIsolation(string2);
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      
      DataSource dataSource0 = hikariDataSource0.getDataSource();
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(dataSource0);
      assertEquals(100L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      int int0 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      
      DataSource dataSource1 = hikariDataSource0.getDataSource();
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(dataSource1);
      assertEquals(100L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      int int1 = hikariConfig0.getAcquireIncrement();
      assertEquals(0, int1);
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      assertFalse(int1 == int0);
      
      String string3 = hikariDataSource0.getConnectionInitSql();
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(string3);
      assertEquals(100L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNotNull(properties0);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      
      Properties properties1 = hikariDataSource0.getDataSourceProperties();
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1, properties1.size());
      assertFalse(properties1.isEmpty());
      assertSame(properties1, properties0);
      assertNotNull(properties1);
      assertEquals(100L, hikariDataSource0.connectionTimeout);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      
      String string4 = hikariConfig0.getCatalog();
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(string4);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(100L, hikariConfig0.connectionTimeout);
  }

  @Test(timeout = 11000)
  public void test113()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Xs");
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      String string1 = "Xs";
      HikariConfig hikariConfig0 = new HikariConfig(string1);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNotNull(hikariConfig0);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(string1.equals((Object)string0));
      
      long long0 = 0L;
      hikariConfig0.dataSourceClassName = string0;
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      HikariConfig.IDLE_TIMEOUT = long0;
      long long1 = 16L;
      hikariConfig0.idleTimeout = HikariConfig.IDLE_TIMEOUT;
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      hikariConfig0.leakDetectionThreshold = long0;
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      hikariConfig0.connectionTimeout = long1;
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(16L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      hikariConfig0.validate();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNotSame(string1, string0);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(0L, hikariConfig0.idleTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(string1.equals((Object)string0));
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: 
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test114()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      EvoSuiteFile evoSuiteFile0 = null;
      EvoSuiteFile evoSuiteFile1 = null;
      hikariConfig0.isAutoCommit = hikariConfig0.isRegisterMbeans;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      long long0 = (-1420L);
      hikariConfig0.setIdleTimeout(long0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-1420L), hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1420L), hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      DataSource dataSource0 = null;
      hikariConfig0.dataSource = dataSource0;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-1420L), hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      String string0 = "{e<lm|?hsU";
      hikariConfig0.catalog = string0;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-1420L), hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("{e<lm|?hsU", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile1, hikariConfig0.connectionInitSql);
      assertFalse(boolean0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-1420L), hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("{e<lm|?hsU", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1420L), hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      hikariConfig0.connectionTimeout = (long) hikariConfig0.acquireRetries;
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals((-1420L), hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("{e<lm|?hsU", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      
      String string1 = "he";
      hikariConfig0.setDataSourceClassName(string1);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("he", hikariConfig0.getDataSourceClassName());
      assertEquals((-1420L), hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("{e<lm|?hsU", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertNotSame(string1, string0);
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1420L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(string1.equals((Object)string0));
      
      hikariConfig0.setAcquireRetries(hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("he", hikariConfig0.getDataSourceClassName());
      assertEquals((-1420L), hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("{e<lm|?hsU", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1420L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      long long1 = 352L;
      HikariConfig.MAX_LIFETIME = long1;
      boolean boolean1 = false;
      hikariConfig0.setInitializationFailFast(boolean1);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("he", hikariConfig0.getDataSourceClassName());
      assertEquals((-1420L), hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("{e<lm|?hsU", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(352L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1420L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = false;
      hikariConfig0.setInitializationFailFast(boolean2);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("he", hikariConfig0.getDataSourceClassName());
      assertEquals((-1420L), hikariConfig0.getIdleTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals("{e<lm|?hsU", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(352L, HikariConfig.MAX_LIFETIME);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1420L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(boolean2 == boolean0);
      
      hikariConfig0.setMinimumPoolSize(hikariConfig0.poolNumber);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("he", hikariConfig0.getDataSourceClassName());
      assertEquals((-1420L), hikariConfig0.getIdleTimeout());
      assertEquals("{e<lm|?hsU", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(352L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1420L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      String string2 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string2);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("he", hikariConfig0.getDataSourceClassName());
      assertEquals((-1420L), hikariConfig0.getIdleTimeout());
      assertEquals("{e<lm|?hsU", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(352L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1420L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      long long2 = hikariConfig0.getConnectionTimeout();
      assertEquals(3L, long2);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("he", hikariConfig0.getDataSourceClassName());
      assertEquals((-1420L), hikariConfig0.getIdleTimeout());
      assertEquals("{e<lm|?hsU", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(352L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1420L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      long long3 = hikariConfig0.getIdleTimeout();
      assertEquals((-1420L), long3);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("he", hikariConfig0.getDataSourceClassName());
      assertEquals((-1420L), hikariConfig0.getIdleTimeout());
      assertEquals("{e<lm|?hsU", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(352L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1420L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertTrue(long3 == long0);
      
      long long4 = hikariConfig0.getConnectionTimeout();
      assertEquals(3L, long4);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("he", hikariConfig0.getDataSourceClassName());
      assertEquals((-1420L), hikariConfig0.getIdleTimeout());
      assertEquals("{e<lm|?hsU", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(352L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1420L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(long4 == long2);
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      
      int int0 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int0);
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("he", hikariConfig0.getDataSourceClassName());
      assertEquals((-1420L), hikariConfig0.getIdleTimeout());
      assertEquals("{e<lm|?hsU", hikariConfig0.getCatalog());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(3L, hikariConfig0.getConnectionTimeout());
      assertEquals(3L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(352L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1420L), hikariConfig0.idleTimeout);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // idleTimeout cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test115()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNotNull(hikariDataSource0);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      
      long long0 = 1477L;
      hikariDataSource0.idleTimeout = long0;
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1477L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      String string0 = "leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.";
      hikariDataSource0.catalog = string0;
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1477L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      hikariDataSource0.setLeakDetectionThreshold(long0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1477L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1477L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1477L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1477L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      
      String string1 = "javassist.bytecode.stackmap.BasicBlock$JsrBytecode";
      String string2 = "--b>";
      int int0 = 2423;
      hikariDataSource0.transactionIsolation = int0;
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1477L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1477L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertEquals(2423, hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      
      String string3 = "";
      hikariDataSource0.setDataSourceClassName(string3);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1477L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1477L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertEquals(2423, hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals(1477L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1477L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2423, hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = hikariDataSource0.getTransactionIsolation();
      assertEquals(2423, int1);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1477L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1477L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertEquals(2423, hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1477L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1477L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2423, hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(int1 == int0);
      
      boolean boolean0 = false;
      hikariDataSource0.setRegisterMbeans(boolean0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1477L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1477L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertEquals(2423, hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1477L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(1477L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2423, hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      
      hikariDataSource0.setAutoCommit(boolean0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(1477L, hikariDataSource0.getLeakDetectionThreshold());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(1477L, hikariDataSource0.getIdleTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertEquals(2423, hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(1477L, hikariDataSource0.leakDetectionThreshold);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(1477L, hikariDataSource0.idleTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2423, hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      
      boolean boolean1 = false;
      hikariDataSource0.validate();
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertEquals(2423, hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2423, hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      
      hikariDataSource0.setRegisterMbeans(boolean0);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertEquals(2423, hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2423, hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      
      hikariDataSource0.setAutoCommit(boolean1);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertEquals(2423, hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2423, hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      
      String string4 = hikariDataSource0.toString();
      assertEquals("HikariDataSource (null)", string4);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals("leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.", hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertEquals(2423, hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotNull(string4);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2423, hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = "No connection wait timeout is set, this might cause an infinite wait.";
      hikariDataSource0.setCatalog(string5);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertEquals("No connection wait timeout is set, this might cause an infinite wait.", hikariDataSource0.getCatalog());
      assertEquals(2423, hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2423, hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = "BM?q1%MQ*bw74";
      hikariDataSource0.setCatalog(string6);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertEquals(2423, hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2423, hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      
      hikariDataSource0.setAutoCommit(boolean1);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertEquals(2423, hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2423, hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      
      int int2 = (-234);
      hikariDataSource0.setLoginTimeout(int2);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-234), hikariDataSource0.getLoginTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertEquals(2423, hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2423, hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      hikariDataSource0.setConnectionTestQuery(string1);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-234), hikariDataSource0.getLoginTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertEquals("javassist.bytecode.stackmap.BasicBlock$JsrBytecode", hikariDataSource0.getConnectionTestQuery());
      assertEquals(2423, hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2423, hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      
      String string7 = hikariDataSource0.getConnectionCustomizerClassName();
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-234), hikariDataSource0.getLoginTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertEquals("javassist.bytecode.stackmap.BasicBlock$JsrBytecode", hikariDataSource0.getConnectionTestQuery());
      assertEquals(2423, hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(string7);
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2423, hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      
      boolean boolean2 = hikariDataSource0.isRegisterMbeans();
      assertFalse(boolean2);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-234), hikariDataSource0.getLoginTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertEquals("javassist.bytecode.stackmap.BasicBlock$JsrBytecode", hikariDataSource0.getConnectionTestQuery());
      assertEquals(2423, hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2423, hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      long long1 = hikariDataSource0.getAcquireRetryDelay();
      assertEquals(0L, long1);
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals((-234), hikariDataSource0.getLoginTimeout());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertEquals("BM?q1%MQ*bw74", hikariDataSource0.getCatalog());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals("", hikariDataSource0.getDataSourceClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertFalse(hikariDataSource0.isAutoCommit());
      assertEquals("javassist.bytecode.stackmap.BasicBlock$JsrBytecode", hikariDataSource0.getConnectionTestQuery());
      assertEquals(2423, hikariDataSource0.getTransactionIsolation());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertFalse(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2423, hikariDataSource0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 11000)
  public void test116()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNotNull(hikariConfig0);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      EvoSuiteFile evoSuiteFile0 = null;
      int int0 = (-2147267624);
      hikariConfig0.maxPoolSize = int0;
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-2147267624), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, hikariConfig0.poolName);
      assertFalse(boolean0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-2147267624), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-2147267624), hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      boolean boolean1 = false;
      hikariConfig0.isAutoCommit = boolean1;
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-2147267624), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      
      long long0 = (-1L);
      hikariConfig0.setLeakDetectionThreshold(long0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-2147267624), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-2147267624), hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      
      long long1 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long1);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-2147267624), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-2147267624), hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(long1 == long0);
      
      long long2 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long2);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-2147267624), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-2147267624), hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      
      int int1 = hikariConfig0.getMaximumPoolSize();
      assertEquals((-2147267624), int1);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-2147267624), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-2147267624), hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(int1 == int0);
      
      int int2 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int2);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-2147267624), hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-1L), hikariConfig0.getLeakDetectionThreshold());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1L), hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-2147267624), hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      HikariConfig hikariConfig1 = null;
      try {
        hikariConfig1 = new HikariConfig(hikariConfig0.dataSourceClassName);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 11000)
  public void test117()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotNull(hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      HikariConfig.IDLE_TIMEOUT = hikariConfig0.CONNECTION_TIMEOUT;
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      long long0 = hikariConfig0.getConnectionTimeout();
      assertEquals(5000L, long0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      long long1 = 0L;
      hikariConfig0.connectionTimeout = long1;
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(iConnectionCustomizer0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "bad filed access";
      int int0 = 187;
      hikariConfig0.setMinimumPoolSize(int0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(187, hikariConfig0.getMinimumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.connectionTimeout);
      assertEquals(187, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      hikariConfig0.setPoolName(string0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(187, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("bad filed access", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.connectionTimeout);
      assertEquals(187, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      
      int int1 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int1);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(187, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("bad filed access", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.connectionTimeout);
      assertEquals(187, hikariConfig0.minPoolSize);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(int1 == int0);
      
      hikariConfig0.minPoolSize = int1;
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("bad filed access", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      IConnectionCustomizer iConnectionCustomizer1 = hikariConfig0.getConnectionCustomizer();
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("bad filed access", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(iConnectionCustomizer1);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      hikariConfig0.leakDetectionThreshold = long0;
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("bad filed access", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      hikariConfig0.setTransactionIsolation(string0);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("bad filed access", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      IConnectionCustomizer iConnectionCustomizer2 = hikariConfig0.getConnectionCustomizer();
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("bad filed access", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(iConnectionCustomizer2);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      
      long long2 = hikariConfig0.getConnectionTimeout();
      assertEquals(0L, long2);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("bad filed access", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      
      HikariConfig hikariConfig1 = new HikariConfig();
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(5000L, hikariConfig1.getIdleTimeout());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariConfig1.getPoolName());
      assertEquals(10, hikariConfig1.getMinimumPoolSize());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(5000L, hikariConfig1.getConnectionTimeout());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0L, hikariConfig1.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotNull(hikariConfig1);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig1.leakDetectionThreshold);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(5000L, hikariConfig1.idleTimeout);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig1.connectionTimeout);
      assertEquals(10, hikariConfig1.minPoolSize);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      int int2 = 60;
      HikariConfig.poolNumber = int2;
      hikariConfig0.copyState(hikariConfig1);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("bad filed access", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("bad filed access", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig1.getMinimumPoolSize());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(5000L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig1.leakDetectionThreshold);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals((-1), hikariConfig1.minPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      hikariConfig0.copyState(hikariConfig1);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("bad filed access", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("bad filed access", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig1.getMinimumPoolSize());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(5000L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNotSame(hikariConfig1, hikariConfig0);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig1.leakDetectionThreshold);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals((-1), hikariConfig1.minPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      
      IConnectionCustomizer iConnectionCustomizer3 = hikariConfig0.getConnectionCustomizer();
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("bad filed access", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertNull(iConnectionCustomizer3);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      
      long long3 = hikariConfig0.getConnectionTimeout();
      assertEquals(0L, long3);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("bad filed access", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertTrue(long3 == long2);
      assertFalse(long3 == long0);
      assertTrue(long3 == long1);
      
      int int3 = hikariConfig1.getTransactionIsolation();
      assertEquals((-1), int3);
      assertEquals("bad filed access", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig1.getMinimumPoolSize());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(5000L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig1.leakDetectionThreshold);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals((-1), hikariConfig1.minPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = hikariConfig1.getTransactionIsolation();
      assertEquals((-1), int4);
      assertEquals("bad filed access", hikariConfig1.getPoolName());
      assertNull(hikariConfig1.getConnectionTestQuery());
      assertNull(hikariConfig1.getConnectionInitSql());
      assertEquals(60, hikariConfig1.getMaximumPoolSize());
      assertTrue(hikariConfig1.isAutoCommit());
      assertTrue(hikariConfig1.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig1.getMinimumPoolSize());
      assertEquals(3, hikariConfig1.getAcquireRetries());
      assertEquals(5000L, hikariConfig1.getLeakDetectionThreshold());
      assertFalse(hikariConfig1.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig1.getMaxLifetime());
      assertEquals(0L, hikariConfig1.getConnectionTimeout());
      assertNull(hikariConfig1.getConnectionCustomizerClassName());
      assertEquals(600000L, hikariConfig1.getIdleTimeout());
      assertEquals((-1), hikariConfig1.getTransactionIsolation());
      assertNull(hikariConfig1.getCatalog());
      assertEquals(0L, hikariConfig1.getAcquireRetryDelay());
      assertNull(hikariConfig1.getDataSourceClassName());
      assertFalse(hikariConfig1.isInitializationFailFast());
      assertEquals(0, hikariConfig1.getAcquireIncrement());
      assertNotSame(hikariConfig1, hikariConfig0);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(5000L, hikariConfig1.leakDetectionThreshold);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig1.idleTimeout);
      assertTrue(hikariConfig1.isAutoCommit);
      assertEquals(1800000L, hikariConfig1.maxLifetime);
      assertEquals((-1), hikariConfig1.transactionIsolation);
      assertEquals((-1), hikariConfig1.minPoolSize);
      assertEquals(3, hikariConfig1.acquireRetries);
      assertFalse(hikariConfig1.isRegisterMbeans);
      assertTrue(hikariConfig1.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig1.isInitializationFailFast);
      assertEquals(60, hikariConfig1.maxPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(0L, hikariConfig1.connectionTimeout);
      assertFalse(hikariConfig1.equals((Object)hikariConfig0));
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      
      long long4 = hikariConfig0.getConnectionTimeout();
      assertEquals(0L, long4);
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals((-1), hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("bad filed access", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotSame(hikariConfig0, hikariConfig1);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals((-1), hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.equals((Object)hikariConfig1));
      assertFalse(long4 == long0);
      assertTrue(long4 == long3);
      assertTrue(long4 == long1);
      assertTrue(long4 == long2);
      
      // Undeclared exception!
      try { 
        hikariConfig1.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test118()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNotNull(hikariConfig0);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      String string0 = "m?i[O<\\Z!:vq";
      hikariConfig0.setDataSourceClassName(string0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      String string1 = "javassist.compiler.ast.Keyword";
      hikariConfig0.dataSourceClassName = string1;
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      boolean boolean0 = true;
      hikariConfig0.setAutoCommit(boolean0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      hikariConfig0.leakDetectionThreshold = hikariConfig0.IDLE_TIMEOUT;
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setAcquireRetryDelay(hikariConfig0.maxPoolSize);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      boolean boolean1 = true;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertNotNull(hikariDataSource0);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariDataSource0.getCatalog());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      
      hikariConfig0.isJdbc4connectionTest = boolean1;
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      hikariConfig0.setAcquireRetryDelay(hikariConfig0.poolNumber);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      boolean boolean2 = true;
      long long0 = (-14L);
      hikariConfig0.maxLifetime = long0;
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals((-14L), hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      
      String string2 = "maxPoolSize cannot be negative";
      Object object0 = hikariConfig0.dataSourceProperties.put(string2, string0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals((-14L), hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNull(object0);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-14L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      hikariConfig0.setRegisterMbeans(boolean2);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("javassist.compiler.ast.Keyword", hikariConfig0.getDataSourceClassName());
      assertEquals((-14L), hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-14L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      hikariConfig0.setDataSourceClassName(string0);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-14L), hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-14L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      long long1 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long1);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-14L), hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-14L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(long1 == long0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = hikariConfig0.dataSourceProperties.put(hikariConfig0.dataSourceClassName, object1);
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("m?i[O<\\Z!:vq", hikariConfig0.getDataSourceClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-14L), hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(600000L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(object2);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-14L), hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maxLifetime cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test119()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotNull(hikariConfig0);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      boolean boolean0 = false;
      Properties properties0 = null;
      hikariConfig0.dataSourceProperties = properties0;
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      long long0 = 2057L;
      hikariConfig0.maxLifetime = long0;
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(2057L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      hikariConfig0.setRegisterMbeans(boolean0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(2057L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(2057L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      int int0 = 4483;
      hikariConfig0.acquireRetries = int0;
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(2057L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(4483, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      Properties properties1 = hikariConfig0.getDataSourceProperties();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(2057L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(4483, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(properties1);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(2057L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(4483, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      hikariConfig0.isAutoCommit = boolean0;
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(2057L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(4483, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      String string0 = hikariConfig0.getPoolName();
      assertEquals("HikariPool-0", string0);
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(2057L, hikariConfig0.getMaxLifetime());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertFalse(hikariConfig0.isAutoCommit());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(4483, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotNull(string0);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(2057L, hikariConfig0.maxLifetime);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(4483, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isAutoCommit);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test120()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNotNull(hikariConfig0);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      String string0 = "C%ticfZJ9L05x9I";
      hikariConfig0.catalog = string0;
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      
      boolean boolean0 = hikariConfig0.isInitializationFailFast();
      assertFalse(boolean0);
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      boolean boolean1 = hikariConfig0.isJdbc4ConnectionTest();
      assertTrue(boolean1);
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(boolean1 == boolean0);
      
      hikariConfig0.setConnectionCustomizerClassName(string0);
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNotNull(hikariDataSource0);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      
      hikariConfig0.setConnectionTestQuery(hikariDataSource0.catalog);
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      
      hikariConfig0.setDataSource(hikariDataSource0);
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-1", hikariDataSource0.getPoolName());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getCatalog());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      
      String string1 = "~Sgaw_.FT!\\WRa48p";
      long long0 = 2253L;
      hikariConfig0.setIdleTimeout(long0);
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2253L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(2253L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      boolean boolean2 = hikariConfig0.isJdbc4ConnectionTest();
      assertTrue(boolean2);
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2253L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(2253L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2253L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(2253L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      int int0 = hikariConfig0.getAcquireRetries();
      assertEquals(3, int0);
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(2253L, hikariConfig0.getIdleTimeout());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(2253L, hikariConfig0.idleTimeout);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      hikariConfig0.validate();
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      
      long long1 = 1L;
      int int1 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int1);
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(int1 == int0);
      
      hikariConfig0.setAcquireRetryDelay(long1);
      assertEquals("C%ticfZJ9L05x9I", hikariConfig0.getCatalog());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isAutoCommit);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(long1 == long0);
      
      String string2 = "y>=P";
      String string3 = "<Ou";
      hikariConfig0.catalog = string3;
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("<Ou", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      
      hikariConfig0.poolName = string2;
      assertEquals("y>=P", hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals("<Ou", hikariConfig0.getCatalog());
      assertNull(hikariConfig0.getConnectionInitSql());
      
      // Undeclared exception!
      try { 
        hikariConfig0.addDataSourceProperty(string0, hikariConfig0.dataSourceClassName);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test121()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNotNull(hikariConfig0);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      String string0 = "Invalid transaction isolation value: ";
      String string1 = "fatal";
      int int0 = (-243);
      hikariConfig0.acquireRetries = int0;
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-243), hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      hikariConfig0.connectionInitSql = string1;
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-243), hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("fatal", hikariConfig0.getConnectionInitSql());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      hikariConfig0.poolName = string0;
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("Invalid transaction isolation value: ", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-243), hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("fatal", hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      
      int int1 = hikariConfig0.getAcquireRetries();
      assertEquals((-243), int1);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("Invalid transaction isolation value: ", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-243), hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals("fatal", hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-243), hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(int1 == int0);
      
      hikariConfig0.setIdleTimeout(int1);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("Invalid transaction isolation value: ", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-243), hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-243L), hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("fatal", hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-243L), hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-243), hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(int1 == int0);
      
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("Invalid transaction isolation value: ", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-243), hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-243L), hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("fatal", hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(iConnectionCustomizer0);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-243L), hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-243), hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      int int2 = hikariConfig0.getTransactionIsolation();
      assertEquals((-1), int2);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals("Invalid transaction isolation value: ", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals((-243), hikariConfig0.getAcquireRetries());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals((-243L), hikariConfig0.getIdleTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals("fatal", hikariConfig0.getConnectionInitSql());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals((-243L), hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals((-243), hikariConfig0.acquireRetries);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-32);
      byteArray0[0] = byte0;
      byte byte1 = (byte)119;
      byteArray0[1] = byte1;
      byte byte2 = (byte)75;
      byteArray0[2] = byte2;
      byte byte3 = (byte)9;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-125);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-77);
      byteArray0[5] = byte5;
      byte byte6 = (byte)61;
      byteArray0[6] = byte6;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)119, (byte)75, (byte)9, (byte) (-125), (byte) (-77), (byte)61}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile1, string0);
      assertFalse(boolean1);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test122()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Xs");
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      String string1 = "Xs";
      HikariConfig hikariConfig0 = new HikariConfig(string1);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotNull(hikariConfig0);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(string1.equals((Object)string0));
      
      long long0 = 0L;
      hikariConfig0.dataSourceClassName = string0;
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      
      hikariConfig0.connectionTimeout = HikariConfig.IDLE_TIMEOUT;
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(600000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      
      hikariConfig0.setConnectionTimeout(long0);
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(string1, string0);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2147483647L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(string1.equals((Object)string0));
      
      hikariConfig0.validate();
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(2147483647L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals("", hikariConfig0.getDataSourceClassName());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNotSame(string1, string0);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(2147483647L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertFalse(string1.equals((Object)string0));
      
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: 
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test123()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNotNull(hikariConfig0);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      
      hikariConfig0.isRegisterMbeans = hikariConfig0.isAutoCommit;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      int int0 = 0;
      hikariConfig0.transactionIsolation = int0;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      hikariConfig0.minPoolSize = hikariConfig0.transactionIsolation;
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      
      String string0 = "java/lang/Class";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      long long0 = 0L;
      int int1 = (-1896);
      hikariConfig0.setAcquireRetryDelay(long0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(0, hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      
      long long1 = 4L;
      HikariConfig.IDLE_TIMEOUT = long1;
      hikariConfig0.setMaxLifetime(long0);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(4L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertFalse(long0 == long1);
      
      int int2 = hikariConfig0.maxPoolSize;
      assertEquals(60, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      long long2 = 0L;
      int int3 = hikariConfig0.acquireRetries;
      assertEquals(3, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      hikariConfig0.setDataSourceClassName(hikariConfig0.transactionIsolationName);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(4L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(4L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      
      int int4 = hikariConfig0.getTransactionIsolation();
      assertEquals(0, int4);
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertEquals(0, hikariConfig0.getMinimumPoolSize());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(0L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals(0, hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(0L, hikariConfig0.maxLifetime);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertEquals(0, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(4L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(0, hikariConfig0.transactionIsolation);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
  }

  @Test(timeout = 11000)
  public void test124()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNotNull(hikariConfig0);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      String string0 = hikariConfig0.getDataSourceClassName();
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(string0);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      boolean boolean0 = false;
      hikariConfig0.setInitializationFailFast(boolean0);
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      int int0 = 10;
      hikariConfig0.maxPoolSize = int0;
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      
      hikariConfig0.setPoolName(string0);
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      boolean boolean1 = true;
      hikariConfig0.setRegisterMbeans(boolean1);
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(boolean1 == boolean0);
      
      long long0 = hikariConfig0.getIdleTimeout();
      assertEquals(600000L, long0);
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      
      String string1 = hikariConfig0.getPoolName();
      assertNull(hikariConfig0.getPoolName());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertTrue(hikariConfig0.isRegisterMbeans());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertEquals(10, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertNull(string1);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isRegisterMbeans);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(1, HikariConfig.poolNumber);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(10, hikariConfig0.maxPoolSize);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
  }

  @Test(timeout = 11000)
  public void test125()  throws Throwable  {
      String string0 = "";
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(5000L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNotNull(hikariDataSource0);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(5000L, hikariDataSource0.connectionTimeout);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      
      long long0 = 100L;
      hikariDataSource0.setConnectionTimeout(long0);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(100L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      
      long long1 = hikariDataSource0.getAcquireRetryDelay();
      assertEquals(0L, long1);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(100L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      assertFalse(long1 == long0);
      
      String string1 = "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      hikariDataSource0.addDataSourceProperty(string1, object0);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertSame(string1, string0);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(100L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertEquals(1, HikariConfig.poolNumber);
      
      HikariConfig hikariConfig0 = new HikariConfig();
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(5000L, hikariConfig0.getConnectionTimeout());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-1", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotNull(hikariConfig0);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(5000L, hikariConfig0.connectionTimeout);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      hikariDataSource0.copyState(hikariConfig0);
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(100L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      hikariDataSource0.idleTimeout = hikariConfig0.IDLE_TIMEOUT;
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      
      String string2 = null;
      hikariConfig0.setTransactionIsolation(string2);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      DataSource dataSource0 = hikariDataSource0.getDataSource();
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(dataSource0);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(100L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      DataSource dataSource1 = hikariDataSource0.getDataSource();
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertNull(dataSource1);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(100L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      int int0 = hikariConfig0.getAcquireIncrement();
      assertEquals(0, int0);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNotNull(properties0);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      Properties properties1 = hikariDataSource0.getDataSourceProperties();
      assertEquals(3, hikariDataSource0.getAcquireRetries());
      assertEquals(0L, hikariDataSource0.getLeakDetectionThreshold());
      assertEquals(0, hikariDataSource0.getAcquireIncrement());
      assertEquals(1800000L, hikariDataSource0.getMaxLifetime());
      assertEquals(600000L, hikariDataSource0.getIdleTimeout());
      assertEquals(60, hikariDataSource0.getMaximumPoolSize());
      assertNull(hikariDataSource0.getConnectionInitSql());
      assertNull(hikariDataSource0.getConnectionTestQuery());
      assertFalse(hikariDataSource0.isInitializationFailFast());
      assertTrue(hikariDataSource0.isJdbc4ConnectionTest());
      assertEquals(0, hikariDataSource0.getLoginTimeout());
      assertEquals(10, hikariDataSource0.getMinimumPoolSize());
      assertEquals(0L, hikariDataSource0.getAcquireRetryDelay());
      assertEquals(100L, hikariDataSource0.getConnectionTimeout());
      assertNull(hikariDataSource0.getDataSourceClassName());
      assertNull(hikariDataSource0.getCatalog());
      assertNull(hikariDataSource0.getConnectionCustomizerClassName());
      assertEquals("HikariPool-0", hikariDataSource0.getPoolName());
      assertFalse(hikariDataSource0.isRegisterMbeans());
      assertTrue(hikariDataSource0.isAutoCommit());
      assertEquals((-1), hikariDataSource0.getTransactionIsolation());
      assertEquals(1, properties1.size());
      assertFalse(properties1.isEmpty());
      assertSame(properties1, properties0);
      assertNotNull(properties1);
      assertEquals((-1), hikariDataSource0.transactionIsolation);
      assertTrue(hikariDataSource0.isAutoCommit);
      assertEquals(0L, hikariDataSource0.leakDetectionThreshold);
      assertEquals(100L, hikariDataSource0.connectionTimeout);
      assertEquals(10, hikariDataSource0.minPoolSize);
      assertEquals(60, hikariDataSource0.maxPoolSize);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertEquals(1800000L, hikariDataSource0.maxLifetime);
      assertEquals(600000L, hikariDataSource0.idleTimeout);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertFalse(hikariDataSource0.isRegisterMbeans);
      assertFalse(hikariDataSource0.isInitializationFailFast);
      assertTrue(hikariDataSource0.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(3, hikariDataSource0.acquireRetries);
      
      String string3 = hikariConfig0.getCatalog();
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertNull(string3);
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      
      long long2 = hikariConfig0.getAcquireRetryDelay();
      assertEquals(0L, long2);
      assertEquals(0L, hikariConfig0.getAcquireRetryDelay());
      assertEquals(10, hikariConfig0.getMinimumPoolSize());
      assertNull(hikariConfig0.getConnectionCustomizerClassName());
      assertFalse(hikariConfig0.isRegisterMbeans());
      assertEquals(60, hikariConfig0.getMaximumPoolSize());
      assertTrue(hikariConfig0.isAutoCommit());
      assertNull(hikariConfig0.getCatalog());
      assertEquals(0L, hikariConfig0.getLeakDetectionThreshold());
      assertEquals(0, hikariConfig0.getAcquireIncrement());
      assertEquals(3, hikariConfig0.getAcquireRetries());
      assertNull(hikariConfig0.getConnectionTestQuery());
      assertNull(hikariConfig0.getConnectionInitSql());
      assertTrue(hikariConfig0.isJdbc4ConnectionTest());
      assertEquals((-1), hikariConfig0.getTransactionIsolation());
      assertEquals("HikariPool-0", hikariConfig0.getPoolName());
      assertEquals(1800000L, hikariConfig0.getMaxLifetime());
      assertEquals(100L, hikariConfig0.getConnectionTimeout());
      assertNull(hikariConfig0.getDataSourceClassName());
      assertEquals(600000L, hikariConfig0.getIdleTimeout());
      assertFalse(hikariConfig0.isInitializationFailFast());
      assertFalse(hikariConfig0.isRegisterMbeans);
      assertEquals(600000L, HikariConfig.IDLE_TIMEOUT);
      assertFalse(hikariConfig0.isInitializationFailFast);
      assertTrue(hikariConfig0.isJdbc4connectionTest);
      assertEquals(2, HikariConfig.poolNumber);
      assertEquals(0L, hikariConfig0.leakDetectionThreshold);
      assertEquals(3, hikariConfig0.acquireRetries);
      assertEquals(100L, hikariConfig0.connectionTimeout);
      assertTrue(hikariConfig0.isAutoCommit);
      assertEquals(10, hikariConfig0.minPoolSize);
      assertEquals(5000L, HikariConfig.CONNECTION_TIMEOUT);
      assertEquals(60, hikariConfig0.maxPoolSize);
      assertEquals((-1), hikariConfig0.transactionIsolation);
      assertEquals(1800000L, hikariConfig0.maxLifetime);
      assertEquals(1800000L, HikariConfig.MAX_LIFETIME);
      assertEquals(600000L, hikariConfig0.idleTimeout);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }
}
