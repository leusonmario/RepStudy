/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 08:21:52 GMT 2021
 */

package org.opentripplanner.routing.spt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.PrecisionModel;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.TreeMap;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.onebusaway.gtfs.model.Stop;
import org.opentripplanner.common.model.GenericLocation;
import org.opentripplanner.graph_builder.annotation.StopNotLinkedForTransfers;
import org.opentripplanner.routing.bike_rental.BikeRentalStation;
import org.opentripplanner.routing.core.OptimizeType;
import org.opentripplanner.routing.core.RoutingRequest;
import org.opentripplanner.routing.core.State;
import org.opentripplanner.routing.core.TraversalRequirements;
import org.opentripplanner.routing.core.TraverseMode;
import org.opentripplanner.routing.core.TraverseModeSet;
import org.opentripplanner.routing.edgetype.StreetBikeRentalLink;
import org.opentripplanner.routing.edgetype.StreetEdge;
import org.opentripplanner.routing.edgetype.StreetTraversalPermission;
import org.opentripplanner.routing.graph.Graph;
import org.opentripplanner.routing.graph.Vertex;
import org.opentripplanner.routing.impl.DefaultStreetVertexIndexFactory;
import org.opentripplanner.routing.impl.StreetVertexIndexServiceImpl;
import org.opentripplanner.routing.location.StreetLocation;
import org.opentripplanner.routing.services.StreetVertexIndexFactory;
import org.opentripplanner.routing.spt.GraphPath;
import org.opentripplanner.routing.spt.MultiShortestPathTree;
import org.opentripplanner.routing.spt.SerializedObjectSupporter;
import org.opentripplanner.routing.vertextype.BikeRentalStationVertex;
import org.opentripplanner.routing.vertextype.IntersectionVertex;
import org.opentripplanner.routing.vertextype.OnboardDepartVertex;
import org.opentripplanner.routing.vertextype.ParkAndRideVertex;
import org.opentripplanner.routing.vertextype.TransitStop;
import org.slf4j.Logger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiShortestPathTree_ESTest extends MultiShortestPathTree_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.LEG_SWITCH;
      OptimizeType optimizeType0 = OptimizeType.TRANSFERS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertNotNull(routingRequest0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      State state0 = serializedObjectSupporter0.deserializeObjectState337();
      assertNull(state0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.LEG_SWITCH;
      OptimizeType optimizeType0 = OptimizeType.QUICK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      IntersectionVertex intersectionVertex0 = serializedObjectSupporter0.deserializeObjectVertex7();
      assertEquals(40.726119, intersectionVertex0.getY(), 0.01);
      assertEquals("osm:node:42436784", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals((-74.001597), intersectionVertex0.getLon(), 0.01);
      assertEquals("osm:node:42436784", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(1L, intersectionVertex0.getserialVersionUID());
      assertFalse(intersectionVertex0.getfreeFlowing());
      assertEquals(40.726119, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.gettrafficLight());
      assertEquals((-74.001597), intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertNotNull(intersectionVertex0);
      assertTrue(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      
      State state0 = multiShortestPathTree0.getState(intersectionVertex0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(40.726119, intersectionVertex0.getY(), 0.01);
      assertEquals("osm:node:42436784", intersectionVertex0.getLabel());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals((-74.001597), intersectionVertex0.getLon(), 0.01);
      assertEquals("osm:node:42436784", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(1L, intersectionVertex0.getserialVersionUID());
      assertFalse(intersectionVertex0.getfreeFlowing());
      assertEquals(40.726119, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.gettrafficLight());
      assertEquals((-74.001597), intersectionVertex0.getX(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertNull(state0);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Class<TraverseMode> class0 = TraverseMode.class;
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.stateSets;
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      multiShortestPathTree0.setstateSets(map0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      State state0 = serializedObjectSupporter0.deserializeObjectState826();
      assertNull(state0);
      
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertNotNull(routingRequest0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      
      routingRequest0.otherThanPreferredRoutesPenalty = routingRequest0.elevatorHopTime;
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      
      double double0 = routingRequest0.getTransitSpeedUpperBound();
      assertEquals(84.0, double0, 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      
      Logger logger0 = multiShortestPathTree0.getLOG();
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(logger0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      
      System.setCurrentTimeMillis(routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      
      Graph graph0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      StreetVertexIndexServiceImpl streetVertexIndexServiceImpl0 = null;
      try {
        streetVertexIndexServiceImpl0 = new StreetVertexIndexServiceImpl(graph0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.impl.StreetVertexIndexServiceImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRAINISH;
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      
      boolean boolean0 = false;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      
      HashMap<Vertex, List<State>> hashMap0 = new HashMap<Vertex, List<State>>(routingRequest0.bikeSwitchCost, routingRequest0.bikeRentalDropoffCost);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) hashMap0;
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, multiShortestPathTree0.stateSets.size());
      assertTrue(multiShortestPathTree0.stateSets.isEmpty());
      
      double double0 = 0.0;
      double double1 = 1539.78;
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(routingRequest0.routerId, routingRequest0.heuristicWeight, double1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertNotNull(onboardDepartVertex0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      
      Vector<State> vector0 = new Vector<State>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      State state0 = null;
      boolean boolean1 = vector0.add(state0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      
      List<State> list0 = hashMap0.put(onboardDepartVertex0, vector0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertNull(list0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      
      int int0 = (-291);
      String string0 = multiShortestPathTree0.toString();
      assertEquals("MultiSPT(1 vertices)", string0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotNull(string0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      
      Integer integer0 = new Integer(routingRequest0.numItineraries);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      
      List<State> list1 = multiShortestPathTree0.getStates(onboardDepartVertex0);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertNotNull(list1);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(onboardDepartVertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRAINISH;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      int int0 = 2049;
      HashMap<Vertex, List<State>> hashMap0 = new HashMap<Vertex, List<State>>(int0, routingRequest0.bikeRentalDropoffCost);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) hashMap0;
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, multiShortestPathTree0.stateSets.size());
      assertTrue(multiShortestPathTree0.stateSets.isEmpty());
      
      double double0 = 0.0;
      String string0 = "";
      double double1 = 1539.78;
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, routingRequest0.heuristicWeight, double1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertNotNull(onboardDepartVertex0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      Vector<State> vector0 = new Vector<State>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      State state0 = null;
      boolean boolean0 = vector0.add(state0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      List<State> list0 = hashMap0.put(onboardDepartVertex0, vector0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertNull(list0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      routingRequest0.heuristicWeight = double0;
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      routingRequest0.maxTransfers = routingRequest0.useUnpreferredRoutesPenalty;
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      multiShortestPathTree0.dump();
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotNull(set0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      int int1 = multiShortestPathTree0.getVertexCount();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      List<State> list1 = multiShortestPathTree0.getStates(onboardDepartVertex0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertNotNull(list1);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(onboardDepartVertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRAINISH;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      multiShortestPathTree0.dump();
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      HashMap<Vertex, List<State>> hashMap0 = new HashMap<Vertex, List<State>>(routingRequest0.otherThanPreferredRoutesPenalty, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) hashMap0;
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, multiShortestPathTree0.stateSets.size());
      assertTrue(multiShortestPathTree0.stateSets.isEmpty());
      
      String string0 = "";
      double double0 = 1561.8563590604726;
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, routingRequest0.heuristicWeight, double0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(1561.8563590604726, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(1561.8563590604726, onboardDepartVertex0.getY(), 0.01);
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertNotNull(onboardDepartVertex0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      Vector<State> vector0 = new Vector<State>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      List<State> list0 = hashMap0.put(onboardDepartVertex0, vector0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(1561.8563590604726, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(1561.8563590604726, onboardDepartVertex0.getY(), 0.01);
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNull(list0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      routingRequest0.heuristicWeight = (double) routingRequest0.maxTransfers;
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      int int0 = (-291);
      routingRequest0.maxTransfers = int0;
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      String string1 = multiShortestPathTree0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("MultiSPT(1 vertices)", string1);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      multiShortestPathTree0.dump();
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotNull(set0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.getstateSets();
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotNull(map0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      State state0 = multiShortestPathTree0.getState(onboardDepartVertex0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(1561.8563590604726, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(1561.8563590604726, onboardDepartVertex0.getY(), 0.01);
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertNotSame(string0, string1);
      assertNull(state0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotNull(collection0);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      
      multiShortestPathTree0.dump();
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Map<Vertex, List<State>> map0 = null;
      multiShortestPathTree0.setstateSets(map0);
      Map<Vertex, List<State>> map1 = multiShortestPathTree0.getstateSets();
      assertNull(map1);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getAllStates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.isValid());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getCableCar());
      assertNotNull(traverseModeSet0);
      
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.isValid());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getCableCar());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertNotNull(routingRequest0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.isValid());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getCableCar());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(0, int0);
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.isValid());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getCableCar());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals("MultiSPT(0 vertices)", string0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(string0);
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(0, int0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      multiShortestPathTree0.dump();
      assertEquals(0, multiShortestPathTree0.getVertexCount());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.RAIL;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.stateSets;
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      multiShortestPathTree0.setstateSets(map0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      State state0 = serializedObjectSupporter0.deserializeObjectState867();
      assertNull(state0);
      
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      OptimizeType optimizeType0 = OptimizeType.TRIANGLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertNotNull(routingRequest0);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.getstateSets();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      
      multiShortestPathTree0.setstateSets(map0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      TraverseMode[] traverseModeArray0 = new TraverseMode[2];
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      traverseModeArray0[0] = traverseMode0;
      TraverseMode traverseMode1 = TraverseMode.TRAINISH;
      traverseModeArray0[1] = traverseMode1;
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(traverseModeArray0);
      assertFalse(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getDriving());
      assertEquals(7392, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getTrainish());
      assertNotNull(traverseModeSet0);
      assertEquals(2, traverseModeArray0.length);
      
      List<TraverseMode> list0 = traverseModeSet0.getModes();
      assertFalse(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getDriving());
      assertEquals(7392, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getTrainish());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertNotNull(list0);
      assertEquals(2, traverseModeArray0.length);
      assertTrue(list0.contains(traverseMode0));
      
      TraverseModeSet traverseModeSet1 = new TraverseModeSet(list0);
      assertFalse(traverseModeSet1.equals((Object)traverseModeSet0));
      assertFalse(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getDriving());
      assertEquals(7392, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getTrainish());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.isValid());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.isTransit());
      assertFalse(traverseModeSet1.getBicycle());
      assertEquals(8176, traverseModeSet1.getMask());
      assertFalse(traverseModeSet1.getWalk());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.getTrainish());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getFerry());
      assertFalse(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getDriving());
      assertNotNull(traverseModeSet1);
      assertEquals(2, traverseModeArray0.length);
      assertTrue(list0.contains(traverseMode0));
      
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet1);
      assertFalse(traverseModeSet0.equals((Object)traverseModeSet1));
      assertFalse(traverseModeSet1.equals((Object)traverseModeSet0));
      assertFalse(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getDriving());
      assertEquals(7392, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getTrainish());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.isValid());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.isTransit());
      assertFalse(traverseModeSet1.getBicycle());
      assertEquals(8176, traverseModeSet1.getMask());
      assertFalse(traverseModeSet1.getWalk());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.getTrainish());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getFerry());
      assertFalse(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertNotNull(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2, traverseModeArray0.length);
      assertTrue(list0.contains(traverseMode0));
      
      RoutingRequest routingRequest1 = routingRequest0.clone();
      assertFalse(traverseModeSet0.equals((Object)traverseModeSet1));
      assertFalse(traverseModeSet1.equals((Object)traverseModeSet0));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertFalse(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getDriving());
      assertEquals(7392, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getTrainish());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.isValid());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.isTransit());
      assertFalse(traverseModeSet1.getBicycle());
      assertEquals(8176, traverseModeSet1.getMask());
      assertFalse(traverseModeSet1.getWalk());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.getTrainish());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getFerry());
      assertFalse(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertNotSame(traverseModeSet0, traverseModeSet1);
      assertNotSame(traverseModeSet1, traverseModeSet0);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotNull(routingRequest1);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.batch);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(2, traverseModeArray0.length);
      assertTrue(list0.contains(traverseMode0));
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertFalse(traverseModeSet0.equals((Object)traverseModeSet1));
      assertFalse(traverseModeSet1.equals((Object)traverseModeSet0));
      assertTrue(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertFalse(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getDriving());
      assertEquals(7392, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getTrainish());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.isValid());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.isTransit());
      assertFalse(traverseModeSet1.getBicycle());
      assertEquals(8176, traverseModeSet1.getMask());
      assertFalse(traverseModeSet1.getWalk());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.getTrainish());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getFerry());
      assertFalse(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.batch);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(2, traverseModeArray0.length);
      assertTrue(list0.contains(traverseMode0));
      
      Logger logger0 = multiShortestPathTree0.getLOG();
      assertFalse(traverseModeSet0.equals((Object)traverseModeSet1));
      assertFalse(traverseModeSet1.equals((Object)traverseModeSet0));
      assertTrue(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertFalse(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getDriving());
      assertEquals(7392, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getTrainish());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.isValid());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.isTransit());
      assertFalse(traverseModeSet1.getBicycle());
      assertEquals(8176, traverseModeSet1.getMask());
      assertFalse(traverseModeSet1.getWalk());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.getTrainish());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getFerry());
      assertFalse(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotSame(traverseModeSet0, traverseModeSet1);
      assertNotSame(traverseModeSet1, traverseModeSet0);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotNull(logger0);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest1.maxTransfers);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.batch);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(2, traverseModeArray0.length);
      assertTrue(list0.contains(traverseMode0));
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertNotNull(routingRequest0);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals("MultiSPT(0 vertices)", string0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(string0);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.getstateSets();
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      
      Graph graph0 = new Graph();
      assertEquals(0, graph0.countVertices());
      assertNotNull(graph0);
      
      String string1 = null;
      double double0 = 2484.0;
      ParkAndRideVertex parkAndRideVertex0 = new ParkAndRideVertex(graph0, string0, string1, double0, routingRequest0.preTransitPenalty, routingRequest0.routerId);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(300.0, parkAndRideVertex0.getLat(), 0.01);
      assertEquals(2484.0, parkAndRideVertex0.getX(), 0.01);
      assertEquals(300.0, parkAndRideVertex0.getY(), 0.01);
      assertNull(parkAndRideVertex0.getId());
      assertEquals(2484.0, parkAndRideVertex0.getLon(), 0.01);
      assertEquals("MultiSPT(0 vertices)", parkAndRideVertex0.getLabel());
      assertEquals(0, parkAndRideVertex0.getDegreeIn());
      assertEquals(0, parkAndRideVertex0.getDegreeOut());
      assertEquals(0, parkAndRideVertex0.getIndex());
      assertEquals("", parkAndRideVertex0.getName());
      assertEquals(1, parkAndRideVertex0.getMaxIndex());
      assertNotNull(parkAndRideVertex0);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      
      State state0 = multiShortestPathTree0.getState(parkAndRideVertex0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(300.0, parkAndRideVertex0.getLat(), 0.01);
      assertEquals(2484.0, parkAndRideVertex0.getX(), 0.01);
      assertEquals(300.0, parkAndRideVertex0.getY(), 0.01);
      assertNull(parkAndRideVertex0.getId());
      assertEquals(2484.0, parkAndRideVertex0.getLon(), 0.01);
      assertEquals("MultiSPT(0 vertices)", parkAndRideVertex0.getLabel());
      assertEquals(0, parkAndRideVertex0.getDegreeIn());
      assertEquals(0, parkAndRideVertex0.getDegreeOut());
      assertEquals(0, parkAndRideVertex0.getIndex());
      assertEquals("", parkAndRideVertex0.getName());
      assertEquals(1, parkAndRideVertex0.getMaxIndex());
      assertNull(state0);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      ArrayDeque<TraverseMode> arrayDeque0 = new ArrayDeque<TraverseMode>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getBus());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTrainish());
      assertNotNull(traverseModeSet0);
      
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0, optimizeType0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getBus());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertNotNull(routingRequest0);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      
      boolean boolean0 = false;
      routingRequest0.ignoreRealtimeUpdates = boolean0;
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getBus());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      RoutingRequest routingRequest1 = routingRequest0.reversedClone();
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getBus());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.transitAllowed());
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotNull(routingRequest1);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest1.reverseOptimizing);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      
      routingRequest1.startingTransitStopId = routingRequest0.startingTransitTripId;
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getBus());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.transitAllowed());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getBus());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest1.reverseOptimizing);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      
      TreeMap<Vertex, List<State>> treeMap0 = new TreeMap<Vertex, List<State>>(multiShortestPathTree0.stateSets);
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getBus());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest1.reverseOptimizing);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) treeMap0;
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getBus());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, treeMap0.size());
      assertEquals(0, multiShortestPathTree0.stateSets.size());
      assertTrue(multiShortestPathTree0.stateSets.isEmpty());
      
      Vertex vertex0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.TRIANGLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertNotNull(routingRequest0);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      
      ArrayList<GenericLocation> arrayList0 = new ArrayList<GenericLocation>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      routingRequest0.intermediatePlaces = (List<GenericLocation>) arrayList0;
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, routingRequest0.intermediatePlaces.size());
      assertTrue(routingRequest0.intermediatePlaces.isEmpty());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertNotNull(routingRequest0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CAR;
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertNotNull(routingRequest0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      
      double double0 = 0.0;
      routingRequest0.preTransitOverageRate = double0;
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      multiShortestPathTree0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      State state0 = serializedObjectSupporter0.deserializeObjectState799();
      assertNull(state0);
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.getstateSets();
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals("MultiSPT(0 vertices)", string0);
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(string0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      
      Logger logger0 = multiShortestPathTree0.getLOG();
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(logger0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertNotNull(routingRequest0);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(collection0);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      TraversalRequirements traversalRequirements0 = new TraversalRequirements();
      assertFalse(traversalRequirements0.hasBikeWalkingRequirements());
      assertNotNull(traversalRequirements0);
      
      TraverseModeSet traverseModeSet0 = traversalRequirements0.modes;
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.isValid());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getBus());
      assertNotNull(traverseModeSet0);
      
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      assertFalse(traversalRequirements0.hasBikeWalkingRequirements());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.isValid());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertNotNull(routingRequest0);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(traversalRequirements0.hasBikeWalkingRequirements());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.isValid());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertFalse(traversalRequirements0.hasBikeWalkingRequirements());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.isValid());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(collection0);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String string0 = "}z~|}CvD~";
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.FULL;
      traverseModeSet0.clear();
      assertFalse(traversalRequirements0.hasBikeWalkingRequirements());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getRail());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTrainish());
      
      try { 
        Graph.load(classLoader0, (File) mockFile0, graph_LoadLevel0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      State state0 = serializedObjectSupporter0.deserializeObjectState562();
      assertNull(state0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "";
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(string0);
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getTram());
      assertNotNull(traverseModeSet0);
      
      TraverseModeSet traverseModeSet1 = traverseModeSet0.getNonTransitSet();
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet1.getBicycle());
      assertFalse(traverseModeSet1.getDriving());
      assertFalse(traverseModeSet1.getWalk());
      assertEquals(0, traverseModeSet1.getMask());
      assertFalse(traverseModeSet1.getTrainish());
      assertFalse(traverseModeSet1.getSubway());
      assertFalse(traverseModeSet1.getCustomMotorVehicle());
      assertFalse(traverseModeSet1.getTram());
      assertFalse(traverseModeSet1.getGondola());
      assertFalse(traverseModeSet1.getBus());
      assertFalse(traverseModeSet1.getFunicular());
      assertFalse(traverseModeSet1.isValid());
      assertFalse(traverseModeSet1.getCar());
      assertFalse(traverseModeSet1.getCableCar());
      assertFalse(traverseModeSet1.getRail());
      assertFalse(traverseModeSet1.isTransit());
      assertFalse(traverseModeSet1.getTraininsh());
      assertFalse(traverseModeSet1.getBusish());
      assertFalse(traverseModeSet1.getFerry());
      assertNotSame(traverseModeSet0, traverseModeSet1);
      assertNotSame(traverseModeSet1, traverseModeSet0);
      assertNotNull(traverseModeSet1);
      
      OptimizeType optimizeType0 = OptimizeType.TRIANGLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet1, optimizeType0);
      assertTrue(traverseModeSet0.equals((Object)traverseModeSet1));
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet1.getBicycle());
      assertFalse(traverseModeSet1.getDriving());
      assertFalse(traverseModeSet1.getWalk());
      assertEquals(0, traverseModeSet1.getMask());
      assertFalse(traverseModeSet1.getTrainish());
      assertFalse(traverseModeSet1.getSubway());
      assertFalse(traverseModeSet1.getCustomMotorVehicle());
      assertFalse(traverseModeSet1.getTram());
      assertFalse(traverseModeSet1.getGondola());
      assertFalse(traverseModeSet1.getBus());
      assertFalse(traverseModeSet1.getFunicular());
      assertFalse(traverseModeSet1.isValid());
      assertFalse(traverseModeSet1.getCar());
      assertFalse(traverseModeSet1.getCableCar());
      assertFalse(traverseModeSet1.getRail());
      assertFalse(traverseModeSet1.isTransit());
      assertFalse(traverseModeSet1.getTraininsh());
      assertFalse(traverseModeSet1.getBusish());
      assertFalse(traverseModeSet1.getFerry());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertNotNull(routingRequest0);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertTrue(traverseModeSet0.equals((Object)traverseModeSet1));
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet1.getBicycle());
      assertFalse(traverseModeSet1.getDriving());
      assertFalse(traverseModeSet1.getWalk());
      assertEquals(0, traverseModeSet1.getMask());
      assertFalse(traverseModeSet1.getTrainish());
      assertFalse(traverseModeSet1.getSubway());
      assertFalse(traverseModeSet1.getCustomMotorVehicle());
      assertFalse(traverseModeSet1.getTram());
      assertFalse(traverseModeSet1.getGondola());
      assertFalse(traverseModeSet1.getBus());
      assertFalse(traverseModeSet1.getFunicular());
      assertFalse(traverseModeSet1.isValid());
      assertFalse(traverseModeSet1.getCar());
      assertFalse(traverseModeSet1.getCableCar());
      assertFalse(traverseModeSet1.getRail());
      assertFalse(traverseModeSet1.isTransit());
      assertFalse(traverseModeSet1.getTraininsh());
      assertFalse(traverseModeSet1.getBusish());
      assertFalse(traverseModeSet1.getFerry());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.SUBWAY;
      OptimizeType optimizeType0 = OptimizeType.GREENWAYS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertNotNull(routingRequest0);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      
      double double0 = Double.POSITIVE_INFINITY;
      routingRequest0.waitReluctance = double0;
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      
      int int0 = 0;
      routingRequest0.setMaxPreTransitTime(int0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(Double.POSITIVE_INFINITY, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertSame(routingRequest1, routingRequest0);
      assertNotNull(routingRequest1);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(Double.POSITIVE_INFINITY, routingRequest1.waitReluctance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertTrue(routingRequest1.driveOnRight);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertFalse(routingRequest1.batch);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(0, routingRequest1.transferSlack);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(Double.POSITIVE_INFINITY, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(Double.POSITIVE_INFINITY, routingRequest1.waitReluctance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertTrue(routingRequest1.driveOnRight);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertFalse(routingRequest1.batch);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(0, routingRequest1.transferSlack);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      OptimizeType optimizeType0 = OptimizeType.GREENWAYS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(collection0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.getstateSets();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      
      Vertex vertex0 = null;
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNull(list0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      assertTrue(collection1.equals((Object)collection0));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotSame(collection1, collection0);
      assertNotNull(collection1);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      
      Collection<State> collection2 = multiShortestPathTree0.getAllStates();
      assertTrue(collection2.equals((Object)collection1));
      assertTrue(collection2.equals((Object)collection0));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotSame(collection2, collection1);
      assertNotSame(collection2, collection0);
      assertNotNull(collection2);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      boolean boolean0 = true;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, boolean0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      TreeMap<Vertex, List<State>> treeMap0 = new TreeMap<Vertex, List<State>>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) treeMap0;
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, treeMap0.size());
      assertTrue(multiShortestPathTree0.stateSets.isEmpty());
      assertEquals(0, multiShortestPathTree0.stateSets.size());
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.getstateSets();
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getStates(vertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getBus());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.isTransit());
      assertNotNull(traverseModeSet0);
      
      List<TraverseMode> list0 = traverseModeSet0.getModes();
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getBus());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.isTransit());
      assertFalse(list0.isEmpty());
      assertEquals(15, list0.size());
      assertNotNull(list0);
      
      TraverseModeSet traverseModeSet1 = new TraverseModeSet(list0);
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getBus());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.isTransit());
      assertFalse(list0.isEmpty());
      assertEquals(15, list0.size());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.getTrainish());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.getBicycle());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.isValid());
      assertEquals(8183, traverseModeSet1.getMask());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.isTransit());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.getFerry());
      assertTrue(traverseModeSet1.getWalk());
      assertNotNull(traverseModeSet1);
      
      OptimizeType optimizeType0 = OptimizeType.TRIANGLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet1, optimizeType0);
      assertTrue(traverseModeSet0.equals((Object)traverseModeSet1));
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getBus());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.isTransit());
      assertFalse(list0.isEmpty());
      assertEquals(15, list0.size());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.getTrainish());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.getBicycle());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.isValid());
      assertEquals(8183, traverseModeSet1.getMask());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.isTransit());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.getFerry());
      assertTrue(traverseModeSet1.getWalk());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertTrue(traverseModeSet0.equals((Object)traverseModeSet1));
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getBus());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.isTransit());
      assertFalse(list0.isEmpty());
      assertEquals(15, list0.size());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.getTrainish());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.getBicycle());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.isValid());
      assertEquals(8183, traverseModeSet1.getMask());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.isTransit());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.getFerry());
      assertTrue(traverseModeSet1.getWalk());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      
      TreeMap<Vertex, List<State>> treeMap0 = new TreeMap<Vertex, List<State>>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      multiShortestPathTree0.setstateSets(treeMap0);
      assertTrue(traverseModeSet0.equals((Object)traverseModeSet1));
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getBus());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.isTransit());
      assertFalse(list0.isEmpty());
      assertEquals(15, list0.size());
      assertTrue(traverseModeSet1.getCustomMotorVehicle());
      assertTrue(traverseModeSet1.getTrainish());
      assertTrue(traverseModeSet1.getSubway());
      assertTrue(traverseModeSet1.getRail());
      assertTrue(traverseModeSet1.getCableCar());
      assertTrue(traverseModeSet1.getBicycle());
      assertTrue(traverseModeSet1.getBus());
      assertTrue(traverseModeSet1.isValid());
      assertEquals(8183, traverseModeSet1.getMask());
      assertTrue(traverseModeSet1.getTram());
      assertTrue(traverseModeSet1.isTransit());
      assertTrue(traverseModeSet1.getGondola());
      assertTrue(traverseModeSet1.getTraininsh());
      assertTrue(traverseModeSet1.getCar());
      assertTrue(traverseModeSet1.getDriving());
      assertTrue(traverseModeSet1.getBusish());
      assertTrue(traverseModeSet1.getFunicular());
      assertTrue(traverseModeSet1.getFerry());
      assertTrue(traverseModeSet1.getWalk());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, treeMap0.size());
      assertNotSame(traverseModeSet0, traverseModeSet1);
      assertNotSame(traverseModeSet1, traverseModeSet0);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.LEG_SWITCH;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertNotNull(routingRequest0);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      double double0 = (-1.0);
      routingRequest0.triangleTimeFactor = double0;
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals((-1.0), routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      HashMap<Vertex, List<State>> hashMap0 = new HashMap<Vertex, List<State>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = 0;
      routingRequest0.useUnpreferredRoutesPenalty = int0;
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      IntersectionVertex intersectionVertex0 = serializedObjectSupporter0.deserializeObjectVertex27();
      assertEquals((-73.9959027), intersectionVertex0.getLon(), 0.01);
      assertEquals("osm:node:1918039880", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(40.7251608, intersectionVertex0.getY(), 0.01);
      assertEquals((-73.9959027), intersectionVertex0.getX(), 0.01);
      assertEquals(40.7251608, intersectionVertex0.getLat(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertFalse(intersectionVertex0.getfreeFlowing());
      assertEquals(1L, intersectionVertex0.getserialVersionUID());
      assertEquals("osm:node:1918039880", intersectionVertex0.getLabel());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertTrue(intersectionVertex0.gettrafficLight());
      assertNotNull(intersectionVertex0);
      assertTrue(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      
      intersectionVertex0.setIndex(routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals((-73.9959027), intersectionVertex0.getLon(), 0.01);
      assertEquals("osm:node:1918039880", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(40.7251608, intersectionVertex0.getY(), 0.01);
      assertEquals((-73.9959027), intersectionVertex0.getX(), 0.01);
      assertEquals(40.7251608, intersectionVertex0.getLat(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertFalse(intersectionVertex0.getfreeFlowing());
      assertEquals(1L, intersectionVertex0.getserialVersionUID());
      assertEquals("osm:node:1918039880", intersectionVertex0.getLabel());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertTrue(intersectionVertex0.gettrafficLight());
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals((-1.0), routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertTrue(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      
      List<State> list0 = null;
      List<State> list1 = hashMap0.put(intersectionVertex0, list0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals((-73.9959027), intersectionVertex0.getLon(), 0.01);
      assertEquals("osm:node:1918039880", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(40.7251608, intersectionVertex0.getY(), 0.01);
      assertEquals((-73.9959027), intersectionVertex0.getX(), 0.01);
      assertEquals(40.7251608, intersectionVertex0.getLat(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertFalse(intersectionVertex0.getfreeFlowing());
      assertEquals(1L, intersectionVertex0.getserialVersionUID());
      assertEquals("osm:node:1918039880", intersectionVertex0.getLabel());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertTrue(intersectionVertex0.gettrafficLight());
      assertNull(list1);
      assertTrue(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      
      multiShortestPathTree0.dump();
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals((-1.0), routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      multiShortestPathTree0.setstateSets(hashMap0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals((-1.0), routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals("MultiSPT(1 vertices)", string0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotNull(string0);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals((-1.0), routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getAllStates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRAINISH;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertNotNull(routingRequest0);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      
      RoutingRequest routingRequest1 = routingRequest0.reversedClone();
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotNull(routingRequest1);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.showIntermediateStops);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      
      boolean boolean0 = false;
      routingRequest1.reverseOptimizeOnTheFly = boolean0;
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.showIntermediateStops);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      
      multiShortestPathTree0.dump();
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.showIntermediateStops);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotNull(set0);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.showIntermediateStops);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      
      routingRequest1.bannedRoutes = routingRequest0.bannedRoutes;
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      
      int int0 = 2049;
      HashMap<Vertex, List<State>> hashMap0 = new HashMap<Vertex, List<State>>(int0, routingRequest1.bikeRentalDropoffCost);
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.showIntermediateStops);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) hashMap0;
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, multiShortestPathTree0.stateSets.size());
      assertTrue(multiShortestPathTree0.stateSets.isEmpty());
      
      double double0 = 0.0;
      String string0 = "";
      double double1 = 1539.78;
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, routingRequest0.heuristicWeight, double1);
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertNotNull(onboardDepartVertex0);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      
      Vector<State> vector0 = new Vector<State>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      List<State> list0 = hashMap0.put(onboardDepartVertex0, vector0);
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertNotEquals(double1, double0, 0.01);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNull(list0);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.showIntermediateStops);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      
      routingRequest0.heuristicWeight = double0;
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      int int1 = (-291);
      routingRequest0.maxTransfers = int1;
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      String string1 = multiShortestPathTree0.toString();
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("MultiSPT(1 vertices)", string1);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.showIntermediateStops);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      
      multiShortestPathTree0.dump();
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.showIntermediateStops);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertFalse(set1.equals((Object)set0));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, set1.size());
      assertFalse(set1.isEmpty());
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotNull(set1);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.showIntermediateStops);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      
      String string2 = multiShortestPathTree0.toString();
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("MultiSPT(1 vertices)", string2);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.showIntermediateStops);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.getstateSets();
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotNull(map0);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.showIntermediateStops);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      
      int int2 = multiShortestPathTree0.getVertexCount();
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.showIntermediateStops);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      
      List<State> list1 = multiShortestPathTree0.getStates(onboardDepartVertex0);
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(list1);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.showIntermediateStops);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotNull(collection0);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.showIntermediateStops);
      assertTrue(routingRequest1.softWalkLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BUSISH;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertNotNull(routingRequest0);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      
      RoutingRequest routingRequest1 = routingRequest0.reversedClone();
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotNull(routingRequest1);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.batch);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2, routingRequest1.maxTransfers);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0L, routingRequest1.worstTime);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0, routingRequest1.transferPenalty);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.batch);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2, routingRequest1.maxTransfers);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0L, routingRequest1.worstTime);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0, routingRequest1.transferPenalty);
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.getstateSets();
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotNull(map0);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertFalse(routingRequest1.batch);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2, routingRequest1.maxTransfers);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0L, routingRequest1.worstTime);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0, routingRequest1.transferPenalty);
      
      multiShortestPathTree0.stateSets = map0;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(multiShortestPathTree0.stateSets.isEmpty());
      assertEquals(0, multiShortestPathTree0.stateSets.size());
      
      routingRequest1.to = routingRequest0.to;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest1.to.hasEdgeId());
      assertFalse(routingRequest1.to.hasName());
      assertFalse(routingRequest1.to.hasPlace());
      assertFalse(routingRequest1.to.hasHeading());
      assertFalse(routingRequest1.to.hasCoordinate());
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getPaths();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.AbstractShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      Vertex vertex0 = null;
      boolean boolean0 = false;
      TraverseMode traverseMode0 = TraverseMode.CAR;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      
      RoutingRequest routingRequest1 = routingRequest0.clone();
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotNull(routingRequest1);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertFalse(routingRequest1.reverseOptimizing);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2, routingRequest1.maxTransfers);
      
      RoutingRequest routingRequest2 = routingRequest1.reversedClone();
      assertTrue(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertFalse(routingRequest2.equals((Object)routingRequest1));
      assertFalse(routingRequest2.equals((Object)routingRequest0));
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest2.getSecondsSinceEpoch());
      assertFalse(routingRequest2.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest2.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest2.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest2.getBoardCostLowerBound());
      assertFalse(routingRequest2.transitAllowed());
      assertEquals(1, routingRequest2.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest2.getMaxWalkDistance(), 0.01);
      assertNotSame(routingRequest0, routingRequest2);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotSame(routingRequest1, routingRequest2);
      assertNotSame(routingRequest2, routingRequest1);
      assertNotSame(routingRequest2, routingRequest0);
      assertNotNull(routingRequest2);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertFalse(routingRequest1.reverseOptimizing);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(120, routingRequest2.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest2.bikeSpeed, 0.01);
      assertEquals(300, routingRequest2.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest2.bikeParkAndRide);
      assertEquals(0, routingRequest2.transferPenalty);
      assertEquals(2.0, routingRequest2.stairsReluctance, 0.01);
      assertFalse(routingRequest2.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest2.preTransitPenalty, 0.01);
      assertTrue(routingRequest2.arriveBy);
      assertEquals(0L, routingRequest2.clampInitialWait);
      assertEquals(3, routingRequest2.numItineraries);
      assertEquals(2.9, routingRequest2.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest2.batch);
      assertEquals(0.0, routingRequest2.triangleTimeFactor, 0.01);
      assertFalse(routingRequest2.kissAndRide);
      assertEquals(180, routingRequest2.nonpreferredTransferPenalty);
      assertFalse(routingRequest2.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest2.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest2.softWalkOverageRate, 0.01);
      assertEquals(1.33, routingRequest2.walkSpeed, 0.01);
      assertEquals(90, routingRequest2.elevatorBoardCost);
      assertEquals(60.0, routingRequest2.softWalkPenalty, 0.01);
      assertFalse(routingRequest2.showIntermediateStops);
      assertEquals(90, routingRequest2.elevatorBoardTime);
      assertEquals(120, routingRequest2.bikeParkCost);
      assertEquals(60, routingRequest2.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest2.alightSlack);
      assertEquals(40.0, routingRequest2.carSpeed, 0.01);
      assertFalse(routingRequest2.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest2.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest2.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest2.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest2.bikeParkTime);
      assertEquals(0.2, routingRequest2.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest2.walkBoardCost);
      assertFalse(routingRequest2.ignoreRealtimeUpdates);
      assertTrue(routingRequest2.driveOnRight);
      assertTrue(routingRequest2.reverseOptimizing);
      assertEquals(1.0, routingRequest2.heuristicWeight, 0.01);
      assertFalse(routingRequest2.walkingBike);
      assertFalse(routingRequest2.allowBikeRental);
      assertEquals(0L, routingRequest2.worstTime);
      assertEquals(1392409281L, routingRequest2.dateTime);
      assertEquals(0, routingRequest2.transferSlack);
      assertTrue(routingRequest2.softWalkLimiting);
      assertTrue(routingRequest2.softPreTransitLimiting);
      assertEquals(0.0, routingRequest2.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest2.bikeSwitchTime);
      assertEquals(1.0, routingRequest2.waitReluctance, 0.01);
      assertEquals(30, routingRequest2.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest2.turnReluctance, 0.01);
      assertEquals(0, routingRequest2.boardSlack);
      assertEquals(20, routingRequest2.elevatorHopTime);
      assertFalse(routingRequest2.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWalkDistance, 0.01);
      assertEquals(600, routingRequest2.bikeBoardCost);
      assertEquals(20, routingRequest2.elevatorHopCost);
      assertEquals(300, routingRequest2.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest2.maxSlope, 0.01);
      assertEquals(2, routingRequest2.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWeight, 0.01);
      assertEquals(0, routingRequest2.bikeSwitchCost);
      assertEquals(30, routingRequest2.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest2.maxPreTransitTime);
      assertFalse(routingRequest2.wheelchairAccessible);
      assertEquals(120, routingRequest2.carDropoffTime);
      assertEquals(2.9, routingRequest2.carAccelerationSpeed, 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest2);
      assertFalse(routingRequest0.equals((Object)routingRequest2));
      assertTrue(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertFalse(routingRequest1.equals((Object)routingRequest2));
      assertFalse(routingRequest2.equals((Object)routingRequest1));
      assertFalse(routingRequest2.equals((Object)routingRequest0));
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest2.getSecondsSinceEpoch());
      assertFalse(routingRequest2.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest2.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest2.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest2.getBoardCostLowerBound());
      assertFalse(routingRequest2.transitAllowed());
      assertEquals(1, routingRequest2.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest2.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertFalse(routingRequest1.reverseOptimizing);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(120, routingRequest2.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest2.bikeSpeed, 0.01);
      assertEquals(300, routingRequest2.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest2.bikeParkAndRide);
      assertEquals(0, routingRequest2.transferPenalty);
      assertEquals(2.0, routingRequest2.stairsReluctance, 0.01);
      assertFalse(routingRequest2.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest2.preTransitPenalty, 0.01);
      assertTrue(routingRequest2.arriveBy);
      assertEquals(0L, routingRequest2.clampInitialWait);
      assertEquals(3, routingRequest2.numItineraries);
      assertEquals(2.9, routingRequest2.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest2.batch);
      assertEquals(0.0, routingRequest2.triangleTimeFactor, 0.01);
      assertFalse(routingRequest2.kissAndRide);
      assertEquals(180, routingRequest2.nonpreferredTransferPenalty);
      assertFalse(routingRequest2.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest2.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest2.softWalkOverageRate, 0.01);
      assertEquals(1.33, routingRequest2.walkSpeed, 0.01);
      assertEquals(90, routingRequest2.elevatorBoardCost);
      assertEquals(60.0, routingRequest2.softWalkPenalty, 0.01);
      assertFalse(routingRequest2.showIntermediateStops);
      assertEquals(90, routingRequest2.elevatorBoardTime);
      assertEquals(120, routingRequest2.bikeParkCost);
      assertEquals(60, routingRequest2.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest2.alightSlack);
      assertEquals(40.0, routingRequest2.carSpeed, 0.01);
      assertFalse(routingRequest2.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest2.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest2.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest2.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest2.bikeParkTime);
      assertEquals(0.2, routingRequest2.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest2.walkBoardCost);
      assertFalse(routingRequest2.ignoreRealtimeUpdates);
      assertTrue(routingRequest2.driveOnRight);
      assertTrue(routingRequest2.reverseOptimizing);
      assertEquals(1.0, routingRequest2.heuristicWeight, 0.01);
      assertFalse(routingRequest2.walkingBike);
      assertFalse(routingRequest2.allowBikeRental);
      assertEquals(0L, routingRequest2.worstTime);
      assertEquals(1392409281L, routingRequest2.dateTime);
      assertEquals(0, routingRequest2.transferSlack);
      assertTrue(routingRequest2.softWalkLimiting);
      assertTrue(routingRequest2.softPreTransitLimiting);
      assertEquals(0.0, routingRequest2.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest2.bikeSwitchTime);
      assertEquals(1.0, routingRequest2.waitReluctance, 0.01);
      assertEquals(30, routingRequest2.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest2.turnReluctance, 0.01);
      assertEquals(0, routingRequest2.boardSlack);
      assertEquals(20, routingRequest2.elevatorHopTime);
      assertFalse(routingRequest2.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWalkDistance, 0.01);
      assertEquals(600, routingRequest2.bikeBoardCost);
      assertEquals(20, routingRequest2.elevatorHopCost);
      assertEquals(300, routingRequest2.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest2.maxSlope, 0.01);
      assertEquals(2, routingRequest2.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWeight, 0.01);
      assertEquals(0, routingRequest2.bikeSwitchCost);
      assertEquals(30, routingRequest2.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest2.maxPreTransitTime);
      assertFalse(routingRequest2.wheelchairAccessible);
      assertEquals(120, routingRequest2.carDropoffTime);
      assertEquals(2.9, routingRequest2.carAccelerationSpeed, 0.01);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertFalse(routingRequest0.equals((Object)routingRequest2));
      assertTrue(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertFalse(routingRequest1.equals((Object)routingRequest2));
      assertFalse(routingRequest2.equals((Object)routingRequest1));
      assertFalse(routingRequest2.equals((Object)routingRequest0));
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest2.getSecondsSinceEpoch());
      assertFalse(routingRequest2.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest2.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest2.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest2.getBoardCostLowerBound());
      assertFalse(routingRequest2.transitAllowed());
      assertEquals(1, routingRequest2.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest2.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotSame(routingRequest0, routingRequest2);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotSame(routingRequest1, routingRequest2);
      assertNotSame(routingRequest2, routingRequest1);
      assertNotSame(routingRequest2, routingRequest0);
      assertNull(list0);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertFalse(routingRequest1.reverseOptimizing);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(120, routingRequest2.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest2.bikeSpeed, 0.01);
      assertEquals(300, routingRequest2.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest2.bikeParkAndRide);
      assertEquals(0, routingRequest2.transferPenalty);
      assertEquals(2.0, routingRequest2.stairsReluctance, 0.01);
      assertFalse(routingRequest2.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest2.preTransitPenalty, 0.01);
      assertTrue(routingRequest2.arriveBy);
      assertEquals(0L, routingRequest2.clampInitialWait);
      assertEquals(3, routingRequest2.numItineraries);
      assertEquals(2.9, routingRequest2.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest2.batch);
      assertEquals(0.0, routingRequest2.triangleTimeFactor, 0.01);
      assertFalse(routingRequest2.kissAndRide);
      assertEquals(180, routingRequest2.nonpreferredTransferPenalty);
      assertFalse(routingRequest2.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest2.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest2.softWalkOverageRate, 0.01);
      assertEquals(1.33, routingRequest2.walkSpeed, 0.01);
      assertEquals(90, routingRequest2.elevatorBoardCost);
      assertEquals(60.0, routingRequest2.softWalkPenalty, 0.01);
      assertFalse(routingRequest2.showIntermediateStops);
      assertEquals(90, routingRequest2.elevatorBoardTime);
      assertEquals(120, routingRequest2.bikeParkCost);
      assertEquals(60, routingRequest2.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest2.alightSlack);
      assertEquals(40.0, routingRequest2.carSpeed, 0.01);
      assertFalse(routingRequest2.useBikeRentalAvailabilityInformation);
      assertEquals(10.0, routingRequest2.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest2.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest2.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest2.bikeParkTime);
      assertEquals(0.2, routingRequest2.waitAtBeginningFactor, 0.01);
      assertEquals(600, routingRequest2.walkBoardCost);
      assertFalse(routingRequest2.ignoreRealtimeUpdates);
      assertTrue(routingRequest2.driveOnRight);
      assertTrue(routingRequest2.reverseOptimizing);
      assertEquals(1.0, routingRequest2.heuristicWeight, 0.01);
      assertFalse(routingRequest2.walkingBike);
      assertFalse(routingRequest2.allowBikeRental);
      assertEquals(0L, routingRequest2.worstTime);
      assertEquals(1392409281L, routingRequest2.dateTime);
      assertEquals(0, routingRequest2.transferSlack);
      assertTrue(routingRequest2.softWalkLimiting);
      assertTrue(routingRequest2.softPreTransitLimiting);
      assertEquals(0.0, routingRequest2.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest2.bikeSwitchTime);
      assertEquals(1.0, routingRequest2.waitReluctance, 0.01);
      assertEquals(30, routingRequest2.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest2.turnReluctance, 0.01);
      assertEquals(0, routingRequest2.boardSlack);
      assertEquals(20, routingRequest2.elevatorHopTime);
      assertFalse(routingRequest2.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWalkDistance, 0.01);
      assertEquals(600, routingRequest2.bikeBoardCost);
      assertEquals(20, routingRequest2.elevatorHopCost);
      assertEquals(300, routingRequest2.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest2.maxSlope, 0.01);
      assertEquals(2, routingRequest2.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest2.maxWeight, 0.01);
      assertEquals(0, routingRequest2.bikeSwitchCost);
      assertEquals(30, routingRequest2.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest2.maxPreTransitTime);
      assertFalse(routingRequest2.wheelchairAccessible);
      assertEquals(120, routingRequest2.carDropoffTime);
      assertEquals(2.9, routingRequest2.carAccelerationSpeed, 0.01);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "wi`37y^t";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      
      Logger logger0 = multiShortestPathTree0.getLOG();
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(logger0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals("MultiSPT(0 vertices)", string0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(string0);
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(0, int0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      multiShortestPathTree0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      multiShortestPathTree0.dump();
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      StreetEdge streetEdge0 = multiShortestPathTree0.serializedObjectSupporter.deserializeObjectEdge133();
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0F, streetEdge0.getMaxSlope(), 0.01F);
      assertEquals(1L, streetEdge0.getserialVersionUID());
      assertFalse(streetEdge0.isElevationFlattened());
      assertEquals(11.2F, streetEdge0.getDEFAULT_CAR_SPEED(), 0.01F);
      assertEquals(StreetTraversalPermission.PEDESTRIAN, streetEdge0.getPermission());
      assertEquals(2, streetEdge0.getHASBOGUSNAME_FLAG_INDEX());
      assertEquals(3, streetEdge0.getCLASS_STREET());
      assertEquals(0, streetEdge0.getBACK_FLAG_INDEX());
      assertEquals(4, streetEdge0.getCLASS_CROSSING());
      assertFalse(streetEdge0.isPartial());
      assertEquals(16, streetEdge0.getCLASS_TRAIN_PLATFORM());
      assertEquals(1, streetEdge0.getROUNDABOUT_FLAG_INDEX());
      assertEquals(24, streetEdge0.getANY_PLATFORM_MASK());
      assertEquals(3, streetEdge0.getStreetClass());
      assertEquals(44.2, streetEdge0.getSlopeWorkCostEffectiveLength(), 0.01);
      assertEquals(0.1, streetEdge0.getGREENWAY_SAFETY_FACTOR(), 0.01);
      assertEquals(1.2727274F, streetEdge0.getBicycleSafetyFactor(), 0.01F);
      assertEquals(97, streetEdge0.getInAngle());
      assertEquals(8, streetEdge0.getCLASS_OTHER_PLATFORM());
      assertEquals(7, streetEdge0.getCROSSING_CLASS_MASK());
      assertEquals(3, streetEdge0.getNOTHRUTRAFFIC_FLAG_INDEX());
      assertEquals(32, streetEdge0.getCLASS_LINK());
      assertEquals(5, streetEdge0.getSLOPEOVERRIDE_FLAG_INDEX());
      assertFalse(streetEdge0.hasExplicitTurnRestrictions());
      assertEquals(4, streetEdge0.getSTAIRS_FLAG_INDEX());
      assertEquals(11.2F, streetEdge0.getCarSpeed(), 0.01F);
      assertTrue(streetEdge0.vertexTypesValid());
      assertEquals(200, streetEdge0.getId());
      assertEquals(44.2, streetEdge0.getDistance(), 0.01);
      assertEquals(97, streetEdge0.getOutAngle());
      assertEquals("Spring Street", streetEdge0.getName());
      assertEquals(6, streetEdge0.getWHEELCHAIR_ACCESSIBLE_FLAG_INDEX());
      assertEquals(44200, streetEdge0.getlength_mm());
      assertEquals(5, streetEdge0.getCLASS_OTHERPATH());
      assertEquals((byte)65, streetEdge0.getflags());
      assertEquals(44.2, streetEdge0.getSlopeSpeedEffectiveLength(), 0.01);
      assertNotNull(streetEdge0);
      assertEquals(11.2F, StreetEdge.DEFAULT_CAR_SPEED, 0.01F);
      assertEquals((byte)69, streetEdge0.outAngle);
      assertEquals(4, StreetEdge.STAIRS_FLAG_INDEX);
      assertEquals(24, StreetEdge.ANY_PLATFORM_MASK);
      assertEquals(16, StreetEdge.CLASS_TRAIN_PLATFORM);
      assertEquals(0.1, StreetEdge.GREENWAY_SAFETY_FACTOR, 0.01);
      assertEquals(11.2F, streetEdge0.carSpeed, 0.01F);
      assertEquals(1, StreetEdge.ROUNDABOUT_FLAG_INDEX);
      assertEquals(44200, streetEdge0.length_mm);
      assertEquals(8, StreetEdge.CLASS_OTHER_PLATFORM);
      assertEquals(2, StreetEdge.HASBOGUSNAME_FLAG_INDEX);
      assertEquals((byte)65, streetEdge0.flags);
      assertEquals(4, StreetEdge.CLASS_CROSSING);
      assertEquals(5, StreetEdge.SLOPEOVERRIDE_FLAG_INDEX);
      assertEquals(3, streetEdge0.streetClass);
      assertEquals(5, StreetEdge.CLASS_OTHERPATH);
      assertEquals(3, StreetEdge.CLASS_STREET);
      assertEquals(3, StreetEdge.NOTHRUTRAFFIC_FLAG_INDEX);
      assertEquals(7, StreetEdge.CROSSING_CLASS_MASK);
      assertEquals(0, StreetEdge.BACK_FLAG_INDEX);
      assertEquals(1.2727274F, streetEdge0.bicycleSafetyFactor, 0.01F);
      assertEquals(6, StreetEdge.WHEELCHAIR_ACCESSIBLE_FLAG_INDEX);
      assertEquals((byte)69, streetEdge0.inAngle);
      assertEquals(32, StreetEdge.CLASS_LINK);
      
      IntersectionVertex intersectionVertex0 = (IntersectionVertex)streetEdge0.getFromVertex();
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0F, streetEdge0.getMaxSlope(), 0.01F);
      assertEquals(1L, streetEdge0.getserialVersionUID());
      assertFalse(streetEdge0.isElevationFlattened());
      assertEquals(11.2F, streetEdge0.getDEFAULT_CAR_SPEED(), 0.01F);
      assertEquals(StreetTraversalPermission.PEDESTRIAN, streetEdge0.getPermission());
      assertEquals(2, streetEdge0.getHASBOGUSNAME_FLAG_INDEX());
      assertEquals(3, streetEdge0.getCLASS_STREET());
      assertEquals(0, streetEdge0.getBACK_FLAG_INDEX());
      assertEquals(4, streetEdge0.getCLASS_CROSSING());
      assertFalse(streetEdge0.isPartial());
      assertEquals(16, streetEdge0.getCLASS_TRAIN_PLATFORM());
      assertEquals(1, streetEdge0.getROUNDABOUT_FLAG_INDEX());
      assertEquals(24, streetEdge0.getANY_PLATFORM_MASK());
      assertEquals(3, streetEdge0.getStreetClass());
      assertEquals(44.2, streetEdge0.getSlopeWorkCostEffectiveLength(), 0.01);
      assertEquals(0.1, streetEdge0.getGREENWAY_SAFETY_FACTOR(), 0.01);
      assertEquals(1.2727274F, streetEdge0.getBicycleSafetyFactor(), 0.01F);
      assertEquals(97, streetEdge0.getInAngle());
      assertEquals(8, streetEdge0.getCLASS_OTHER_PLATFORM());
      assertEquals(7, streetEdge0.getCROSSING_CLASS_MASK());
      assertEquals(3, streetEdge0.getNOTHRUTRAFFIC_FLAG_INDEX());
      assertEquals(32, streetEdge0.getCLASS_LINK());
      assertEquals(5, streetEdge0.getSLOPEOVERRIDE_FLAG_INDEX());
      assertFalse(streetEdge0.hasExplicitTurnRestrictions());
      assertEquals(4, streetEdge0.getSTAIRS_FLAG_INDEX());
      assertEquals(11.2F, streetEdge0.getCarSpeed(), 0.01F);
      assertTrue(streetEdge0.vertexTypesValid());
      assertEquals(200, streetEdge0.getId());
      assertEquals(44.2, streetEdge0.getDistance(), 0.01);
      assertEquals(97, streetEdge0.getOutAngle());
      assertEquals("Spring Street", streetEdge0.getName());
      assertEquals(6, streetEdge0.getWHEELCHAIR_ACCESSIBLE_FLAG_INDEX());
      assertEquals(44200, streetEdge0.getlength_mm());
      assertEquals(5, streetEdge0.getCLASS_OTHERPATH());
      assertEquals((byte)65, streetEdge0.getflags());
      assertEquals(44.2, streetEdge0.getSlopeSpeedEffectiveLength(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertTrue(intersectionVertex0.gettrafficLight());
      assertEquals(1L, intersectionVertex0.getserialVersionUID());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(40.725513, intersectionVertex0.getLat(), 0.01);
      assertEquals("osm:node:42430154", intersectionVertex0.getLabel());
      assertEquals(40.725513, intersectionVertex0.getY(), 0.01);
      assertEquals((-74.004031), intersectionVertex0.getX(), 0.01);
      assertEquals((-74.004031), intersectionVertex0.getLon(), 0.01);
      assertEquals(2, intersectionVertex0.getMaxIndex());
      assertFalse(intersectionVertex0.getfreeFlowing());
      assertEquals("osm:node:42430154", intersectionVertex0.getName());
      assertNotNull(intersectionVertex0);
      assertEquals(11.2F, StreetEdge.DEFAULT_CAR_SPEED, 0.01F);
      assertEquals((byte)69, streetEdge0.outAngle);
      assertEquals(4, StreetEdge.STAIRS_FLAG_INDEX);
      assertEquals(24, StreetEdge.ANY_PLATFORM_MASK);
      assertEquals(16, StreetEdge.CLASS_TRAIN_PLATFORM);
      assertEquals(0.1, StreetEdge.GREENWAY_SAFETY_FACTOR, 0.01);
      assertEquals(11.2F, streetEdge0.carSpeed, 0.01F);
      assertEquals(1, StreetEdge.ROUNDABOUT_FLAG_INDEX);
      assertEquals(44200, streetEdge0.length_mm);
      assertEquals(8, StreetEdge.CLASS_OTHER_PLATFORM);
      assertEquals(2, StreetEdge.HASBOGUSNAME_FLAG_INDEX);
      assertEquals((byte)65, streetEdge0.flags);
      assertEquals(4, StreetEdge.CLASS_CROSSING);
      assertEquals(5, StreetEdge.SLOPEOVERRIDE_FLAG_INDEX);
      assertEquals(3, streetEdge0.streetClass);
      assertEquals(5, StreetEdge.CLASS_OTHERPATH);
      assertEquals(3, StreetEdge.CLASS_STREET);
      assertEquals(3, StreetEdge.NOTHRUTRAFFIC_FLAG_INDEX);
      assertEquals(7, StreetEdge.CROSSING_CLASS_MASK);
      assertEquals(0, StreetEdge.BACK_FLAG_INDEX);
      assertEquals(1.2727274F, streetEdge0.bicycleSafetyFactor, 0.01F);
      assertEquals(6, StreetEdge.WHEELCHAIR_ACCESSIBLE_FLAG_INDEX);
      assertEquals((byte)69, streetEdge0.inAngle);
      assertEquals(32, StreetEdge.CLASS_LINK);
      assertFalse(intersectionVertex0.freeFlowing);
      assertTrue(intersectionVertex0.trafficLight);
      
      State state0 = multiShortestPathTree0.getState(intersectionVertex0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0F, streetEdge0.getMaxSlope(), 0.01F);
      assertEquals(1L, streetEdge0.getserialVersionUID());
      assertFalse(streetEdge0.isElevationFlattened());
      assertEquals(11.2F, streetEdge0.getDEFAULT_CAR_SPEED(), 0.01F);
      assertEquals(StreetTraversalPermission.PEDESTRIAN, streetEdge0.getPermission());
      assertEquals(2, streetEdge0.getHASBOGUSNAME_FLAG_INDEX());
      assertEquals(3, streetEdge0.getCLASS_STREET());
      assertEquals(0, streetEdge0.getBACK_FLAG_INDEX());
      assertEquals(4, streetEdge0.getCLASS_CROSSING());
      assertFalse(streetEdge0.isPartial());
      assertEquals(16, streetEdge0.getCLASS_TRAIN_PLATFORM());
      assertEquals(1, streetEdge0.getROUNDABOUT_FLAG_INDEX());
      assertEquals(24, streetEdge0.getANY_PLATFORM_MASK());
      assertEquals(3, streetEdge0.getStreetClass());
      assertEquals(44.2, streetEdge0.getSlopeWorkCostEffectiveLength(), 0.01);
      assertEquals(0.1, streetEdge0.getGREENWAY_SAFETY_FACTOR(), 0.01);
      assertEquals(1.2727274F, streetEdge0.getBicycleSafetyFactor(), 0.01F);
      assertEquals(97, streetEdge0.getInAngle());
      assertEquals(8, streetEdge0.getCLASS_OTHER_PLATFORM());
      assertEquals(7, streetEdge0.getCROSSING_CLASS_MASK());
      assertEquals(3, streetEdge0.getNOTHRUTRAFFIC_FLAG_INDEX());
      assertEquals(32, streetEdge0.getCLASS_LINK());
      assertEquals(5, streetEdge0.getSLOPEOVERRIDE_FLAG_INDEX());
      assertFalse(streetEdge0.hasExplicitTurnRestrictions());
      assertEquals(4, streetEdge0.getSTAIRS_FLAG_INDEX());
      assertEquals(11.2F, streetEdge0.getCarSpeed(), 0.01F);
      assertTrue(streetEdge0.vertexTypesValid());
      assertEquals(200, streetEdge0.getId());
      assertEquals(44.2, streetEdge0.getDistance(), 0.01);
      assertEquals(97, streetEdge0.getOutAngle());
      assertEquals("Spring Street", streetEdge0.getName());
      assertEquals(6, streetEdge0.getWHEELCHAIR_ACCESSIBLE_FLAG_INDEX());
      assertEquals(44200, streetEdge0.getlength_mm());
      assertEquals(5, streetEdge0.getCLASS_OTHERPATH());
      assertEquals((byte)65, streetEdge0.getflags());
      assertEquals(44.2, streetEdge0.getSlopeSpeedEffectiveLength(), 0.01);
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals(1, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertTrue(intersectionVertex0.gettrafficLight());
      assertEquals(1L, intersectionVertex0.getserialVersionUID());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(40.725513, intersectionVertex0.getLat(), 0.01);
      assertEquals("osm:node:42430154", intersectionVertex0.getLabel());
      assertEquals(40.725513, intersectionVertex0.getY(), 0.01);
      assertEquals((-74.004031), intersectionVertex0.getX(), 0.01);
      assertEquals((-74.004031), intersectionVertex0.getLon(), 0.01);
      assertEquals(2, intersectionVertex0.getMaxIndex());
      assertFalse(intersectionVertex0.getfreeFlowing());
      assertEquals("osm:node:42430154", intersectionVertex0.getName());
      assertNull(state0);
      assertEquals(11.2F, StreetEdge.DEFAULT_CAR_SPEED, 0.01F);
      assertEquals((byte)69, streetEdge0.outAngle);
      assertEquals(4, StreetEdge.STAIRS_FLAG_INDEX);
      assertEquals(24, StreetEdge.ANY_PLATFORM_MASK);
      assertEquals(16, StreetEdge.CLASS_TRAIN_PLATFORM);
      assertEquals(0.1, StreetEdge.GREENWAY_SAFETY_FACTOR, 0.01);
      assertEquals(11.2F, streetEdge0.carSpeed, 0.01F);
      assertEquals(1, StreetEdge.ROUNDABOUT_FLAG_INDEX);
      assertEquals(44200, streetEdge0.length_mm);
      assertEquals(8, StreetEdge.CLASS_OTHER_PLATFORM);
      assertEquals(2, StreetEdge.HASBOGUSNAME_FLAG_INDEX);
      assertEquals((byte)65, streetEdge0.flags);
      assertEquals(4, StreetEdge.CLASS_CROSSING);
      assertEquals(5, StreetEdge.SLOPEOVERRIDE_FLAG_INDEX);
      assertEquals(3, streetEdge0.streetClass);
      assertEquals(5, StreetEdge.CLASS_OTHERPATH);
      assertEquals(3, StreetEdge.CLASS_STREET);
      assertEquals(3, StreetEdge.NOTHRUTRAFFIC_FLAG_INDEX);
      assertEquals(7, StreetEdge.CROSSING_CLASS_MASK);
      assertEquals(0, StreetEdge.BACK_FLAG_INDEX);
      assertEquals(1.2727274F, streetEdge0.bicycleSafetyFactor, 0.01F);
      assertEquals(6, StreetEdge.WHEELCHAIR_ACCESSIBLE_FLAG_INDEX);
      assertEquals((byte)69, streetEdge0.inAngle);
      assertEquals(32, StreetEdge.CLASS_LINK);
      assertFalse(intersectionVertex0.freeFlowing);
      assertTrue(intersectionVertex0.trafficLight);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.LEG_SWITCH;
      OptimizeType optimizeType0 = OptimizeType.TRANSFERS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertNotNull(routingRequest0);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      
      int int0 = 1;
      boolean boolean0 = true;
      routingRequest0.allowBikeRental = boolean0;
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      routingRequest0.bikeParkCost = int0;
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.allowBikeRental);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(collection0);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.allowBikeRental);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TreeMap<Vertex, List<State>> treeMap0 = new TreeMap<Vertex, List<State>>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) treeMap0;
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, treeMap0.size());
      assertTrue(multiShortestPathTree0.stateSets.isEmpty());
      assertEquals(0, multiShortestPathTree0.stateSets.size());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, routingRequest0.routerId);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.allowBikeRental);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      
      IntersectionVertex intersectionVertex0 = serializedObjectSupporter0.deserializeObjectVertex7();
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertEquals(40.726119, intersectionVertex0.getY(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals("osm:node:42436784", intersectionVertex0.getLabel());
      assertEquals("osm:node:42436784", intersectionVertex0.getName());
      assertEquals(0, intersectionVertex0.getIndex());
      assertEquals((-74.001597), intersectionVertex0.getLon(), 0.01);
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(1L, intersectionVertex0.getserialVersionUID());
      assertFalse(intersectionVertex0.getfreeFlowing());
      assertEquals((-74.001597), intersectionVertex0.getX(), 0.01);
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(40.726119, intersectionVertex0.getLat(), 0.01);
      assertTrue(intersectionVertex0.gettrafficLight());
      assertNotNull(intersectionVertex0);
      assertTrue(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(intersectionVertex0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.opentripplanner.routing.vertextype.IntersectionVertex cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRAINISH;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertNotNull(routingRequest0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      
      multiShortestPathTree0.dump();
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      
      int int0 = 2049;
      HashMap<Vertex, List<State>> hashMap0 = new HashMap<Vertex, List<State>>(int0, routingRequest0.bikeRentalDropoffCost);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) hashMap0;
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(multiShortestPathTree0.stateSets.isEmpty());
      assertEquals(0, multiShortestPathTree0.stateSets.size());
      
      double double0 = 0.0;
      String string0 = "";
      double double1 = 1539.78;
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, routingRequest0.heuristicWeight, double1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertNotNull(onboardDepartVertex0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      
      Vector<State> vector0 = new Vector<State>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      List<State> list0 = hashMap0.put(onboardDepartVertex0, vector0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNull(list0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      
      routingRequest0.heuristicWeight = double0;
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      
      int int1 = (-291);
      routingRequest0.maxTransfers = int1;
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      
      String string1 = multiShortestPathTree0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("MultiSPT(1 vertices)", string1);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      
      multiShortestPathTree0.dump();
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      assertFalse(set1.equals((Object)set0));
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(set1.isEmpty());
      assertEquals(1, set1.size());
      assertNotNull(set1);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      
      String string2 = multiShortestPathTree0.toString();
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("MultiSPT(1 vertices)", string2);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.getstateSets();
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      
      int int2 = multiShortestPathTree0.getVertexCount();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      
      List<State> list1 = multiShortestPathTree0.getStates(onboardDepartVertex0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(list1);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      
      State state0 = multiShortestPathTree0.getState(onboardDepartVertex0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNull(state0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRAINISH;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      multiShortestPathTree0.dump();
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      int int0 = 2049;
      HashMap<Vertex, List<State>> hashMap0 = new HashMap<Vertex, List<State>>(int0, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) hashMap0;
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(multiShortestPathTree0.stateSets.isEmpty());
      assertEquals(0, multiShortestPathTree0.stateSets.size());
      
      double double0 = 0.0;
      String string0 = "";
      double double1 = 1539.78;
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, routingRequest0.heuristicWeight, double1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertNotNull(onboardDepartVertex0);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      Vector<State> vector0 = new Vector<State>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      State state0 = null;
      boolean boolean2 = vector0.add(state0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      
      List<State> list0 = hashMap0.put(onboardDepartVertex0, vector0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertNull(list0);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      routingRequest0.heuristicWeight = double0;
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      int int1 = (-291);
      routingRequest0.maxTransfers = int1;
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      String string1 = multiShortestPathTree0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("MultiSPT(1 vertices)", string1);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      multiShortestPathTree0.dump();
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      assertFalse(set1.equals((Object)set0));
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(set1.isEmpty());
      assertEquals(1, set1.size());
      assertNotNull(set1);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      String string2 = multiShortestPathTree0.toString();
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("MultiSPT(1 vertices)", string2);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.getstateSets();
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      int int2 = multiShortestPathTree0.getVertexCount();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      List<State> list1 = multiShortestPathTree0.getStates(onboardDepartVertex0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(list1);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(onboardDepartVertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRAINISH;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      
      multiShortestPathTree0.dump();
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      
      int int0 = 2049;
      HashMap<Vertex, List<State>> hashMap0 = new HashMap<Vertex, List<State>>(int0, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) hashMap0;
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(multiShortestPathTree0.stateSets.isEmpty());
      assertEquals(0, multiShortestPathTree0.stateSets.size());
      
      double double0 = 0.0;
      String string0 = "";
      double double1 = 1539.78;
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, routingRequest0.heuristicWeight, double1);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertNotNull(onboardDepartVertex0);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      
      Vector<State> vector0 = new Vector<State>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      State state0 = null;
      boolean boolean2 = vector0.add(state0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      
      OnboardDepartVertex onboardDepartVertex1 = null;
      Vector<State> vector1 = null;
      List<State> list0 = hashMap0.put(onboardDepartVertex1, vector1);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(list0);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      
      routingRequest0.heuristicWeight = double0;
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      int int1 = (-291);
      routingRequest0.maxTransfers = int1;
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      String string1 = multiShortestPathTree0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("MultiSPT(1 vertices)", string1);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals((-291), routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.dump();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRAINISH;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      
      multiShortestPathTree0.dump();
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      
      int int0 = 2049;
      HashMap<Vertex, List<State>> hashMap0 = new HashMap<Vertex, List<State>>(int0, routingRequest0.bikeRentalDropoffCost);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) hashMap0;
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(multiShortestPathTree0.stateSets.isEmpty());
      assertEquals(0, multiShortestPathTree0.stateSets.size());
      
      double double0 = 0.0;
      String string0 = "";
      double double1 = 1539.78;
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, routingRequest0.heuristicWeight, double1);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals("", onboardDepartVertex0.getName());
      assertNotNull(onboardDepartVertex0);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      
      Vector<State> vector0 = new Vector<State>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      State state0 = null;
      boolean boolean2 = vector0.add(state0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      List<State> list0 = hashMap0.put(onboardDepartVertex0, vector0);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(1539.78, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(1539.78, onboardDepartVertex0.getLat(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(1.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNull(list0);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      
      routingRequest0.heuristicWeight = double0;
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      
      int int1 = (-291);
      Graph graph0 = new Graph();
      assertEquals(0, graph0.countVertices());
      assertNotNull(graph0);
      
      int int2 = 1;
      PriorityQueue<StreetEdge> priorityQueue0 = new PriorityQueue<StreetEdge>(int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      double double2 = 2.356194490192345;
      PrecisionModel precisionModel0 = new PrecisionModel(double2);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2.356194490192345, precisionModel0.getScale(), 0.01);
      assertFalse(precisionModel0.isFloating());
      assertEquals(0.0, precisionModel0.getOffsetX(), 0.01);
      assertEquals(2, precisionModel0.getMaximumSignificantDigits());
      assertEquals(0.0, precisionModel0.getOffsetY(), 0.01);
      assertNotNull(precisionModel0);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      
      PrecisionModel precisionModel1 = new PrecisionModel(precisionModel0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertTrue(precisionModel1.equals((Object)precisionModel0));
      assertEquals(2.356194490192345, precisionModel0.getScale(), 0.01);
      assertFalse(precisionModel0.isFloating());
      assertEquals(0.0, precisionModel0.getOffsetX(), 0.01);
      assertEquals(2, precisionModel0.getMaximumSignificantDigits());
      assertEquals(0.0, precisionModel0.getOffsetY(), 0.01);
      assertEquals(0.0, precisionModel1.getOffsetX(), 0.01);
      assertEquals(0.0, precisionModel1.getOffsetY(), 0.01);
      assertFalse(precisionModel1.isFloating());
      assertEquals(2, precisionModel1.getMaximumSignificantDigits());
      assertEquals(2.356194490192345, precisionModel1.getScale(), 0.01);
      assertNotNull(precisionModel1);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      
      double double3 = 898.329;
      double double4 = 840.424794;
      double double5 = 0.0035;
      Coordinate coordinate0 = new Coordinate(double3, double4, double5);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double5, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double5, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotNull(coordinate0);
      assertEquals(898.329, coordinate0.x, 0.01);
      assertEquals(Double.NaN, Coordinate.NULL_ORDINATE, 0.01);
      assertEquals(840.424794, coordinate0.y, 0.01);
      assertEquals(1, Coordinate.Y);
      assertEquals(0, Coordinate.X);
      assertEquals(2, Coordinate.Z);
      assertEquals(0.0035, coordinate0.z, 0.01);
      
      Coordinate coordinate1 = new Coordinate(coordinate0);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double5, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double5, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertTrue(coordinate1.equals((Object)coordinate0));
      assertNotNull(coordinate1);
      assertEquals(898.329, coordinate0.x, 0.01);
      assertEquals(Double.NaN, Coordinate.NULL_ORDINATE, 0.01);
      assertEquals(840.424794, coordinate0.y, 0.01);
      assertEquals(1, Coordinate.Y);
      assertEquals(0, Coordinate.X);
      assertEquals(2, Coordinate.Z);
      assertEquals(0.0035, coordinate0.z, 0.01);
      assertEquals(1, Coordinate.Y);
      assertEquals(0, Coordinate.X);
      assertEquals(2, Coordinate.Z);
      assertEquals(0.0035, coordinate1.z, 0.01);
      assertEquals(840.424794, coordinate1.y, 0.01);
      assertEquals(Double.NaN, Coordinate.NULL_ORDINATE, 0.01);
      assertEquals(898.329, coordinate1.x, 0.01);
      
      Coordinate coordinate2 = precisionModel1.toInternal(coordinate1);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double5, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double4, 0.01);
      assertTrue(precisionModel0.equals((Object)precisionModel1));
      assertTrue(precisionModel1.equals((Object)precisionModel0));
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double5, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double5, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertTrue(coordinate0.equals((Object)coordinate1));
      assertTrue(coordinate1.equals((Object)coordinate0));
      assertFalse(coordinate2.equals((Object)coordinate0));
      assertFalse(coordinate2.equals((Object)coordinate1));
      assertEquals(2.356194490192345, precisionModel0.getScale(), 0.01);
      assertFalse(precisionModel0.isFloating());
      assertEquals(0.0, precisionModel0.getOffsetX(), 0.01);
      assertEquals(2, precisionModel0.getMaximumSignificantDigits());
      assertEquals(0.0, precisionModel0.getOffsetY(), 0.01);
      assertEquals(0.0, precisionModel1.getOffsetX(), 0.01);
      assertEquals(0.0, precisionModel1.getOffsetY(), 0.01);
      assertFalse(precisionModel1.isFloating());
      assertEquals(2, precisionModel1.getMaximumSignificantDigits());
      assertEquals(2.356194490192345, precisionModel1.getScale(), 0.01);
      assertNotSame(precisionModel0, precisionModel1);
      assertNotSame(precisionModel1, precisionModel0);
      assertNotSame(coordinate0, coordinate2);
      assertNotSame(coordinate0, coordinate1);
      assertNotSame(coordinate1, coordinate2);
      assertNotSame(coordinate1, coordinate0);
      assertNotSame(coordinate2, coordinate0);
      assertNotSame(coordinate2, coordinate1);
      assertNotNull(coordinate2);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      assertEquals(898.329, coordinate0.x, 0.01);
      assertEquals(Double.NaN, Coordinate.NULL_ORDINATE, 0.01);
      assertEquals(840.424794, coordinate0.y, 0.01);
      assertEquals(1, Coordinate.Y);
      assertEquals(0, Coordinate.X);
      assertEquals(2, Coordinate.Z);
      assertEquals(0.0035, coordinate0.z, 0.01);
      assertEquals(1, Coordinate.Y);
      assertEquals(0, Coordinate.X);
      assertEquals(2, Coordinate.Z);
      assertEquals(0.0035, coordinate1.z, 0.01);
      assertEquals(840.424794, coordinate1.y, 0.01);
      assertEquals(Double.NaN, Coordinate.NULL_ORDINATE, 0.01);
      assertEquals(898.329, coordinate1.x, 0.01);
      assertEquals(840.3380995252074, coordinate2.y, 0.01);
      assertEquals(898.4827054014465, coordinate2.x, 0.01);
      assertEquals(Double.NaN, Coordinate.NULL_ORDINATE, 0.01);
      assertEquals(1, Coordinate.Y);
      assertEquals(0, Coordinate.X);
      assertEquals(2, Coordinate.Z);
      assertEquals(0.0035, coordinate2.z, 0.01);
      
      StreetLocation streetLocation0 = StreetLocation.createStreetLocationOnEdges(graph0, string0, routingRequest0.routerId, priorityQueue0, coordinate2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double5, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double4, 0.01);
      assertTrue(precisionModel0.equals((Object)precisionModel1));
      assertTrue(precisionModel1.equals((Object)precisionModel0));
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double5, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double5, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertTrue(coordinate0.equals((Object)coordinate1));
      assertFalse(coordinate0.equals((Object)coordinate2));
      assertFalse(coordinate1.equals((Object)coordinate2));
      assertTrue(coordinate1.equals((Object)coordinate0));
      assertFalse(coordinate2.equals((Object)coordinate0));
      assertFalse(coordinate2.equals((Object)coordinate1));
      assertEquals("", streetLocation0.getName());
      assertEquals(898.4827054014465, streetLocation0.getLon(), 0.01);
      assertEquals(1, streetLocation0.getIndex());
      assertEquals(0, streetLocation0.getDegreeOut());
      assertEquals(840.3380995252074, streetLocation0.getY(), 0.01);
      assertEquals(2, streetLocation0.getMaxIndex());
      assertEquals(840.3380995252074, streetLocation0.getLat(), 0.01);
      assertEquals("", streetLocation0.getLabel());
      assertFalse(streetLocation0.isWheelchairAccessible());
      assertEquals(0, streetLocation0.getDegreeIn());
      assertEquals(898.4827054014465, streetLocation0.getX(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, graph0.countVertices());
      assertEquals(0, priorityQueue0.size());
      assertEquals(2.356194490192345, precisionModel0.getScale(), 0.01);
      assertFalse(precisionModel0.isFloating());
      assertEquals(0.0, precisionModel0.getOffsetX(), 0.01);
      assertEquals(2, precisionModel0.getMaximumSignificantDigits());
      assertEquals(0.0, precisionModel0.getOffsetY(), 0.01);
      assertEquals(0.0, precisionModel1.getOffsetX(), 0.01);
      assertEquals(0.0, precisionModel1.getOffsetY(), 0.01);
      assertFalse(precisionModel1.isFloating());
      assertEquals(2, precisionModel1.getMaximumSignificantDigits());
      assertEquals(2.356194490192345, precisionModel1.getScale(), 0.01);
      assertNotSame(precisionModel0, precisionModel1);
      assertNotSame(precisionModel1, precisionModel0);
      assertNotSame(coordinate0, coordinate2);
      assertNotSame(coordinate0, coordinate1);
      assertNotSame(coordinate1, coordinate2);
      assertNotSame(coordinate1, coordinate0);
      assertNotSame(coordinate2, coordinate0);
      assertNotSame(coordinate2, coordinate1);
      assertNotNull(streetLocation0);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      assertEquals(898.329, coordinate0.x, 0.01);
      assertEquals(Double.NaN, Coordinate.NULL_ORDINATE, 0.01);
      assertEquals(840.424794, coordinate0.y, 0.01);
      assertEquals(1, Coordinate.Y);
      assertEquals(0, Coordinate.X);
      assertEquals(2, Coordinate.Z);
      assertEquals(0.0035, coordinate0.z, 0.01);
      assertEquals(1, Coordinate.Y);
      assertEquals(0, Coordinate.X);
      assertEquals(2, Coordinate.Z);
      assertEquals(0.0035, coordinate1.z, 0.01);
      assertEquals(840.424794, coordinate1.y, 0.01);
      assertEquals(Double.NaN, Coordinate.NULL_ORDINATE, 0.01);
      assertEquals(898.329, coordinate1.x, 0.01);
      assertEquals(840.3380995252074, coordinate2.y, 0.01);
      assertEquals(898.4827054014465, coordinate2.x, 0.01);
      assertEquals(Double.NaN, Coordinate.NULL_ORDINATE, 0.01);
      assertEquals(1, Coordinate.Y);
      assertEquals(0, Coordinate.X);
      assertEquals(2, Coordinate.Z);
      assertEquals(0.0035, coordinate2.z, 0.01);
      
      List<State> list1 = hashMap0.put(streetLocation0, vector0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double5, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double4, 0.01);
      assertTrue(precisionModel0.equals((Object)precisionModel1));
      assertTrue(precisionModel1.equals((Object)precisionModel0));
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double5, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double5, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertTrue(coordinate0.equals((Object)coordinate1));
      assertFalse(coordinate0.equals((Object)coordinate2));
      assertFalse(coordinate1.equals((Object)coordinate2));
      assertTrue(coordinate1.equals((Object)coordinate0));
      assertFalse(coordinate2.equals((Object)coordinate0));
      assertFalse(coordinate2.equals((Object)coordinate1));
      assertEquals("", streetLocation0.getName());
      assertEquals(898.4827054014465, streetLocation0.getLon(), 0.01);
      assertEquals(1, streetLocation0.getIndex());
      assertEquals(0, streetLocation0.getDegreeOut());
      assertEquals(840.3380995252074, streetLocation0.getY(), 0.01);
      assertEquals(2, streetLocation0.getMaxIndex());
      assertEquals(840.3380995252074, streetLocation0.getLat(), 0.01);
      assertEquals("", streetLocation0.getLabel());
      assertFalse(streetLocation0.isWheelchairAccessible());
      assertEquals(0, streetLocation0.getDegreeIn());
      assertEquals(898.4827054014465, streetLocation0.getX(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, graph0.countVertices());
      assertEquals(0, priorityQueue0.size());
      assertEquals(2.356194490192345, precisionModel0.getScale(), 0.01);
      assertFalse(precisionModel0.isFloating());
      assertEquals(0.0, precisionModel0.getOffsetX(), 0.01);
      assertEquals(2, precisionModel0.getMaximumSignificantDigits());
      assertEquals(0.0, precisionModel0.getOffsetY(), 0.01);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0.0, precisionModel1.getOffsetX(), 0.01);
      assertEquals(0.0, precisionModel1.getOffsetY(), 0.01);
      assertFalse(precisionModel1.isFloating());
      assertEquals(2, precisionModel1.getMaximumSignificantDigits());
      assertEquals(2.356194490192345, precisionModel1.getScale(), 0.01);
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotSame(precisionModel0, precisionModel1);
      assertNotSame(precisionModel1, precisionModel0);
      assertNotSame(coordinate0, coordinate2);
      assertNotSame(coordinate0, coordinate1);
      assertNotSame(coordinate1, coordinate2);
      assertNotSame(coordinate1, coordinate0);
      assertNotSame(coordinate2, coordinate0);
      assertNotSame(coordinate2, coordinate1);
      assertNull(list1);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      assertEquals(898.329, coordinate0.x, 0.01);
      assertEquals(Double.NaN, Coordinate.NULL_ORDINATE, 0.01);
      assertEquals(840.424794, coordinate0.y, 0.01);
      assertEquals(1, Coordinate.Y);
      assertEquals(0, Coordinate.X);
      assertEquals(2, Coordinate.Z);
      assertEquals(0.0035, coordinate0.z, 0.01);
      assertEquals(1, Coordinate.Y);
      assertEquals(0, Coordinate.X);
      assertEquals(2, Coordinate.Z);
      assertEquals(0.0035, coordinate1.z, 0.01);
      assertEquals(840.424794, coordinate1.y, 0.01);
      assertEquals(Double.NaN, Coordinate.NULL_ORDINATE, 0.01);
      assertEquals(898.329, coordinate1.x, 0.01);
      assertEquals(840.3380995252074, coordinate2.y, 0.01);
      assertEquals(898.4827054014465, coordinate2.x, 0.01);
      assertEquals(Double.NaN, Coordinate.NULL_ORDINATE, 0.01);
      assertEquals(1, Coordinate.Y);
      assertEquals(0, Coordinate.X);
      assertEquals(2, Coordinate.Z);
      assertEquals(0.0035, coordinate2.z, 0.01);
      
      String string1 = multiShortestPathTree0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("MultiSPT(2 vertices)", string1);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(2, multiShortestPathTree0.getVertexCount());
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      
      multiShortestPathTree0.dump();
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(2, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      assertFalse(set1.equals((Object)set0));
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(2, set1.size());
      assertFalse(set1.isEmpty());
      assertEquals(2, multiShortestPathTree0.getVertexCount());
      assertNotNull(set1);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      
      String string2 = multiShortestPathTree0.toString();
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("MultiSPT(2 vertices)", string2);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(2, multiShortestPathTree0.getVertexCount());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.getstateSets();
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(2, multiShortestPathTree0.getVertexCount());
      assertEquals(2, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      
      int int3 = multiShortestPathTree0.getVertexCount();
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(2, int3);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(2, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(onboardDepartVertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }
}
