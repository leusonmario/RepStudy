/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 14:56:44 GMT 2021
 */

package org.opentripplanner.routing.spt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.opentripplanner.graph_builder.annotation.NonStationParentStation;
import org.opentripplanner.routing.core.OptimizeType;
import org.opentripplanner.routing.core.RoutingRequest;
import org.opentripplanner.routing.core.State;
import org.opentripplanner.routing.core.StateEditor;
import org.opentripplanner.routing.core.TraverseMode;
import org.opentripplanner.routing.core.TraverseModeSet;
import org.opentripplanner.routing.edgetype.ElevatorBoardEdge;
import org.opentripplanner.routing.edgetype.ElevatorHopEdge;
import org.opentripplanner.routing.edgetype.StreetTraversalPermission;
import org.opentripplanner.routing.graph.Graph;
import org.opentripplanner.routing.graph.Vertex;
import org.opentripplanner.routing.spt.GraphPath;
import org.opentripplanner.routing.spt.MultiShortestPathTree;
import org.opentripplanner.routing.vertextype.ElevatorOffboardVertex;
import org.opentripplanner.routing.vertextype.IntersectionVertex;
import org.opentripplanner.routing.vertextype.OnboardDepartVertex;
import org.opentripplanner.routing.vertextype.TransitStop;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiShortestPathTree_ESTest extends MultiShortestPathTree_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BUSISH;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertNotNull(set0);
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, int0);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertTrue(boolean0);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      
      routingRequest0.kissAndRide = routingRequest0.softPreTransitLimiting;
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      boolean boolean1 = multiShortestPathTree0.visit(state0);
      assertTrue(boolean1 == boolean0);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.isFinal());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertTrue(boolean1);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      
      String string0 = multiShortestPathTree0.toString();
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals("MultiSPT(1 vertices)", string0);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertNotNull(string0);
      
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.parkAndRide);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertNull(state1);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, multiShortestPathTree0.options);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBikeParked());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      state0.weight = routingRequest0.carAccelerationSpeed;
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBikeParked());
      assertEquals(2.9, state0.getWeight(), 0.01);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBikeParked());
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertTrue(boolean0);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(2.9, state0.weight, 0.01);
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertFalse(boolean1 == boolean0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBikeParked());
      assertEquals(2.9, state0.getWeight(), 0.01);
      assertFalse(boolean1);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(2.9, state0.weight, 0.01);
      
      State state1 = new State(vertex0, multiShortestPathTree0.options);
      assertFalse(state1.equals((Object)state0));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isBikeParked());
      assertFalse(state1.isOnboard());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertTrue(state1.isFinal());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertNull(state1.getBackMode());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertNotNull(state1);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertFalse(collection0.contains(state1));
      assertTrue(collection0.contains(state0));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertNotNull(collection0);
      
      boolean boolean2 = multiShortestPathTree0.visit(state1);
      assertFalse(state1.equals((Object)state0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(state1, state0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isBikeParked());
      assertFalse(state1.isOnboard());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertTrue(state1.isFinal());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertNull(state1.getBackMode());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertFalse(boolean2);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRANSIT;
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.batch);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.batch);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertNotNull(multiShortestPathTree0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      Vertex vertex0 = null;
      State state0 = multiShortestPathTree0.getState(vertex0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.batch);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertNull(state0);
      
      State state1 = new State(vertex0, multiShortestPathTree0.options);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBikeParked());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isBikeRenting());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getBackMode());
      assertFalse(state1.getReverseOptimizing());
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isEverBoarded());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertFalse(state1.isBackWalkingBike());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.batch);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state1);
      
      state1.weight = routingRequest0.carAccelerationSpeed;
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBikeParked());
      assertEquals(2.9, state1.getWeight(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isBikeRenting());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getBackMode());
      assertFalse(state1.getReverseOptimizing());
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isEverBoarded());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertFalse(state1.isBackWalkingBike());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      
      boolean boolean0 = multiShortestPathTree0.add(state1);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBikeParked());
      assertEquals(2.9, state1.getWeight(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isBikeRenting());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getBackMode());
      assertFalse(state1.getReverseOptimizing());
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isEverBoarded());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertFalse(state1.isBackWalkingBike());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertTrue(boolean0);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.batch);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(2.9, state1.weight, 0.01);
      
      multiShortestPathTree0.dump();
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.batch);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      
      State state2 = new State(vertex0, multiShortestPathTree0.options);
      assertFalse(state2.equals((Object)state1));
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertFalse(state2.isBikeRenting());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(state2.isBikeParked());
      assertEquals(0, state2.getNumBoardings());
      assertTrue(state2.isFinal());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state2.getNonTransitMode());
      assertFalse(state2.isCarParked());
      assertNull(state2.getBackMode());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertFalse(state2.isEverBoarded());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.batch);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(0.0, state2.weight, 0.01);
      assertNotNull(state2);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertFalse(collection0.contains(state2));
      assertTrue(collection0.contains(state1));
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.batch);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertNotNull(collection0);
      
      boolean boolean1 = multiShortestPathTree0.add(state2);
      assertFalse(state2.equals((Object)state1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(state2, state1);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281000L, state2.getTimeInMillis());
      assertFalse(state2.isBikeRenting());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(state2.isBikeParked());
      assertEquals(0, state2.getNumBoardings());
      assertTrue(state2.isFinal());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state2.getStartTimeSeconds());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state2.getNonTransitMode());
      assertFalse(state2.isCarParked());
      assertNull(state2.getBackMode());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(1392409281L, state2.getTimeSeconds());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertFalse(state2.isEverBoarded());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertTrue(boolean1);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.batch);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(0.0, state2.weight, 0.01);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      double double0 = (-241.707);
      state0.weight = double0;
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertTrue(boolean0);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals((-241.707), state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      
      multiShortestPathTree0.dump();
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      
      State state1 = new State(vertex0, routingRequest0.elevatorHopCost, multiShortestPathTree0.options);
      assertFalse(state1.equals((Object)state0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state1.isEverBoarded());
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertNull(state1.getBackMode());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeParked());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state1);
      
      Graph graph0 = new Graph();
      assertEquals(0, graph0.countVertices());
      assertNotNull(graph0);
      
      routingRequest0.setRoutingContext(graph0, vertex0, vertex0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, graph0.countVertices());
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      
      boolean boolean1 = multiShortestPathTree0.add(state1);
      assertFalse(state1.equals((Object)state0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(state1, state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state1.isEverBoarded());
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertNull(state1.getBackMode());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeParked());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertTrue(boolean1);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertTrue(list0.contains(state1));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertNotNull(list0);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertFalse(state2.equals((Object)state1));
      assertSame(state2, state0);
      assertNotSame(state2, state1);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertFalse(state2.isCarParked());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertFalse(state2.isEverBoarded());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals((-241.707), state2.getWeight(), 0.01);
      assertEquals(60L, state2.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state2.getNonTransitMode());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertNull(state2.getBackMode());
      assertFalse(state2.isOnboard());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isBikeParked());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state2.getNumBoardings());
      assertEquals(60000L, state2.getTimeInMillis());
      assertNull(state2.getZone());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(60L, state2.getStartTimeSeconds());
      assertEquals(0, state2.getPreTransitTime());
      assertTrue(state2.isFinal());
      assertFalse(state2.isBikeRenting());
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals((-241.707), state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertNotNull(state2);
      
      State state3 = multiShortestPathTree0.getState(vertex0);
      assertFalse(state3.equals((Object)state1));
      assertNotSame(state3, state1);
      assertSame(state3, state2);
      assertSame(state3, state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(state3.isFinal());
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertFalse(state3.getReverseOptimizing());
      assertEquals(0.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertFalse(state3.isEverBoarded());
      assertFalse(state3.isCarParked());
      assertNull(state3.getBackMode());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertNull(state3.getZone());
      assertEquals(0, state3.getTimeDeltaSeconds());
      assertEquals((-241.707), state3.getWeight(), 0.01);
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertEquals(60000L, state3.getTimeInMillis());
      assertFalse(state3.isOnboard());
      assertEquals(0L, state3.getElapsedTimeSeconds());
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertFalse(state3.isBackWalkingBike());
      assertEquals(0, state3.getAbsTimeDeltaSeconds());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertEquals(60L, state3.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state3.getNonTransitMode());
      assertEquals(0, state3.getNumBoardings());
      assertFalse(state3.isBikeRenting());
      assertEquals(0, state3.getPreTransitTime());
      assertFalse(state3.isBikeParked());
      assertEquals(60L, state3.getStartTimeSeconds());
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals((-241.707), state3.weight, 0.01);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertNotNull(state3);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertTrue(state0.isFinal());
      assertNull(state0.getZone());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      state0.weight = routingRequest0.waitReluctance;
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertTrue(state0.isFinal());
      assertNull(state0.getZone());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertTrue(state0.isFinal());
      assertNull(state0.getZone());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(boolean0);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertTrue(state0.isFinal());
      assertNull(state0.getZone());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(boolean1);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      
      State state1 = new State(vertex0, multiShortestPathTree0.options);
      assertFalse(state1.equals((Object)state0));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state1.isBikeParked());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeRenting());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertNotNull(state1);
      
      state1.stateData = state0.stateData;
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertTrue(state0.isFinal());
      assertNull(state0.getZone());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state1.isBikeParked());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(1392409221L, state1.getElapsedTimeSeconds());
      assertEquals(1.392409221E9, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(60L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeRenting());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertTrue(collection0.contains(state0));
      assertFalse(collection0.contains(state1));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertNotNull(collection0);
      
      boolean boolean2 = multiShortestPathTree0.add(state1);
      assertFalse(state1.equals((Object)state0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(state1, state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state1.isBikeParked());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(1392409221L, state1.getElapsedTimeSeconds());
      assertEquals(1.392409221E9, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(60L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeRenting());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertTrue(boolean2);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRANSIT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertNotNull(multiShortestPathTree0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      PriorityQueue<TraverseMode> priorityQueue0 = new PriorityQueue<TraverseMode>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getCar());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTrainish());
      assertNotNull(traverseModeSet0);
      
      TraverseModeSet traverseModeSet1 = traverseModeSet0.getNonTransitSet();
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertNotSame(traverseModeSet0, traverseModeSet1);
      assertNotSame(traverseModeSet1, traverseModeSet0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getCar());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet1.getCustomMotorVehicle());
      assertFalse(traverseModeSet1.getSubway());
      assertFalse(traverseModeSet1.getTrainish());
      assertEquals(0, traverseModeSet1.getMask());
      assertFalse(traverseModeSet1.getBusish());
      assertFalse(traverseModeSet1.getDriving());
      assertFalse(traverseModeSet1.getRail());
      assertFalse(traverseModeSet1.getWalk());
      assertFalse(traverseModeSet1.getFunicular());
      assertFalse(traverseModeSet1.getFerry());
      assertFalse(traverseModeSet1.getTraininsh());
      assertFalse(traverseModeSet1.getCar());
      assertFalse(traverseModeSet1.isTransit());
      assertFalse(traverseModeSet1.getBus());
      assertFalse(traverseModeSet1.getCableCar());
      assertFalse(traverseModeSet1.isValid());
      assertFalse(traverseModeSet1.getGondola());
      assertFalse(traverseModeSet1.getBicycle());
      assertFalse(traverseModeSet1.getTram());
      assertNotNull(traverseModeSet1);
      
      OptimizeType optimizeType0 = OptimizeType.TRANSFERS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet1, optimizeType0);
      assertTrue(traverseModeSet0.equals((Object)traverseModeSet1));
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertEquals(0, priorityQueue0.size());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getCar());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet1.getCustomMotorVehicle());
      assertFalse(traverseModeSet1.getSubway());
      assertFalse(traverseModeSet1.getTrainish());
      assertEquals(0, traverseModeSet1.getMask());
      assertFalse(traverseModeSet1.getBusish());
      assertFalse(traverseModeSet1.getDriving());
      assertFalse(traverseModeSet1.getRail());
      assertFalse(traverseModeSet1.getWalk());
      assertFalse(traverseModeSet1.getFunicular());
      assertFalse(traverseModeSet1.getFerry());
      assertFalse(traverseModeSet1.getTraininsh());
      assertFalse(traverseModeSet1.getCar());
      assertFalse(traverseModeSet1.isTransit());
      assertFalse(traverseModeSet1.getBus());
      assertFalse(traverseModeSet1.getCableCar());
      assertFalse(traverseModeSet1.isValid());
      assertFalse(traverseModeSet1.getGondola());
      assertFalse(traverseModeSet1.getBicycle());
      assertFalse(traverseModeSet1.getTram());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertTrue(traverseModeSet0.equals((Object)traverseModeSet1));
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertEquals(0, priorityQueue0.size());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getCar());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet1.getCustomMotorVehicle());
      assertFalse(traverseModeSet1.getSubway());
      assertFalse(traverseModeSet1.getTrainish());
      assertEquals(0, traverseModeSet1.getMask());
      assertFalse(traverseModeSet1.getBusish());
      assertFalse(traverseModeSet1.getDriving());
      assertFalse(traverseModeSet1.getRail());
      assertFalse(traverseModeSet1.getWalk());
      assertFalse(traverseModeSet1.getFunicular());
      assertFalse(traverseModeSet1.getFerry());
      assertFalse(traverseModeSet1.getTraininsh());
      assertFalse(traverseModeSet1.getCar());
      assertFalse(traverseModeSet1.isTransit());
      assertFalse(traverseModeSet1.getBus());
      assertFalse(traverseModeSet1.getCableCar());
      assertFalse(traverseModeSet1.isValid());
      assertFalse(traverseModeSet1.getGondola());
      assertFalse(traverseModeSet1.getBicycle());
      assertFalse(traverseModeSet1.getTram());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertTrue(traverseModeSet0.equals((Object)traverseModeSet1));
      assertTrue(traverseModeSet1.equals((Object)traverseModeSet0));
      assertNotSame(traverseModeSet0, traverseModeSet1);
      assertNotSame(traverseModeSet1, traverseModeSet0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getSubway());
      assertFalse(traverseModeSet0.getCar());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getTrainish());
      assertFalse(traverseModeSet1.getCustomMotorVehicle());
      assertFalse(traverseModeSet1.getSubway());
      assertFalse(traverseModeSet1.getTrainish());
      assertEquals(0, traverseModeSet1.getMask());
      assertFalse(traverseModeSet1.getBusish());
      assertFalse(traverseModeSet1.getDriving());
      assertFalse(traverseModeSet1.getRail());
      assertFalse(traverseModeSet1.getWalk());
      assertFalse(traverseModeSet1.getFunicular());
      assertFalse(traverseModeSet1.getFerry());
      assertFalse(traverseModeSet1.getTraininsh());
      assertFalse(traverseModeSet1.getCar());
      assertFalse(traverseModeSet1.isTransit());
      assertFalse(traverseModeSet1.getBus());
      assertFalse(traverseModeSet1.getCableCar());
      assertFalse(traverseModeSet1.isValid());
      assertFalse(traverseModeSet1.getGondola());
      assertFalse(traverseModeSet1.getBicycle());
      assertFalse(traverseModeSet1.getTram());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertNotNull(collection0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      OptimizeType optimizeType0 = OptimizeType.TRIANGLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertNotNull(multiShortestPathTree0);
      
      multiShortestPathTree0.dump();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, int0);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getWalk());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCableCar());
      assertNotNull(traverseModeSet0);
      
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getWalk());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCableCar());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getWalk());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCableCar());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertNotNull(multiShortestPathTree0);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getWalk());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCableCar());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertNotNull(set0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      assertTrue(traverseModeSet0.getTrainish());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBicycle());
      assertNotNull(traverseModeSet0);
      
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      assertTrue(traverseModeSet0.getTrainish());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertNotNull(routingRequest0);
      
      RoutingRequest routingRequest1 = routingRequest0.clone();
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertTrue(traverseModeSet0.getTrainish());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertNotNull(routingRequest1);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertTrue(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertTrue(traverseModeSet0.getTrainish());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      String string0 = multiShortestPathTree0.toString();
      assertTrue(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertTrue(traverseModeSet0.getTrainish());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals("MultiSPT(0 vertices)", string0);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(3, routingRequest1.numItineraries);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(0, routingRequest1.alightSlack);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertNotNull(string0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertNotNull(routingRequest0);
      
      double double0 = 0.005;
      routingRequest0.heuristicWeight = double0;
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      assertSame(routingRequest1, routingRequest0);
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0.005, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertNotNull(routingRequest1);
      
      String string0 = routingRequest1.getPreferredAgenciesStr();
      assertSame(routingRequest0, routingRequest1);
      assertSame(routingRequest1, routingRequest0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals("", string0);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.005, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0.005, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertNotNull(string0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.005, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0.005, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertNotNull(multiShortestPathTree0);
      
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(routingRequest1.routerId, routingRequest0.elevatorHopTime, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(20.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(20.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.005, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0.005, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertNotNull(onboardDepartVertex0);
      
      State state0 = multiShortestPathTree0.getState(onboardDepartVertex0);
      assertSame(routingRequest0, routingRequest1);
      assertSame(routingRequest1, routingRequest0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest1.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      assertEquals("", onboardDepartVertex0.getName());
      assertEquals(20.0, onboardDepartVertex0.getX(), 0.01);
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(20.0, onboardDepartVertex0.getLon(), 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.005, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.batch);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0.005, routingRequest1.heuristicWeight, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertNull(state0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      
      Graph graph0 = new Graph();
      assertEquals(0, graph0.countVertices());
      assertNotNull(graph0);
      
      String string0 = "TBz";
      Vertex vertex0 = graph0.getVertex(string0);
      assertEquals(0, graph0.countVertices());
      assertNull(vertex0);
      
      boolean boolean0 = true;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, boolean0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, graph0.countVertices());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(collection0);
      
      Vertex vertex1 = null;
      List<State> list1 = multiShortestPathTree0.getStates(vertex1);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNull(list1);
      
      String string1 = multiShortestPathTree0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals("MultiSPT(0 vertices)", string1);
      assertNotNull(string1);
      
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      assertTrue(collection1.equals((Object)collection0));
      assertNotSame(collection1, collection0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(collection1);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertNotNull(routingRequest0);
      
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      assertSame(routingRequest1, routingRequest0);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(3, routingRequest1.numItineraries);
      assertNotNull(routingRequest1);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(3, routingRequest1.numItineraries);
      assertNotNull(multiShortestPathTree0);
      
      String string0 = multiShortestPathTree0.toString();
      assertSame(routingRequest0, routingRequest1);
      assertSame(routingRequest1, routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals("MultiSPT(0 vertices)", string0);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(3, routingRequest1.numItineraries);
      assertNotNull(string0);
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertSame(routingRequest0, routingRequest1);
      assertSame(routingRequest1, routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, int0);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest1.arriveBy);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(3, routingRequest1.numItineraries);
      
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertNotNull(routingRequest0);
      
      int int0 = (-388);
      routingRequest0.numItineraries = int0;
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals((-388), routingRequest0.getNumItineraries());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals((-388), routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals((-388), routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertNotNull(multiShortestPathTree0);
      
      int int1 = multiShortestPathTree0.getVertexCount();
      assertFalse(int1 == int0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals((-388), routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, int1);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals((-388), routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      
      TransitStop transitStop0 = null;
      multiShortestPathTree0.dump();
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals((-388), routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals((-388), routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      
      int int2 = (-1);
      routingRequest0.setMaxPreTransitTime(int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals((-388), routingRequest0.getNumItineraries());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals((-388), routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      
      NonStationParentStation nonStationParentStation0 = new NonStationParentStation(transitStop0);
      assertNotNull(nonStationParentStation0);
      
      Vertex vertex0 = nonStationParentStation0.getReferencedVertex();
      assertNull(vertex0);
      
      State state0 = multiShortestPathTree0.getState(vertex0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals((-388), routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals((-388), routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertNull(state0);
      
      List<State> list0 = multiShortestPathTree0.getStates(transitStop0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals((-388), routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals((-388), routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertNull(list0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotNull(multiShortestPathTree0);
      
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getTrainish());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertNotNull(traverseModeSet0);
      
      boolean boolean0 = false;
      traverseModeSet0.setCar(boolean0);
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8179, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      
      boolean boolean1 = true;
      traverseModeSet0.setBicycle(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8179, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8179, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.batch);
      assertNotNull(routingRequest0);
      
      String string0 = traverseModeSet0.getAsStr();
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8179, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals("WALK, BICYCLE, TRAM, SUBWAY, RAIL, BUS, FERRY, CABLE_CAR, GONDOLA, FUNICULAR, TRANSIT, TRAINISH, BUSISH, CUSTOM_MOTOR_VEHICLE", string0);
      assertNotNull(string0);
      
      boolean boolean2 = true;
      traverseModeSet0.setBicycle(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8179, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      
      RoutingRequest routingRequest1 = routingRequest0.clone();
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8179, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.arriveBy);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(3, routingRequest1.numItineraries);
      assertNotNull(routingRequest1);
      
      String string1 = routingRequest1.getBannedAgenciesStr();
      assertTrue(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      assertNotSame(string1, string0);
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8179, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals("", string1);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.arriveBy);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(3, routingRequest1.numItineraries);
      assertNotNull(string1);
      
      boolean boolean3 = false;
      routingRequest1.bikeParkAndRide = boolean3;
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8179, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      
      int int0 = (-362);
      routingRequest1.otherThanPreferredRoutesPenalty = int0;
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8179, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      
      routingRequest1.stairsReluctance = routingRequest0.turnReluctance;
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8179, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      
      routingRequest1.parkAndRide = routingRequest0.parkAndRide;
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8179, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      
      double double0 = 1398.225401;
      routingRequest0.maxWeight = double0;
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8179, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getCableCar());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getSubway());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertEquals(8179, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1398.225401, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(1.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.walkingBike);
      assertFalse(routingRequest1.arriveBy);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertEquals((-362), routingRequest1.otherThanPreferredRoutesPenalty);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest1.boardSlack);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(3, routingRequest1.numItineraries);
      assertNotNull(multiShortestPathTree0);
      
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertNull(graphPath0);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertTrue(boolean0);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state0);
      assertFalse(boolean1 == boolean0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isCarParked());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(boolean1);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      
      multiShortestPathTree0.dump();
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertNull(graphPath0);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertTrue(boolean0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      
      Graph graph0 = new Graph();
      assertEquals(0, graph0.countVertices());
      assertNotNull(graph0);
      
      Class<Integer> class0 = Integer.class;
      Integer integer0 = graph0.getService(class0, routingRequest0.batch);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, graph0.countVertices());
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertNull(integer0);
      
      String string0 = "";
      double double0 = 552.57361;
      double double1 = 252.352898;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, string0, double0, double1, graph0.routerId);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, graph0.countVertices());
      assertEquals(552.57361, intersectionVertex0.getX(), 0.01);
      assertNull(intersectionVertex0.getName());
      assertEquals(252.352898, intersectionVertex0.getY(), 0.01);
      assertEquals(252.352898, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(552.57361, intersectionVertex0.getLon(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNotNull(intersectionVertex0);
      
      List<State> list0 = multiShortestPathTree0.getStates(intersectionVertex0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, graph0.countVertices());
      assertEquals(552.57361, intersectionVertex0.getX(), 0.01);
      assertNull(intersectionVertex0.getName());
      assertEquals(252.352898, intersectionVertex0.getY(), 0.01);
      assertEquals(252.352898, intersectionVertex0.getLat(), 0.01);
      assertEquals(1, intersectionVertex0.getMaxIndex());
      assertEquals(0, intersectionVertex0.getDegreeIn());
      assertFalse(intersectionVertex0.inferredFreeFlowing());
      assertEquals(552.57361, intersectionVertex0.getLon(), 0.01);
      assertEquals("", intersectionVertex0.getLabel());
      assertEquals(0, intersectionVertex0.getDegreeOut());
      assertEquals(0, intersectionVertex0.getIndex());
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(intersectionVertex0.trafficLight);
      assertFalse(intersectionVertex0.freeFlowing);
      assertNull(list0);
      
      List<State> list1 = multiShortestPathTree0.getStates(vertex0);
      assertTrue(list1.contains(state0));
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertNotNull(list1);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertNull(graphPath0);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertTrue(boolean0);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertTrue(collection0.contains(state0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertNotNull(collection0);
      
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      assertTrue(collection1.equals((Object)collection0));
      assertTrue(collection1.contains(state0));
      assertNotSame(collection1, collection0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertNotNull(collection1);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertFalse(state0.isOnboard());
      assertTrue(state0.isFinal());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeParked());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertNull(graphPath0);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertFalse(state0.isOnboard());
      assertTrue(state0.isFinal());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeParked());
      assertTrue(boolean0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, int0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(60000L, state0.getTimeInMillis());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertNull(graphPath0);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(60000L, state0.getTimeInMillis());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertTrue(boolean0);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      
      boolean boolean1 = multiShortestPathTree0.visit(state0);
      assertTrue(boolean1 == boolean0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(60000L, state0.getTimeInMillis());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertTrue(boolean1);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      
      multiShortestPathTree0.dump();
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertTrue(list0.contains(state0));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertNotNull(list0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isCarParked());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertNull(graphPath0);
      
      int int0 = (-270);
      routingRequest0.numItineraries = int0;
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isCarParked());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertTrue(boolean0);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals((-270), routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isCarParked());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertFalse(boolean1);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals((-270), routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      
      multiShortestPathTree0.dump();
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals((-270), routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isCarParked());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertTrue(boolean2);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals((-270), routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNull(graphPath0);
      
      double double0 = (-241.707);
      state0.weight = double0;
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertTrue(boolean0);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals((-241.707), state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertTrue(boolean1);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals((-241.707), state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      
      multiShortestPathTree0.dump();
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(boolean2);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals((-241.707), state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(state0.isFinal());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertNull(graphPath0);
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(state0.isFinal());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertTrue(boolean1);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(state0.isFinal());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertTrue(boolean2);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      
      multiShortestPathTree0.dump();
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertTrue(list0.contains(state0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertNotNull(list0);
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, int0);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      double double0 = 474.9638670141;
      state0.weight = double0;
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(474.9638670141, state0.getWeight(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(474.9638670141, state0.getWeight(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertTrue(boolean0);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(474.9638670141, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      
      multiShortestPathTree0.dump();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNull(graphPath0);
      
      double double0 = (-241.707);
      state0.weight = double0;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertTrue(boolean0);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals((-241.707), state0.weight, 0.01);
      
      State state1 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state1, state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertNotNull(multiShortestPathTree0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertNull(graphPath0);
      
      double double0 = (-241.707);
      state0.weight = double0;
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertTrue(boolean1);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals((-241.707), state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      
      boolean boolean2 = MultiShortestPathTree.dominates(state0, state0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertTrue(boolean2);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals((-241.707), state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, routingRequest0.useBikeRentalAvailabilityInformation, routingRequest0.kissAndRide, routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(boolean3);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      
      multiShortestPathTree0.dump();
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      
      State state1 = new State(vertex0, routingRequest0.elevatorHopCost, multiShortestPathTree0.options);
      assertFalse(state1.equals((Object)state0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isOnboard());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(20L, state1.getTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertNull(state1.getBackMode());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertFalse(state1.isBikeParked());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertNotNull(state1);
      
      boolean boolean4 = multiShortestPathTree0.visit(state1);
      assertFalse(state1.equals((Object)state0));
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertNotSame(state1, state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isOnboard());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(20L, state1.getTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertNull(state1.getBackMode());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertFalse(state1.isBikeParked());
      assertFalse(boolean4);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      
      boolean boolean5 = MultiShortestPathTree.dominates(state1, state1);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(state1.equals((Object)state0));
      assertNotSame(state1, state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isOnboard());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(20L, state1.getTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertNull(state1.getBackMode());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertFalse(state1.isBikeParked());
      assertFalse(boolean5);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      
      boolean boolean6 = multiShortestPathTree0.visit(state0);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean0);
      assertFalse(state0.equals((Object)state1));
      assertNotSame(state0, state1);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertTrue(boolean6);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals((-241.707), state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      
      multiShortestPathTree0.dump();
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      
      boolean boolean7 = MultiShortestPathTree.dominates(state1, state0);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7 == boolean2);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isOnboard());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(20L, state1.getTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertNull(state1.getBackMode());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertFalse(state1.isBikeParked());
      assertFalse(boolean7);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals((-241.707), state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BICYCLE;
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isOnboard());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertNull(graphPath0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isOnboard());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertTrue(boolean1);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isOnboard());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertTrue(boolean2);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      
      routingRequest0.kissAndRide = boolean2;
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isOnboard());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isFinal());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      
      multiShortestPathTree0.dump();
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      
      boolean boolean3 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertTrue(list0.contains(state0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertNotNull(list0);
      
      boolean boolean4 = multiShortestPathTree0.visit(state0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isOnboard());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isFinal());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertTrue(boolean4);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals("MultiSPT(1 vertices)", string0);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertNotNull(string0);
      
      State state1 = multiShortestPathTree0.getState(vertex0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertNull(state1);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BICYCLE;
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertTrue(state0.isFinal());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBikeParked());
      assertNull(state0.getBackMode());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertNull(graphPath0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertFalse(boolean1 == boolean0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertTrue(state0.isFinal());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBikeParked());
      assertNull(state0.getBackMode());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(boolean1);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertTrue(state0.isFinal());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBikeParked());
      assertNull(state0.getBackMode());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(boolean2);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      
      routingRequest0.kissAndRide = boolean2;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBikeParked());
      assertNull(state0.getBackMode());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      
      multiShortestPathTree0.dump();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      
      boolean boolean3 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertTrue(list0.contains(state0));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertNotNull(list0);
      
      boolean boolean4 = multiShortestPathTree0.visit(state0);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBikeParked());
      assertNull(state0.getBackMode());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(boolean4);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals("MultiSPT(1 vertices)", string0);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertNotNull(string0);
      
      State state1 = new State(vertex0, routingRequest0);
      assertFalse(state1.equals((Object)state0));
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertFalse(state1.isBikeParked());
      assertNull(state1.getBackMode());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertEquals(TraverseMode.CAR, state1.getNonTransitMode());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertNotNull(state1);
      
      boolean boolean5 = multiShortestPathTree0.add(state1);
      assertFalse(state1.equals((Object)state0));
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertNotSame(state1, state0);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertFalse(state1.isBikeParked());
      assertNull(state1.getBackMode());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertEquals(TraverseMode.CAR, state1.getNonTransitMode());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(boolean5);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertNotNull(multiShortestPathTree0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertNull(graphPath0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      state0.weight = routingRequest0.waitReluctance;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertFalse(boolean1 == boolean0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertTrue(boolean1);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1.0, state0.weight, 0.01);
      
      boolean boolean2 = MultiShortestPathTree.dominates(state0, state0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertTrue(boolean2);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1.0, state0.weight, 0.01);
      
      boolean boolean3 = multiShortestPathTree0.add(state0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertFalse(boolean3);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1.0, state0.weight, 0.01);
      
      multiShortestPathTree0.dump();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      
      State state1 = new State(vertex0, routingRequest0.MIN_SIMILARITY, routingRequest0);
      assertFalse(state1.equals((Object)state0));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isBikeParked());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(1000L, state1.getTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getNumBoardings());
      assertTrue(state1.isFinal());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(1000000L, state1.getTimeInMillis());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getBackMode());
      assertEquals(1000L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state1);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertTrue(list0.contains(state0));
      assertFalse(list0.contains(state1));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertNotNull(list0);
      
      boolean boolean4 = multiShortestPathTree0.add(state1);
      assertFalse(state1.equals((Object)state0));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertNotSame(state1, state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isBikeParked());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(1000L, state1.getTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getNumBoardings());
      assertTrue(state1.isFinal());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(1000000L, state1.getTimeInMillis());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getBackMode());
      assertEquals(1000L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertTrue(boolean4);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      
      boolean boolean5 = multiShortestPathTree0.visit(state0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(state0.equals((Object)state1));
      assertNotSame(state0, state1);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertFalse(boolean5);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1.0, state0.weight, 0.01);
      
      multiShortestPathTree0.dump();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertNotNull(multiShortestPathTree0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      state0.weight = routingRequest0.waitReluctance;
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertTrue(boolean0);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1.0, state0.weight, 0.01);
      
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertTrue(boolean1);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1.0, state0.weight, 0.01);
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(boolean2);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1.0, state0.weight, 0.01);
      
      multiShortestPathTree0.dump();
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      
      State state1 = new State(vertex0, multiShortestPathTree0.options);
      assertFalse(state1.equals((Object)state0));
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(state1.isFinal());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertNull(state1.getBackMode());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isBikeRenting());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isBikeParked());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isOnboard());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertNotNull(state1);
      
      state1.stateData = state0.stateData;
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state1.getStartTimeSeconds());
      assertTrue(state1.isFinal());
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertNull(state1.getBackMode());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(1.392409221E9, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(1392409221L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isBikeRenting());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isBikeParked());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isOnboard());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertTrue(collection0.contains(state0));
      assertFalse(collection0.contains(state1));
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertNotNull(collection0);
      
      boolean boolean3 = multiShortestPathTree0.add(state1);
      assertFalse(state1.equals((Object)state0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertNotSame(state1, state0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(60L, state1.getStartTimeSeconds());
      assertTrue(state1.isFinal());
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertNull(state1.getBackMode());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(1.392409221E9, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(1392409221L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isBikeRenting());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isBikeParked());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isOnboard());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertTrue(boolean3);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      
      System.setCurrentTimeMillis(routingRequest0.MIN_SIMILARITY);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertNull(graphPath0);
      
      double double0 = (-241.707);
      state0.weight = double0;
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(60000L, state0.getTimeInMillis());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(60000L, state0.getTimeInMillis());
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals((-241.707), state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      
      multiShortestPathTree0.dump();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      
      State state1 = new State(vertex0, routingRequest0.elevatorHopCost, multiShortestPathTree0.options);
      assertFalse(state1.equals((Object)state0));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.isBikeParked());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertTrue(state1.isFinal());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getBackMode());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state1);
      
      Graph graph0 = new Graph();
      assertEquals(0, graph0.countVertices());
      assertNotNull(graph0);
      
      routingRequest0.setRoutingContext(graph0, vertex0, vertex0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, graph0.countVertices());
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      
      boolean boolean1 = multiShortestPathTree0.visit(state1);
      assertFalse(state1.equals((Object)state0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(state1, state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.isBikeParked());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertTrue(state1.isFinal());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getBackMode());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(boolean1);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      
      boolean boolean2 = MultiShortestPathTree.dominates(state1, state0);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getBackMode());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.isBikeParked());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertTrue(state1.isFinal());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getBackMode());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(boolean2);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals((-241.707), state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertFalse(list0.contains(state1));
      assertTrue(list0.contains(state0));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertNotNull(list0);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertFalse(state2.equals((Object)state1));
      assertNotSame(state2, state1);
      assertSame(state2, state0);
      assertTrue(state2.isFinal());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state2.getNumBoardings());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(state2.isBikeParked());
      assertEquals(60L, state2.getStartTimeSeconds());
      assertEquals((-241.707), state2.getWeight(), 0.01);
      assertEquals(60000L, state2.getTimeInMillis());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state2.getNonTransitMode());
      assertEquals(60L, state2.getTimeSeconds());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.isCarParked());
      assertNull(state2.getBackMode());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertNull(state2.getZone());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals((-241.707), state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertNotNull(state2);
      
      multiShortestPathTree0.dump();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertNull(graphPath0);
      
      state0.weight = (double) routingRequest0.elevatorBoardCost;
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(90.0, state0.getWeight(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(90.0, state0.getWeight(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(boolean0);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(90.0, state0.weight, 0.01);
      
      multiShortestPathTree0.dump();
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      
      State state1 = new State(vertex0, routingRequest0.elevatorHopCost, multiShortestPathTree0.options);
      assertFalse(state1.equals((Object)state0));
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.isFinal());
      assertEquals(20L, state1.getTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isBikeParked());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertNull(state1.getBackMode());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state1);
      
      Graph graph0 = new Graph();
      assertEquals(0, graph0.countVertices());
      assertNotNull(graph0);
      
      routingRequest0.setRoutingContext(graph0, vertex0, vertex0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, graph0.countVertices());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      
      boolean boolean1 = multiShortestPathTree0.visit(state1);
      assertFalse(state1.equals((Object)state0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(state1, state0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.isFinal());
      assertEquals(20L, state1.getTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isBikeParked());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertNull(state1.getBackMode());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(boolean1);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      
      boolean boolean2 = MultiShortestPathTree.dominates(state1, state0);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(60L, state0.getTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(90.0, state0.getWeight(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isCarParked());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.isFinal());
      assertEquals(20L, state1.getTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isBikeParked());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertNull(state1.getBackMode());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getNumBoardings());
      assertTrue(boolean2);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(90.0, state0.weight, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertTrue(list0.contains(state0));
      assertFalse(list0.contains(state1));
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertNotNull(list0);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertFalse(state2.equals((Object)state1));
      assertSame(state2, state0);
      assertNotSame(state2, state1);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state2.isCarParked());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertFalse(state2.isEverBoarded());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.isBackWalkingBike());
      assertEquals(90.0, state2.getWeight(), 0.01);
      assertEquals(60L, state2.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state2.getNonTransitMode());
      assertFalse(state2.isBikeParked());
      assertNull(state2.getBackMode());
      assertFalse(state2.isOnboard());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(60000L, state2.getTimeInMillis());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(60L, state2.getStartTimeSeconds());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertTrue(state2.isFinal());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90.0, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertNotNull(state2);
      
      multiShortestPathTree0.dump();
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertNotNull(multiShortestPathTree0);
      
      String string0 = routingRequest0.getBannedRouteStr();
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals("", string0);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertNotNull(string0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeParked());
      assertNull(state0.getBackMode());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertNull(graphPath0);
      
      double double0 = (-241.707);
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeParked());
      assertNull(state0.getBackMode());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertTrue(boolean0);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      
      multiShortestPathTree0.dump();
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      
      State state1 = new State(vertex0, routingRequest0.elevatorHopCost, multiShortestPathTree0.options);
      assertFalse(state1.equals((Object)state0));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getBackMode());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isBikeParked());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.isFinal());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(20L, state1.getTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isCarParked());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state1);
      
      Graph graph0 = new Graph();
      assertEquals(0, graph0.countVertices());
      assertNotNull(graph0);
      
      routingRequest0.setRoutingContext(graph0, vertex0, vertex0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(0, graph0.countVertices());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      
      boolean boolean1 = MultiShortestPathTree.dominates(state1, state0);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeParked());
      assertNull(state0.getBackMode());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getBackMode());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isBikeParked());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.isFinal());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(20L, state1.getTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isCarParked());
      assertFalse(boolean1);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertFalse(list0.contains(state1));
      assertTrue(list0.contains(state0));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertNotNull(list0);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertFalse(state2.equals((Object)state1));
      assertSame(state2, state0);
      assertNotSame(state2, state1);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(60000L, state2.getTimeInMillis());
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isBikeParked());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(TraverseMode.WALK, state2.getNonTransitMode());
      assertEquals(60L, state2.getTimeSeconds());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.getReverseOptimizing());
      assertNull(state2.getBackMode());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertTrue(state2.isFinal());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertFalse(state2.isCarParked());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.isBikeRenting());
      assertEquals(0.0, state2.getWeight(), 0.01);
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(60L, state2.getStartTimeSeconds());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertNotNull(state2);
      
      multiShortestPathTree0.dump();
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertNull(graphPath0);
      
      double double0 = (-241.707);
      state0.weight = double0;
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertTrue(boolean0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals((-241.707), state0.weight, 0.01);
      
      multiShortestPathTree0.dump();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      
      State state1 = new State(vertex0, routingRequest0.elevatorHopCost, multiShortestPathTree0.options);
      assertFalse(state1.equals((Object)state0));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isBikeParked());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(20L, state1.getTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBikeRenting());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state1);
      
      Graph graph0 = new Graph();
      assertEquals(0, graph0.countVertices());
      assertNotNull(graph0);
      
      state0.stateData = state1.stateData;
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(40L, state0.getElapsedTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(20L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(40.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isBikeParked());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(20L, state1.getTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBikeRenting());
      
      routingRequest0.setRoutingContext(graph0, vertex0, vertex0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, graph0.countVertices());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      
      boolean boolean1 = multiShortestPathTree0.visit(state1);
      assertFalse(state1.equals((Object)state0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(state1, state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isBikeParked());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(20L, state1.getTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBikeRenting());
      assertFalse(boolean1);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      
      boolean boolean2 = MultiShortestPathTree.dominates(state1, state0);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(40L, state0.getElapsedTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(20L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(40.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isBikeParked());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(20L, state1.getTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBikeRenting());
      assertFalse(boolean2);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals((-241.707), state0.weight, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertFalse(list0.contains(state1));
      assertTrue(list0.contains(state0));
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertNotNull(list0);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertFalse(state2.equals((Object)state1));
      assertNotSame(state2, state1);
      assertSame(state2, state0);
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertEquals(20L, state2.getStartTimeSeconds());
      assertEquals(60000L, state2.getTimeInMillis());
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals((-241.707), state2.getWeight(), 0.01);
      assertEquals(60L, state2.getTimeSeconds());
      assertNull(state2.getBackMode());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state2.getNonTransitMode());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isCarParked());
      assertEquals(40L, state2.getElapsedTimeSeconds());
      assertEquals(40.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertNull(state2.getZone());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertTrue(state2.isFinal());
      assertFalse(state2.getReverseOptimizing());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.isBikeParked());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals((-241.707), state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      assertNotNull(state2);
      
      multiShortestPathTree0.dump();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
      
      multiShortestPathTree0.dump();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.transferSlack);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      boolean boolean0 = true;
      routingRequest0.reverseOptimizing = boolean0;
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertTrue(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isCarParked());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertNull(graphPath0);
      
      double double0 = (-241.707);
      state0.weight = double0;
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertTrue(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isCarParked());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertTrue(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isCarParked());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertTrue(boolean1);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals((-241.707), state0.weight, 0.01);
      
      multiShortestPathTree0.dump();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      
      State state1 = new State(vertex0, routingRequest0.elevatorHopCost, multiShortestPathTree0.options);
      assertFalse(state1.equals((Object)state0));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.isEverBoarded());
      assertTrue(state1.getReverseOptimizing());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isBikeRenting());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.isBikeParked());
      assertNull(state1.getBackMode());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state1);
      
      Graph graph0 = new Graph();
      assertEquals(0, graph0.countVertices());
      assertNotNull(graph0);
      
      routingRequest0.setRoutingContext(graph0, vertex0, vertex0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, graph0.countVertices());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      
      boolean boolean2 = multiShortestPathTree0.visit(state1);
      assertFalse(state1.equals((Object)state0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(state1, state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.isEverBoarded());
      assertTrue(state1.getReverseOptimizing());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isBikeRenting());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.isBikeParked());
      assertNull(state1.getBackMode());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(20L, state1.getTimeSeconds());
      assertFalse(boolean2);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      
      boolean boolean3 = MultiShortestPathTree.dominates(state1, state0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertTrue(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isCarParked());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.isEverBoarded());
      assertTrue(state1.getReverseOptimizing());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isBikeRenting());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertFalse(state1.isBikeParked());
      assertNull(state1.getBackMode());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(20L, state1.getTimeSeconds());
      assertFalse(boolean3);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals((-241.707), state0.weight, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertFalse(list0.contains(state1));
      assertTrue(list0.contains(state0));
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertNotNull(list0);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertFalse(state2.equals((Object)state1));
      assertNotSame(state2, state1);
      assertSame(state2, state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(state2.isOnboard());
      assertEquals(60L, state2.getTimeSeconds());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(60000L, state2.getTimeInMillis());
      assertNull(state2.getBackMode());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isBikeParked());
      assertEquals((-241.707), state2.getWeight(), 0.01);
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state2.getNonTransitMode());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(60L, state2.getStartTimeSeconds());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertFalse(state2.isCarParked());
      assertTrue(state2.isFinal());
      assertFalse(state2.isBikeRenting());
      assertFalse(state2.isEverBoarded());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertTrue(state2.getReverseOptimizing());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals((-241.707), state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertNotNull(state2);
      
      multiShortestPathTree0.dump();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      
      State state3 = multiShortestPathTree0.getState(vertex0);
      assertFalse(state3.equals((Object)state1));
      assertSame(state3, state2);
      assertSame(state3, state0);
      assertNotSame(state3, state1);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(60L, state3.getStartTimeSeconds());
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertTrue(state3.getReverseOptimizing());
      assertNull(state3.getBackMode());
      assertFalse(state3.isBikeParked());
      assertFalse(state3.isBikeRenting());
      assertTrue(state3.isFinal());
      assertEquals(0L, state3.getElapsedTimeSeconds());
      assertEquals(60000L, state3.getTimeInMillis());
      assertEquals(0, state3.getNumBoardings());
      assertEquals(0, state3.getPreTransitTime());
      assertEquals(0, state3.getAbsTimeDeltaSeconds());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertFalse(state3.isBackWalkingBike());
      assertNull(state3.getZone());
      assertEquals((-241.707), state3.getWeight(), 0.01);
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertFalse(state3.isOnboard());
      assertFalse(state3.isCarParked());
      assertEquals(0.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(TraverseMode.WALK, state3.getNonTransitMode());
      assertEquals(0, state3.getTimeDeltaSeconds());
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(60L, state3.getTimeSeconds());
      assertFalse(state3.isEverBoarded());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertEquals((-241.707), state3.weight, 0.01);
      assertNotNull(state3);
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertNotNull(set0);
      
      System.setCurrentTimeMillis(routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.reverseOptimizing);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      double double0 = (-241.707);
      state0.weight = double0;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(boolean0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals((-241.707), state0.weight, 0.01);
      
      multiShortestPathTree0.dump();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      
      State state1 = new State(vertex0, routingRequest0.elevatorHopCost, multiShortestPathTree0.options);
      assertFalse(state1.equals((Object)state0));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertFalse(state1.isBikeRenting());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getNumBoardings());
      assertEquals(20L, state1.getTimeSeconds());
      assertNull(state1.getBackMode());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBikeParked());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertNotNull(state1);
      
      Graph graph0 = new Graph();
      assertEquals(0, graph0.countVertices());
      assertNotNull(graph0);
      
      routingRequest0.setRoutingContext(graph0, vertex0, vertex0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, graph0.countVertices());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      
      boolean boolean1 = multiShortestPathTree0.add(state1);
      assertFalse(state1.equals((Object)state0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(state1, state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertFalse(state1.isBikeRenting());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getNumBoardings());
      assertEquals(20L, state1.getTimeSeconds());
      assertNull(state1.getBackMode());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBikeParked());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(20000L, state1.getTimeInMillis());
      assertTrue(boolean1);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      
      boolean boolean2 = MultiShortestPathTree.dominates(state1, state0);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertFalse(state1.isBikeRenting());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getNumBoardings());
      assertEquals(20L, state1.getTimeSeconds());
      assertNull(state1.getBackMode());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBikeParked());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isEverBoarded());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(boolean2);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals((-241.707), state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertTrue(list0.contains(state0));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNotNull(list0);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertFalse(state2.equals((Object)state1));
      assertSame(state2, state0);
      assertNotSame(state2, state1);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(state2.isFinal());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(60L, state2.getStartTimeSeconds());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.isCarParked());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(TraverseMode.WALK, state2.getNonTransitMode());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state2.getTimeSeconds());
      assertEquals((-241.707), state2.getWeight(), 0.01);
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(60000L, state2.getTimeInMillis());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertFalse(state2.isOnboard());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertNull(state2.getBackMode());
      assertFalse(state2.isBikeParked());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertFalse(state2.isBikeRenting());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state2.getNumBoardings());
      assertEquals(0, state2.getPreTransitTime());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals((-241.707), state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertNotNull(state2);
      
      State state3 = multiShortestPathTree0.getState(vertex0);
      assertFalse(state3.equals((Object)state1));
      assertNotSame(state3, state1);
      assertSame(state3, state0);
      assertSame(state3, state2);
      assertFalse(state3.isBackWalkingBike());
      assertEquals(0, state3.getPreTransitTime());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertFalse(state3.isBikeRenting());
      assertEquals(0, state3.getAbsTimeDeltaSeconds());
      assertEquals((-241.707), state3.getWeight(), 0.01);
      assertFalse(state3.isOnboard());
      assertFalse(state3.isBikeParked());
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertEquals(0L, state3.getElapsedTimeSeconds());
      assertEquals(0, state3.getNumBoardings());
      assertEquals(60L, state3.getStartTimeSeconds());
      assertEquals(60000L, state3.getTimeInMillis());
      assertFalse(state3.getReverseOptimizing());
      assertFalse(state3.isEverBoarded());
      assertTrue(state3.isFinal());
      assertEquals(0.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(60L, state3.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state3.getNonTransitMode());
      assertFalse(state3.isCarParked());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertNull(state3.getBackMode());
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state3.getTimeDeltaSeconds());
      assertNull(state3.getZone());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals((-241.707), state3.weight, 0.01);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNotNull(state3);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BICYCLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertNotNull(routingRequest0);
      
      int int0 = 0;
      routingRequest0.bikeParkTime = int0;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeParkTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeParkTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, routingRequest0.walkingBike);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeParkTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertNull(graphPath0);
      
      state0.weight = routingRequest0.maxSlope;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0833333333333, state0.getWeight(), 0.01);
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertTrue(state0.isFinal());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0833333333333, state0.getWeight(), 0.01);
      assertTrue(boolean0);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeParkTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0833333333333, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      
      multiShortestPathTree0.dump();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeParkTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      
      State state1 = new State(vertex0, routingRequest0.elevatorHopCost, multiShortestPathTree0.options);
      assertFalse(state1.equals((Object)state0));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(TraverseMode.BICYCLE, state1.getNonTransitMode());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeParked());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getBackMode());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeParkTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertNotNull(state1);
      
      Graph graph0 = new Graph();
      assertEquals(0, graph0.countVertices());
      assertNotNull(graph0);
      
      state0.stateData = state1.stateData;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertTrue(state0.isFinal());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(20L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(20.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0833333333333, state0.getWeight(), 0.01);
      assertEquals(20L, state0.getElapsedTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(TraverseMode.BICYCLE, state1.getNonTransitMode());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeParked());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getBackMode());
      
      routingRequest0.setRoutingContext(graph0, vertex0, vertex0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, graph0.countVertices());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeParkTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      
      boolean boolean1 = multiShortestPathTree0.visit(state1);
      assertFalse(state1.equals((Object)state0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(state1, state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(TraverseMode.BICYCLE, state1.getNonTransitMode());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeParked());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getBackMode());
      assertFalse(boolean1);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeParkTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      
      boolean boolean2 = MultiShortestPathTree.dominates(state1, state0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.BICYCLE, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertTrue(state0.isFinal());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(20L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0L, state0.getTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(20.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0833333333333, state0.getWeight(), 0.01);
      assertEquals(20L, state0.getElapsedTimeSeconds());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(TraverseMode.BICYCLE, state1.getNonTransitMode());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeParked());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getBackMode());
      assertTrue(boolean2);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeParkTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0833333333333, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertTrue(list0.contains(state0));
      assertFalse(list0.contains(state1));
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeParkTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertNotNull(list0);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertFalse(state2.equals((Object)state1));
      assertSame(state2, state0);
      assertNotSame(state2, state1);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0, state2.getNumBoardings());
      assertEquals(TraverseMode.BICYCLE, state2.getNonTransitMode());
      assertTrue(state2.isFinal());
      assertFalse(state2.isEverBoarded());
      assertFalse(state2.isOnboard());
      assertFalse(state2.isBikeParked());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertEquals(0.0833333333333, state2.getWeight(), 0.01);
      assertEquals(20L, state2.getElapsedTimeSeconds());
      assertEquals(20.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state2.isBackWalkingBike());
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(0L, state2.getTimeInMillis());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(20L, state2.getStartTimeSeconds());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(state2.isCarParked());
      assertEquals(0L, state2.getTimeSeconds());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertNull(state2.getBackMode());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeParkTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0833333333333, state2.weight, 0.01);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertNotNull(state2);
      
      multiShortestPathTree0.dump();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeParkTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      
      multiShortestPathTree0.dump();
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeParkTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertFalse(collection0.contains(state1));
      assertTrue(collection0.contains(state2));
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeParkTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertNotNull(collection0);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertFalse(state0.isEverBoarded());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      double double0 = (-241.707);
      state0.weight = double0;
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertFalse(state0.isEverBoarded());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertFalse(state0.isEverBoarded());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertTrue(boolean0);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals((-241.707), state0.weight, 0.01);
      
      multiShortestPathTree0.dump();
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      
      State state1 = new State(vertex0, routingRequest0.elevatorHopCost, multiShortestPathTree0.options);
      assertFalse(state1.equals((Object)state0));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(20000L, state1.getTimeInMillis());
      assertTrue(state1.isFinal());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertNull(state1.getBackMode());
      assertFalse(state1.isCarParked());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isOnboard());
      assertFalse(state1.isBikeParked());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertNotNull(state1);
      
      double double1 = 90.0;
      state0.walkDistance = double1;
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(90.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(90.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertFalse(state0.isEverBoarded());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Graph graph0 = new Graph();
      assertEquals(0, graph0.countVertices());
      assertNotNull(graph0);
      
      routingRequest0.setRoutingContext(graph0, vertex0, vertex0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(0, graph0.countVertices());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      
      boolean boolean2 = multiShortestPathTree0.add(state1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(state1.equals((Object)state0));
      assertNotSame(state1, state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(20000L, state1.getTimeInMillis());
      assertTrue(state1.isFinal());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertNull(state1.getBackMode());
      assertFalse(state1.isCarParked());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isOnboard());
      assertFalse(state1.isBikeParked());
      assertTrue(boolean2);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      
      boolean boolean3 = MultiShortestPathTree.dominates(state1, state0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(90.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(90.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertNull(state0.getZone());
      assertFalse(state0.isEverBoarded());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(20000L, state1.getTimeInMillis());
      assertTrue(state1.isFinal());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertNull(state1.getBackMode());
      assertFalse(state1.isCarParked());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeRenting());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isOnboard());
      assertFalse(state1.isBikeParked());
      assertFalse(boolean3);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90.0, state0.walkDistance, 0.01);
      assertEquals((-241.707), state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertTrue(list0.contains(state1));
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertNotNull(list0);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertFalse(state2.equals((Object)state1));
      assertNotSame(state2, state1);
      assertSame(state2, state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertFalse(state2.isBikeRenting());
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(state2.isCarParked());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.isBackWalkingBike());
      assertEquals((-241.707), state2.getWeight(), 0.01);
      assertTrue(state2.isFinal());
      assertEquals(60L, state2.getStartTimeSeconds());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(60000L, state2.getTimeInMillis());
      assertFalse(state2.isOnboard());
      assertEquals(0, state2.getNumBoardings());
      assertFalse(state2.isBikeParked());
      assertFalse(state2.getReverseOptimizing());
      assertFalse(state2.isEverBoarded());
      assertEquals(90.0, state2.getWalkDistance(), 0.01);
      assertEquals(TraverseMode.WALK, state2.getNonTransitMode());
      assertEquals(60L, state2.getTimeSeconds());
      assertNull(state2.getZone());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertNull(state2.getBackMode());
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(90.0, state2.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90.0, state2.walkDistance, 0.01);
      assertEquals((-241.707), state2.weight, 0.01);
      assertNotNull(state2);
      
      State state3 = multiShortestPathTree0.getState(vertex0);
      assertFalse(state3.equals((Object)state1));
      assertNotSame(state3, state1);
      assertSame(state3, state0);
      assertSame(state3, state2);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(60L, state3.getStartTimeSeconds());
      assertFalse(state3.getReverseOptimizing());
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state3.getTimeDeltaSeconds());
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertEquals(0.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state3.isBackWalkingBike());
      assertFalse(state3.isEverBoarded());
      assertFalse(state3.isCarParked());
      assertEquals(90.0, state3.getWalkDistance(), 0.01);
      assertEquals(60L, state3.getTimeSeconds());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertEquals(TraverseMode.WALK, state3.getNonTransitMode());
      assertEquals((-241.707), state3.getWeight(), 0.01);
      assertNull(state3.getZone());
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state3.getElapsedTimeSeconds());
      assertEquals(60000L, state3.getTimeInMillis());
      assertNull(state3.getBackMode());
      assertFalse(state3.isOnboard());
      assertEquals(90.0, state3.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state3.getNumBoardings());
      assertFalse(state3.isBikeParked());
      assertEquals(0, state3.getAbsTimeDeltaSeconds());
      assertEquals(0, state3.getPreTransitTime());
      assertFalse(state3.isBikeRenting());
      assertTrue(state3.isFinal());
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(90.0, state3.walkDistance, 0.01);
      assertEquals((-241.707), state3.weight, 0.01);
      assertNotNull(state3);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      double double0 = (-241.707);
      state0.weight = double0;
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(60L, state0.getStartTimeSeconds());
      
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertTrue(boolean0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals((-241.707), state0.weight, 0.01);
      
      multiShortestPathTree0.dump();
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      
      State state1 = new State(vertex0, routingRequest0.elevatorHopCost, multiShortestPathTree0.options);
      assertFalse(state1.equals((Object)state0));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isBikeRenting());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeParked());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(20L, state1.getTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertFalse(state1.isEverBoarded());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertNotNull(state1);
      
      Graph graph0 = new Graph();
      assertEquals(0, graph0.countVertices());
      assertNotNull(graph0);
      
      routingRequest0.setRoutingContext(graph0, vertex0, vertex0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, graph0.countVertices());
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      
      boolean boolean1 = multiShortestPathTree0.add(state1);
      assertFalse(state1.equals((Object)state0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(state1, state0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(state1.isFinal());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(20000L, state1.getTimeInMillis());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isBikeRenting());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeParked());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertNull(state1.getZone());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(20L, state1.getTimeSeconds());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getBackMode());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertFalse(state1.isEverBoarded());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertTrue(boolean1);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertFalse(state0.equals((Object)state1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(state0, state1);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(60L, state0.getTimeSeconds());
      assertEquals((-241.707), state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isEverBoarded());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertTrue(boolean2);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals((-241.707), state0.weight, 0.01);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertTrue(list0.contains(state1));
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertNotNull(list0);
      
      State state2 = multiShortestPathTree0.getState(vertex0);
      assertFalse(state2.equals((Object)state1));
      assertSame(state2, state0);
      assertNotSame(state2, state1);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state2.getTimeDeltaSeconds());
      assertFalse(state2.isCarParked());
      assertEquals(0, state2.getPreTransitTimeDelta());
      assertEquals(0, state2.getPreTransitTime());
      assertFalse(state2.isBikeRenting());
      assertTrue(state2.isFinal());
      assertFalse(state2.isBackWalkingBike());
      assertEquals(0.0, state2.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state2.getWalkSinceLastTransit(), 0.01);
      assertNull(state2.getZone());
      assertEquals(0, state2.getLastNextArrivalDelta());
      assertFalse(state2.getReverseOptimizing());
      assertEquals(0.0, state2.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state2.getLastAlightedTimeSeconds());
      assertEquals(0.0, state2.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state2.getNonTransitMode());
      assertEquals(0, state2.getNumBoardings());
      assertNull(state2.getBackMode());
      assertFalse(state2.isBikeParked());
      assertFalse(state2.isOnboard());
      assertEquals(0.0, state2.getWalkDistance(), 0.01);
      assertEquals(60L, state2.getTimeSeconds());
      assertFalse(state2.isEverBoarded());
      assertEquals((-241.707), state2.getWeight(), 0.01);
      assertEquals(60L, state2.getStartTimeSeconds());
      assertEquals(0, state2.getAbsTimeDeltaSeconds());
      assertEquals(0L, state2.getElapsedTimeSeconds());
      assertEquals(60000L, state2.getTimeInMillis());
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, state2.walkDistance, 0.01);
      assertEquals((-241.707), state2.weight, 0.01);
      assertNotNull(state2);
      
      State state3 = multiShortestPathTree0.getState(vertex0);
      assertFalse(state3.equals((Object)state1));
      assertSame(state3, state0);
      assertNotSame(state3, state1);
      assertSame(state3, state2);
      assertEquals(0, state3.getTimeDeltaSeconds());
      assertFalse(state3.isCarParked());
      assertEquals(0, state3.getPreTransitTimeDelta());
      assertFalse(state3.isBikeRenting());
      assertEquals(0.0, state3.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state3.getLastAlightedTimeSeconds());
      assertEquals(0.0, state3.getOptimizedElapsedTimeSeconds(), 0.01);
      assertNull(state3.getZone());
      assertEquals((-241.707), state3.getWeight(), 0.01);
      assertEquals(0.0, state3.getWalkDistanceDelta(), 0.01);
      assertFalse(state3.isBackWalkingBike());
      assertEquals(0, state3.getLastNextArrivalDelta());
      assertFalse(state3.isEverBoarded());
      assertEquals(0.0, state3.getWalkSinceLastTransit(), 0.01);
      assertNull(state3.getBackMode());
      assertEquals(TraverseMode.WALK, state3.getNonTransitMode());
      assertEquals(60L, state3.getTimeSeconds());
      assertEquals(0.0, state3.getWalkDistance(), 0.01);
      assertFalse(state3.isOnboard());
      assertFalse(state3.getReverseOptimizing());
      assertEquals(0, state3.getAbsTimeDeltaSeconds());
      assertTrue(state3.isFinal());
      assertEquals(0, state3.getPreTransitTime());
      assertEquals(0L, state3.getElapsedTimeSeconds());
      assertFalse(state3.isBikeParked());
      assertEquals(60L, state3.getStartTimeSeconds());
      assertEquals(0, state3.getNumBoardings());
      assertEquals(60000L, state3.getTimeInMillis());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals((-241.707), state3.weight, 0.01);
      assertEquals(0.0, state3.walkDistance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertNotNull(state3);
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, int0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertNotNull(routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertNotNull(multiShortestPathTree0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0.bikeParkTime, multiShortestPathTree0.options);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(60L, state0.getTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      
      state0.weight = routingRequest0.waitReluctance;
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(60L, state0.getTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(60L, state0.getTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertTrue(boolean0);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1.0, state0.weight, 0.01);
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(60L, state0.getTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertTrue(boolean1);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1.0, state0.weight, 0.01);
      
      multiShortestPathTree0.dump();
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      
      State state1 = new State(vertex0, multiShortestPathTree0.options);
      assertFalse(state1.equals((Object)state0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.isCarParked());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertNull(state1.getBackMode());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isBikeParked());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeRenting());
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertNotNull(state1);
      
      state1.stateData = state0.stateData;
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(60L, state0.getTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(60L, state1.getStartTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(1392409221L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertNull(state1.getBackMode());
      assertEquals(1.392409221E9, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertFalse(state1.isBikeParked());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeRenting());
      
      StateEditor stateEditor0 = state0.edit(state1.backEdge);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(60L, state0.getTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(60L, state1.getStartTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(1392409221L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertNull(state1.getBackMode());
      assertEquals(1.392409221E9, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertFalse(state1.isBikeParked());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeRenting());
      assertEquals(0L, stateEditor0.getLastAlightedTimeSeconds());
      assertEquals(0, stateEditor0.getPreTransitTime());
      assertEquals(60L, stateEditor0.getTimeSeconds());
      assertFalse(stateEditor0.isRentingBike());
      assertFalse(stateEditor0.isEverBoarded());
      assertEquals(0, stateEditor0.getNumBoardings());
      assertNull(stateEditor0.getZone());
      assertEquals(0.0, stateEditor0.getWalkDistance(), 0.01);
      assertEquals(0L, stateEditor0.getElapsedTimeSeconds());
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1.0, state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertNotNull(stateEditor0);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertFalse(collection0.contains(state1));
      assertTrue(collection0.contains(state0));
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertNotNull(collection0);
      
      boolean boolean2 = multiShortestPathTree0.add(state1);
      assertFalse(state1.equals((Object)state0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(state1, state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(60L, state1.getStartTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(1392409221L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertNull(state1.getBackMode());
      assertEquals(1.392409221E9, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertFalse(state1.isBikeParked());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeRenting());
      assertTrue(boolean2);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      
      System.setCurrentTimeMillis(routingRequest0.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      
      boolean boolean3 = MultiShortestPathTree.dominates(state1, state0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(60L, state0.getTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(60L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(60000L, state0.getTimeInMillis());
      assertEquals(1.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(60L, state1.getStartTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(1392409221L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getZone());
      assertNull(state1.getBackMode());
      assertEquals(1.392409221E9, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertFalse(state1.isBikeParked());
      assertTrue(state1.isFinal());
      assertFalse(state1.isBikeRenting());
      assertFalse(boolean3);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(1.0, state0.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
  }
}
