/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 17:42:00 GMT 2021
 */

package org.opentripplanner.routing.spt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.vividsolutions.jts.geom.Coordinate;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.net.URI;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.onebusaway.gtfs.model.AgencyAndId;
import org.onebusaway.gtfs.model.Stop;
import org.opentripplanner.graph_builder.annotation.StopNotLinkedForTransfers;
import org.opentripplanner.graph_builder.annotation.StopUnlinked;
import org.opentripplanner.routing.core.OptimizeType;
import org.opentripplanner.routing.core.RouteMatcher;
import org.opentripplanner.routing.core.RoutingRequest;
import org.opentripplanner.routing.core.State;
import org.opentripplanner.routing.core.TraverseMode;
import org.opentripplanner.routing.core.TraverseModeSet;
import org.opentripplanner.routing.edgetype.ElevatorAlightEdge;
import org.opentripplanner.routing.edgetype.ElevatorHopEdge;
import org.opentripplanner.routing.edgetype.PatternHop;
import org.opentripplanner.routing.edgetype.PatternInterlineDwell;
import org.opentripplanner.routing.edgetype.PreBoardEdge;
import org.opentripplanner.routing.edgetype.SimpleEdge;
import org.opentripplanner.routing.edgetype.StreetEdge;
import org.opentripplanner.routing.edgetype.StreetTraversalPermission;
import org.opentripplanner.routing.edgetype.TimedTransferEdge;
import org.opentripplanner.routing.edgetype.TripPattern;
import org.opentripplanner.routing.graph.Edge;
import org.opentripplanner.routing.graph.Graph;
import org.opentripplanner.routing.graph.Vertex;
import org.opentripplanner.routing.location.StreetLocation;
import org.opentripplanner.routing.spt.GraphPath;
import org.opentripplanner.routing.spt.MultiShortestPathTree;
import org.opentripplanner.routing.vertextype.ElevatorOffboardVertex;
import org.opentripplanner.routing.vertextype.ElevatorOnboardVertex;
import org.opentripplanner.routing.vertextype.IntersectionVertex;
import org.opentripplanner.routing.vertextype.OnboardDepartVertex;
import org.opentripplanner.routing.vertextype.ParkAndRideVertex;
import org.opentripplanner.routing.vertextype.PatternArriveVertex;
import org.opentripplanner.routing.vertextype.PatternDepartVertex;
import org.opentripplanner.routing.vertextype.PatternStopVertex;
import org.opentripplanner.routing.vertextype.TransitStop;
import org.opentripplanner.routing.vertextype.TransitStopStreetVertex;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiShortestPathTree_ESTest extends MultiShortestPathTree_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRANSIT;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertNotNull(routingRequest0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = null;
      TransitStopStreetVertex transitStopStreetVertex0 = new TransitStopStreetVertex(graph0, routingRequest0.routerId, routingRequest0.bikeSwitchTime, routingRequest0.nonpreferredTransferPenalty, routingRequest0.routerId, routingRequest0.routerId);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(transitStopStreetVertex0.trafficLight);
      assertFalse(transitStopStreetVertex0.freeFlowing);
      assertNotNull(transitStopStreetVertex0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(180.0, transitStopStreetVertex0.getLat(), 0.01);
      assertEquals(180.0, transitStopStreetVertex0.getY(), 0.01);
      assertEquals(0, transitStopStreetVertex0.getDegreeOut());
      assertEquals(0, transitStopStreetVertex0.getIndex());
      assertEquals(0.0, transitStopStreetVertex0.getX(), 0.01);
      assertEquals("", transitStopStreetVertex0.getName());
      assertEquals("", transitStopStreetVertex0.getLabel());
      assertEquals(1, transitStopStreetVertex0.getMaxIndex());
      assertEquals(0.0, transitStopStreetVertex0.getLon(), 0.01);
      assertEquals(0, transitStopStreetVertex0.getDegreeIn());
      assertFalse(transitStopStreetVertex0.inferredFreeFlowing());
      
      State state0 = multiShortestPathTree0.getState(transitStopStreetVertex0);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(transitStopStreetVertex0.trafficLight);
      assertFalse(transitStopStreetVertex0.freeFlowing);
      assertNull(state0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(180.0, transitStopStreetVertex0.getLat(), 0.01);
      assertEquals(180.0, transitStopStreetVertex0.getY(), 0.01);
      assertEquals(0, transitStopStreetVertex0.getDegreeOut());
      assertEquals(0, transitStopStreetVertex0.getIndex());
      assertEquals(0.0, transitStopStreetVertex0.getX(), 0.01);
      assertEquals("", transitStopStreetVertex0.getName());
      assertEquals("", transitStopStreetVertex0.getLabel());
      assertEquals(1, transitStopStreetVertex0.getMaxIndex());
      assertEquals(0.0, transitStopStreetVertex0.getLon(), 0.01);
      assertEquals(0, transitStopStreetVertex0.getDegreeIn());
      assertFalse(transitStopStreetVertex0.inferredFreeFlowing());
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertNotNull(multiShortestPathTree0);
      
      Vertex vertex0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getStates(vertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      int int0 = (-983);
      Vertex vertex0 = null;
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertNull(list0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      multiShortestPathTree0.dump();
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      
      state0.weight = routingRequest0.bikeSpeed;
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(5.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      
      boolean boolean0 = true;
      routingRequest0.kissAndRide = boolean0;
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(5.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(5.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isFinal());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      multiShortestPathTree0.dump();
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(5.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(5.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isFinal());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean3 = multiShortestPathTree0.add(state0);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(5.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(5.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isFinal());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean4 = multiShortestPathTree0.visit(state0);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(5.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(5.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isFinal());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals("MultiSPT(1 vertices)", string0);
      assertNotNull(string0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      State state1 = multiShortestPathTree0.getState(transitStop0);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertNull(state1);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1, int0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      multiShortestPathTree0.dump();
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      
      State state0 = new State(vertex0, routingRequest0);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state0);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertNotNull(set0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertNotNull(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      
      State state0 = new State(vertex0, routingRequest0.transferPenalty, routingRequest0);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0L, state0.getTimeInMillis());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getTimeSeconds());
      assertFalse(state0.isEverBoarded());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0L, state0.getTimeInMillis());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      multiShortestPathTree0.dump();
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean1 = multiShortestPathTree0.visit(state0);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0L, state0.getTimeInMillis());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals("MultiSPT(1 vertices)", string0);
      assertNotNull(string0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      State state1 = new State(vertex0, routingRequest0);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertFalse(state1.equals((Object)state0));
      assertNotNull(state1);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.isFinal());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isEverBoarded());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertNull(state1.getZone());
      assertFalse(state1.isBikeParked());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBikeRenting());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getBackMode());
      assertFalse(state1.getReverseOptimizing());
      
      boolean boolean2 = multiShortestPathTree0.visit(state1);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertFalse(state1.equals((Object)state0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertTrue(state1.isFinal());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isEverBoarded());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertNull(state1.getZone());
      assertFalse(state1.isBikeParked());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBikeRenting());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertNull(state1.getBackMode());
      assertFalse(state1.getReverseOptimizing());
      assertNotSame(state1, state0);
      
      String string1 = multiShortestPathTree0.toString();
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.batch);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertTrue(string1.equals((Object)string0));
      assertEquals("MultiSPT(1 vertices)", string1);
      assertNotNull(string1);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      
      State state0 = new State(vertex0, routingRequest0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isCarParked());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isCarParked());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      String string0 = stopNotLinkedForTransfers0.toString();
      assertEquals("GraphBuilderAnnotation: Stop null not near any other stops; no transfers are possible.", string0);
      assertNotNull(string0);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertNotNull(collection0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(collection0.contains(state0));
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertNotNull(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      State state0 = new State(vertex0, routingRequest0);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      
      state0.weight = routingRequest0.bikeSpeed;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(5.0, state0.getWeight(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertNotNull(multiShortestPathTree0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean0 = multiShortestPathTree0.add(state0);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(5.0, state0.weight, 0.01);
      assertTrue(boolean0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(5.0, state0.getWeight(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertNull(state0.getBackMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = multiShortestPathTree0.toString();
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals("MultiSPT(1 vertices)", string0);
      assertNotNull(string0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      State state1 = new State(transitStop0, multiShortestPathTree0.options);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertFalse(state1.equals((Object)state0));
      assertNotNull(state1);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNull(state1.getZone());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isBikeParked());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isCarParked());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertTrue(state1.isFinal());
      assertFalse(state1.isEverBoarded());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertNull(state1.getBackMode());
      assertFalse(state1.isBikeRenting());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      
      Integer integer0 = new Integer(routingRequest0.boardSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      multiShortestPathTree0.dump();
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean1 = multiShortestPathTree0.add(state1);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertFalse(state1.equals((Object)state0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNull(state1.getZone());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertFalse(state1.isBikeParked());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isCarParked());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertTrue(state1.isFinal());
      assertFalse(state1.isEverBoarded());
      assertEquals(0, state1.getNumBoardings());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertNull(state1.getBackMode());
      assertFalse(state1.isBikeRenting());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertNotSame(state1, state0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertNotNull(multiShortestPathTree0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getVertexCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      assertNotNull(traverseModeSet0);
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8183, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertTrue(traverseModeSet0.getCableCar());
      
      OptimizeType optimizeType0 = OptimizeType.TRIANGLE;
      boolean boolean0 = false;
      traverseModeSet0.setTram(boolean0);
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8151, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCableCar());
      
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0, optimizeType0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertNotNull(routingRequest0);
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8151, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCableCar());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      RoutingRequest routingRequest1 = routingRequest0.clone();
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.batch);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.arriveBy);
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertNotNull(routingRequest1);
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8151, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCableCar());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.batch);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.arriveBy);
      assertTrue(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertNotNull(multiShortestPathTree0);
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8151, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCableCar());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest1.batch);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest1.reverseOptimizing);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertFalse(routingRequest1.kissAndRide);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(9223372036854775807L, routingRequest1.worstTime);
      assertFalse(routingRequest1.arriveBy);
      assertTrue(routingRequest0.equals((Object)routingRequest1));
      assertTrue(routingRequest1.equals((Object)routingRequest0));
      assertEquals("MultiSPT(0 vertices)", string0);
      assertNotNull(string0);
      assertTrue(traverseModeSet0.getFunicular());
      assertTrue(traverseModeSet0.getCar());
      assertTrue(traverseModeSet0.isValid());
      assertTrue(traverseModeSet0.getBusish());
      assertTrue(traverseModeSet0.getFerry());
      assertTrue(traverseModeSet0.getGondola());
      assertTrue(traverseModeSet0.isTransit());
      assertTrue(traverseModeSet0.getTrainish());
      assertTrue(traverseModeSet0.getWalk());
      assertTrue(traverseModeSet0.getSubway());
      assertEquals(8151, traverseModeSet0.getMask());
      assertTrue(traverseModeSet0.getDriving());
      assertTrue(traverseModeSet0.getCustomMotorVehicle());
      assertTrue(traverseModeSet0.getBus());
      assertTrue(traverseModeSet0.getBicycle());
      assertTrue(traverseModeSet0.getTraininsh());
      assertTrue(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getTram());
      assertTrue(traverseModeSet0.getCableCar());
      assertEquals(40.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest1.transitAllowed());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest1.getNumItineraries());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(40.0, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertNotNull(multiShortestPathTree0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getAllStates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      HashSet<TraverseMode> hashSet0 = new HashSet<TraverseMode>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(hashSet0);
      assertNotNull(traverseModeSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getSubway());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getTrainish());
      
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertNotNull(routingRequest0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getSubway());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getTrainish());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      RoutingRequest routingRequest1 = routingRequest0.reversedClone();
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertNotNull(routingRequest1);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getSubway());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getTrainish());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest1.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertNotNull(multiShortestPathTree0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getSubway());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getTrainish());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest1.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest1.softPreTransitLimiting);
      assertEquals(0, routingRequest1.alightSlack);
      assertEquals(2, routingRequest1.maxTransfers);
      assertEquals(1.0, routingRequest1.heuristicWeight, 0.01);
      assertTrue(routingRequest1.reverseOptimizing);
      assertEquals(0.2, routingRequest1.waitAtBeginningFactor, 0.01);
      assertEquals(0, routingRequest1.bikeSwitchTime);
      assertFalse(routingRequest1.ignoreRealtimeUpdates);
      assertEquals(60, routingRequest1.bikeParkTime);
      assertEquals(0, routingRequest1.bikeSwitchCost);
      assertFalse(routingRequest1.wheelchairAccessible);
      assertFalse(routingRequest1.reverseOptimizeOnTheFly);
      assertEquals(120, routingRequest1.carDropoffTime);
      assertEquals(0, routingRequest1.transferSlack);
      assertEquals(0L, routingRequest1.worstTime);
      assertEquals(1.0, routingRequest1.waitReluctance, 0.01);
      assertFalse(routingRequest1.parkAndRide);
      assertFalse(routingRequest1.walkingBike);
      assertEquals(1.33, routingRequest1.walkSpeed, 0.01);
      assertTrue(routingRequest1.softWalkLimiting);
      assertEquals(600, routingRequest1.walkBoardCost);
      assertFalse(routingRequest1.kissAndRide);
      assertEquals(1.0, routingRequest1.turnReluctance, 0.01);
      assertEquals(0.0, routingRequest1.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest1.intermediatePlacesOrdered);
      assertFalse(routingRequest1.disableRemainingWeightHeuristic);
      assertEquals(0L, routingRequest1.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest1.maxSlope, 0.01);
      assertEquals(2.9, routingRequest1.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest1.useUnpreferredRoutesPenalty);
      assertEquals(20, routingRequest1.elevatorHopCost);
      assertTrue(routingRequest1.arriveBy);
      assertEquals(Integer.MAX_VALUE, routingRequest1.maxPreTransitTime);
      assertEquals(60, routingRequest1.bikeRentalPickupTime);
      assertEquals(20, routingRequest1.elevatorHopTime);
      assertEquals(60.0, routingRequest1.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest1.transferPenalty);
      assertEquals(600, routingRequest1.bikeBoardCost);
      assertEquals(300.0, routingRequest1.preTransitPenalty, 0.01);
      assertEquals(0.0, routingRequest1.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest1.bikeSpeed, 0.01);
      assertEquals(120, routingRequest1.bikeRentalPickupCost);
      assertEquals(30, routingRequest1.bikeRentalDropoffTime);
      assertEquals(300, routingRequest1.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest1.bikeParkAndRide);
      assertEquals(0, routingRequest1.boardSlack);
      assertEquals(2.9, routingRequest1.carAccelerationSpeed, 0.01);
      assertEquals(10.0, routingRequest1.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest1.bikeParkCost);
      assertFalse(routingRequest1.useBikeRentalAvailabilityInformation);
      assertEquals(30, routingRequest1.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWeight, 0.01);
      assertEquals(1392409281L, routingRequest1.dateTime);
      assertEquals(90, routingRequest1.elevatorBoardTime);
      assertEquals(40.0, routingRequest1.carSpeed, 0.01);
      assertEquals(3, routingRequest1.numItineraries);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest1.elevatorBoardCost);
      assertFalse(routingRequest1.allowBikeRental);
      assertEquals(2.0, routingRequest1.stairsReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest1.maxWalkDistance, 0.01);
      assertFalse(routingRequest1.showIntermediateStops);
      assertTrue(routingRequest1.driveOnRight);
      assertEquals(180, routingRequest1.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest1.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest1.softWalkOverageRate, 0.01);
      assertFalse(routingRequest1.batch);
      assertEquals(0.0, routingRequest1.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.equals((Object)routingRequest1));
      assertFalse(routingRequest1.equals((Object)routingRequest0));
      assertNotNull(collection0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(traverseModeSet0.isValid());
      assertFalse(traverseModeSet0.getBusish());
      assertFalse(traverseModeSet0.getRail());
      assertFalse(traverseModeSet0.getFunicular());
      assertFalse(traverseModeSet0.getFerry());
      assertFalse(traverseModeSet0.getGondola());
      assertFalse(traverseModeSet0.getCar());
      assertFalse(traverseModeSet0.getTraininsh());
      assertFalse(traverseModeSet0.getTram());
      assertFalse(traverseModeSet0.getCableCar());
      assertFalse(traverseModeSet0.getBicycle());
      assertFalse(traverseModeSet0.getBus());
      assertFalse(traverseModeSet0.getSubway());
      assertEquals(0, traverseModeSet0.getMask());
      assertFalse(traverseModeSet0.getDriving());
      assertFalse(traverseModeSet0.getCustomMotorVehicle());
      assertFalse(traverseModeSet0.isTransit());
      assertFalse(traverseModeSet0.getWalk());
      assertFalse(traverseModeSet0.getTrainish());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest1.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest1.transitAllowed());
      assertFalse(routingRequest1.intermediatesEffectivelyOrdered());
      assertFalse(routingRequest1.hasIntermediatePlaces());
      assertEquals(600, routingRequest1.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest1.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, routingRequest1.getNumItineraries());
      assertEquals(1392409281L, routingRequest1.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertNotSame(routingRequest0, routingRequest1);
      assertNotSame(routingRequest1, routingRequest0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertNotNull(multiShortestPathTree0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.dump();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.RAIL;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertNotNull(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      multiShortestPathTree0.dump();
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals("MultiSPT(0 vertices)", string0);
      assertNotNull(string0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      double double0 = (-52.88692850675817);
      double double1 = 0.7;
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, double0, double1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(onboardDepartVertex0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals((-52.88692850675817), onboardDepartVertex0.getLon(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals("MultiSPT(0 vertices)", onboardDepartVertex0.getLabel());
      assertEquals("MultiSPT(0 vertices)", onboardDepartVertex0.getName());
      assertEquals(0.7, onboardDepartVertex0.getLat(), 0.01);
      assertEquals((-52.88692850675817), onboardDepartVertex0.getX(), 0.01);
      assertEquals(0.7, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.stateSets;
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      multiShortestPathTree0.stateSets = map0;
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, multiShortestPathTree0.stateSets.size());
      assertTrue(multiShortestPathTree0.stateSets.isEmpty());
      
      List<State> list0 = multiShortestPathTree0.getStates(onboardDepartVertex0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNull(list0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals((-52.88692850675817), onboardDepartVertex0.getLon(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals("MultiSPT(0 vertices)", onboardDepartVertex0.getLabel());
      assertEquals("MultiSPT(0 vertices)", onboardDepartVertex0.getName());
      assertEquals(0.7, onboardDepartVertex0.getLat(), 0.01);
      assertEquals((-52.88692850675817), onboardDepartVertex0.getX(), 0.01);
      assertEquals(0.7, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      
      State state0 = null;
      try {
        state0 = new State(onboardDepartVertex0, multiShortestPathTree0.options);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BICYCLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      int int0 = 722;
      routingRequest0.bikeParkTime = int0;
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(722, routingRequest0.bikeParkTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      int int1 = multiShortestPathTree0.getVertexCount();
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(722, routingRequest0.bikeParkTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      multiShortestPathTree0.dump();
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(722, routingRequest0.bikeParkTime);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(5.0, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertNotNull(multiShortestPathTree0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      State state0 = multiShortestPathTree0.getState(vertex0);
      assertNull(state0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertNotNull(multiShortestPathTree0);
      
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRANSIT;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertNotNull(routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      
      RouteMatcher routeMatcher0 = RouteMatcher.emptyMatcher();
      assertNotNull(routeMatcher0);
      
      routingRequest0.preferredRoutes = routeMatcher0;
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertNotNull(multiShortestPathTree0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRANSIT;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertNotNull(routingRequest0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = null;
      double double0 = 966.7377;
      String string0 = " states: ";
      TransitStopStreetVertex transitStopStreetVertex0 = new TransitStopStreetVertex(graph0, routingRequest0.routerId, double0, routingRequest0.nonpreferredTransferPenalty, string0, string0);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(transitStopStreetVertex0.trafficLight);
      assertFalse(transitStopStreetVertex0.freeFlowing);
      assertNotNull(transitStopStreetVertex0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(966.7377, transitStopStreetVertex0.getLon(), 0.01);
      assertEquals(1, transitStopStreetVertex0.getMaxIndex());
      assertEquals("", transitStopStreetVertex0.getLabel());
      assertEquals(966.7377, transitStopStreetVertex0.getX(), 0.01);
      assertEquals(0, transitStopStreetVertex0.getDegreeOut());
      assertEquals(0, transitStopStreetVertex0.getDegreeIn());
      assertEquals(" states: ", transitStopStreetVertex0.getName());
      assertEquals(0, transitStopStreetVertex0.getIndex());
      assertEquals(180.0, transitStopStreetVertex0.getY(), 0.01);
      assertFalse(transitStopStreetVertex0.inferredFreeFlowing());
      assertEquals(180.0, transitStopStreetVertex0.getLat(), 0.01);
      
      State state0 = multiShortestPathTree0.getState(transitStopStreetVertex0);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(transitStopStreetVertex0.trafficLight);
      assertFalse(transitStopStreetVertex0.freeFlowing);
      assertNull(state0);
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(966.7377, transitStopStreetVertex0.getLon(), 0.01);
      assertEquals(1, transitStopStreetVertex0.getMaxIndex());
      assertEquals("", transitStopStreetVertex0.getLabel());
      assertEquals(966.7377, transitStopStreetVertex0.getX(), 0.01);
      assertEquals(0, transitStopStreetVertex0.getDegreeOut());
      assertEquals(0, transitStopStreetVertex0.getDegreeIn());
      assertEquals(" states: ", transitStopStreetVertex0.getName());
      assertEquals(0, transitStopStreetVertex0.getIndex());
      assertEquals(180.0, transitStopStreetVertex0.getY(), 0.01);
      assertFalse(transitStopStreetVertex0.inferredFreeFlowing());
      assertEquals(180.0, transitStopStreetVertex0.getLat(), 0.01);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      assertNotNull(set0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertNotNull(multiShortestPathTree0);
      
      HashMap<Vertex, List<State>> hashMap0 = new HashMap<Vertex, List<State>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) hashMap0;
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(multiShortestPathTree0.stateSets.isEmpty());
      assertEquals(0, multiShortestPathTree0.stateSets.size());
      
      String string0 = "";
      double double0 = (-2128.344558603042);
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, double0, double0);
      assertNotNull(onboardDepartVertex0);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals((-2128.344558603042), onboardDepartVertex0.getLon(), 0.01);
      assertEquals((-2128.344558603042), onboardDepartVertex0.getLat(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals((-2128.344558603042), onboardDepartVertex0.getX(), 0.01);
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals((-2128.344558603042), onboardDepartVertex0.getY(), 0.01);
      assertEquals("", onboardDepartVertex0.getName());
      
      Collection<Edge> collection0 = onboardDepartVertex0.getOutgoing();
      assertNotNull(collection0);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals((-2128.344558603042), onboardDepartVertex0.getLon(), 0.01);
      assertEquals((-2128.344558603042), onboardDepartVertex0.getLat(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals((-2128.344558603042), onboardDepartVertex0.getX(), 0.01);
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals((-2128.344558603042), onboardDepartVertex0.getY(), 0.01);
      assertEquals("", onboardDepartVertex0.getName());
      
      Coordinate coordinate0 = onboardDepartVertex0.getCoordinate();
      assertEquals((-2128.344558603042), coordinate0.y, 0.01);
      assertEquals(1, Coordinate.Y);
      assertEquals(0, Coordinate.X);
      assertEquals((-2128.344558603042), coordinate0.x, 0.01);
      assertEquals(2, Coordinate.Z);
      assertEquals(Double.NaN, coordinate0.z, 0.01);
      assertEquals(Double.NaN, Coordinate.NULL_ORDINATE, 0.01);
      assertNotNull(coordinate0);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals((-2128.344558603042), onboardDepartVertex0.getLon(), 0.01);
      assertEquals((-2128.344558603042), onboardDepartVertex0.getLat(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals((-2128.344558603042), onboardDepartVertex0.getX(), 0.01);
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals((-2128.344558603042), onboardDepartVertex0.getY(), 0.01);
      assertEquals("", onboardDepartVertex0.getName());
      
      State state0 = multiShortestPathTree0.getState(onboardDepartVertex0);
      assertNull(state0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals((-2128.344558603042), onboardDepartVertex0.getLon(), 0.01);
      assertEquals((-2128.344558603042), onboardDepartVertex0.getLat(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals((-2128.344558603042), onboardDepartVertex0.getX(), 0.01);
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals((-2128.344558603042), onboardDepartVertex0.getY(), 0.01);
      assertEquals("", onboardDepartVertex0.getName());
      
      boolean boolean0 = false;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths((Vertex) onboardDepartVertex0, boolean0);
      assertNotNull(list0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals((-2128.344558603042), onboardDepartVertex0.getLon(), 0.01);
      assertEquals((-2128.344558603042), onboardDepartVertex0.getLat(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals((-2128.344558603042), onboardDepartVertex0.getX(), 0.01);
      assertEquals("", onboardDepartVertex0.getLabel());
      assertEquals((-2128.344558603042), onboardDepartVertex0.getY(), 0.01);
      assertEquals("", onboardDepartVertex0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      multiShortestPathTree0.dump();
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertNotNull(multiShortestPathTree0);
      
      String string0 = "P{";
      double double0 = 1821.8644717230952;
      double double1 = 0.0;
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, double0, double1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(onboardDepartVertex0);
      assertEquals(1821.8644717230952, onboardDepartVertex0.getLon(), 0.01);
      assertEquals("P{", onboardDepartVertex0.getName());
      assertEquals("P{", onboardDepartVertex0.getLabel());
      assertEquals(0, onboardDepartVertex0.getDegreeOut());
      assertEquals(0, onboardDepartVertex0.getIndex());
      assertEquals(0.0, onboardDepartVertex0.getY(), 0.01);
      assertEquals(0, onboardDepartVertex0.getDegreeIn());
      assertEquals(1821.8644717230952, onboardDepartVertex0.getX(), 0.01);
      assertEquals(1, onboardDepartVertex0.getMaxIndex());
      assertEquals(0.0, onboardDepartVertex0.getLat(), 0.01);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getStates(onboardDepartVertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertNotNull(multiShortestPathTree0);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getVertices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertNotNull(multiShortestPathTree0);
      
      MultiShortestPathTree multiShortestPathTree1 = new MultiShortestPathTree();
      assertFalse(multiShortestPathTree1.equals((Object)multiShortestPathTree0));
      assertNotNull(multiShortestPathTree1);
      
      Map<Vertex, List<State>> map0 = multiShortestPathTree1.stateSets;
      assertNull(map0);
      
      multiShortestPathTree1.stateSets = multiShortestPathTree0.stateSets;
      multiShortestPathTree0.stateSets = map0;
      Vertex vertex0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertNotNull(multiShortestPathTree0);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      Graph graph0 = null;
      String string0 = "&}g5";
      TreeMap<Vertex, List<State>> treeMap0 = new TreeMap<Vertex, List<State>>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) treeMap0;
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      assertEquals(0, treeMap0.size());
      assertEquals(0, multiShortestPathTree0.stateSets.size());
      assertTrue(multiShortestPathTree0.stateSets.isEmpty());
      
      String string1 = "g=H6";
      double double0 = 6174.598615450433;
      ParkAndRideVertex parkAndRideVertex0 = new ParkAndRideVertex(graph0, string0, string1, double0, double0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(parkAndRideVertex0);
      assertEquals(6174.598615450433, parkAndRideVertex0.getY(), 0.01);
      assertEquals(6174.598615450433, parkAndRideVertex0.getX(), 0.01);
      assertEquals(0, parkAndRideVertex0.getDegreeOut());
      assertEquals(0, parkAndRideVertex0.getIndex());
      assertEquals("g=H6", parkAndRideVertex0.getName());
      assertEquals(6174.598615450433, parkAndRideVertex0.getLon(), 0.01);
      assertEquals(1, parkAndRideVertex0.getMaxIndex());
      assertEquals("&}g5", parkAndRideVertex0.getLabel());
      assertEquals(6174.598615450433, parkAndRideVertex0.getLat(), 0.01);
      assertEquals(0, parkAndRideVertex0.getDegreeIn());
      assertEquals("g=H6", parkAndRideVertex0.getId());
      
      String string2 = "(a}`|K";
      parkAndRideVertex0.setId(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("(a}`|K", parkAndRideVertex0.getId());
      assertEquals(6174.598615450433, parkAndRideVertex0.getY(), 0.01);
      assertEquals(6174.598615450433, parkAndRideVertex0.getX(), 0.01);
      assertEquals(0, parkAndRideVertex0.getDegreeOut());
      assertEquals(0, parkAndRideVertex0.getIndex());
      assertEquals("g=H6", parkAndRideVertex0.getName());
      assertEquals(6174.598615450433, parkAndRideVertex0.getLon(), 0.01);
      assertEquals(1, parkAndRideVertex0.getMaxIndex());
      assertEquals("&}g5", parkAndRideVertex0.getLabel());
      assertEquals(6174.598615450433, parkAndRideVertex0.getLat(), 0.01);
      assertEquals(0, parkAndRideVertex0.getDegreeIn());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(parkAndRideVertex0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.opentripplanner.routing.vertextype.ParkAndRideVertex cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertNotNull(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      String string0 = routingRequest0.toString();
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals("null,null null,null 1.7976931348623157E308 Fri Feb 14 20:21:21 GMT 2014 false QUICK WALK, TRAM, SUBWAY, RAIL, BUS, FERRY, CABLE_CAR, GONDOLA, FUNICULAR, TRANSIT, TRAINISH, BUSISH 3", string0);
      assertNotNull(string0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      String string1 = stopNotLinkedForTransfers0.getHTMLMessage();
      assertFalse(string1.equals((Object)string0));
      assertEquals("Stop null not near any other stops; no transfers are possible.", string1);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      
      String string2 = stopNotLinkedForTransfers0.toString();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("GraphBuilderAnnotation: Stop null not near any other stops; no transfers are possible.", string2);
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.batch);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertNotNull(multiShortestPathTree0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(transitStop0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertNotNull(routingRequest0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      String string0 = routingRequest0.toString();
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals("null,null null,null 1.7976931348623157E308 Fri Feb 14 20:21:21 GMT 2014 false QUICK WALK, TRAM, SUBWAY, RAIL, BUS, FERRY, CABLE_CAR, GONDOLA, FUNICULAR, TRANSIT, TRAINISH, BUSISH 3", string0);
      assertNotNull(string0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      String string1 = stopNotLinkedForTransfers0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("GraphBuilderAnnotation: Stop null not near any other stops; no transfers are possible.", string1);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      
      State state0 = new State(vertex0, routingRequest0);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.allowBikeRental);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean0);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      assertNotNull(multiShortestPathTree0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      String string2 = "+oTko{z~7XSElz";
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertNotNull(routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertNotNull(multiShortestPathTree0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2, routingRequest0.maxTransfers);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertNotNull(list0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains(state0));
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertNotNull(routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean0);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertNotNull(collection0);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(collection0.contains(state0));
      
      boolean boolean2 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertTrue(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(1392409281000L, state0.getTimeInMillis());
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertNotNull(routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(boolean0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.batch);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(transitStop0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      State state0 = new State(vertex0, routingRequest0);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(boolean0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      String string0 = multiShortestPathTree0.toString();
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals("MultiSPT(1 vertices)", string0);
      assertNotNull(string0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1, int0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      
      State state1 = null;
      boolean boolean0 = MultiShortestPathTree.dominates(state1, state0);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(boolean0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.batch);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeRenting());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(transitStop0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeParked());
      
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeParked());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isEverBoarded());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals("MultiSPT(1 vertices)", string0);
      assertNotNull(string0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(transitStop0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      
      boolean boolean0 = true;
      routingRequest0.kissAndRide = boolean0;
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean3 = multiShortestPathTree0.add(state0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean4 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isEverBoarded());
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals("MultiSPT(1 vertices)", string0);
      assertNotNull(string0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      State state1 = multiShortestPathTree0.getState(transitStop0);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertNull(state1);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertTrue(routingRequest0.softWalkLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(1, int0);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertNotNull(routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertNull(state0.getZone());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertNull(state0.getZone());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertNull(state0.getZone());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      String string0 = stopNotLinkedForTransfers0.toString();
      assertEquals("GraphBuilderAnnotation: Stop null not near any other stops; no transfers are possible.", string0);
      assertNotNull(string0);
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertNotNull(collection0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(collection0.contains(state0));
      
      boolean boolean2 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(state0.isOnboard());
      assertNull(state0.getBackMode());
      assertNull(state0.getZone());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      
      State state1 = new State(transitStop0, routingRequest0.elevatorHopCost, routingRequest0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertFalse(state1.equals((Object)state0));
      assertNotNull(state1);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertNull(state1.getZone());
      assertFalse(state1.isBackWalkingBike());
      assertFalse(state1.isBikeRenting());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isBikeParked());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(0, state1.getNumBoardings());
      assertTrue(state1.isFinal());
      assertFalse(state1.isEverBoarded());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertNull(state1.getBackMode());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      
      System.setCurrentTimeMillis(routingRequest0.bikeRentalPickupCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      boolean boolean3 = multiShortestPathTree0.add(state1);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertFalse(state1.equals((Object)state0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertNull(state1.getZone());
      assertFalse(state1.isBackWalkingBike());
      assertFalse(state1.isBikeRenting());
      assertEquals(20L, state1.getStartTimeSeconds());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertFalse(state1.isCarParked());
      assertFalse(state1.isBikeParked());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertFalse(state1.isOnboard());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(20000L, state1.getTimeInMillis());
      assertEquals(0, state1.getNumBoardings());
      assertTrue(state1.isFinal());
      assertFalse(state1.isEverBoarded());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertNull(state1.getBackMode());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(20L, state1.getTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertNotSame(state1, state0);
      
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertNotNull(list0);
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(list0.contains(state0));
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertNotNull(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      multiShortestPathTree0.dump();
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals("MultiSPT(1 vertices)", string0);
      assertNotNull(string0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean3 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isEverBoarded());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(transitStop0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertNotNull(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      
      State state0 = new State(vertex0, routingRequest0);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertTrue(state0.isFinal());
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      
      boolean boolean0 = true;
      routingRequest0.kissAndRide = boolean0;
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state0);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isFinal());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isFinal());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean3 = multiShortestPathTree0.add(state0);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isFinal());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean4 = multiShortestPathTree0.visit(state0);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertFalse(state0.isCarParked());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isFinal());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      String string0 = multiShortestPathTree0.toString();
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals("MultiSPT(1 vertices)", string0);
      assertNotNull(string0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      State state1 = multiShortestPathTree0.getState(transitStop0);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertNull(state1);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.alightSlack);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.batch);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1, int0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertNotNull(routingRequest0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      State state0 = new State(vertex0, routingRequest0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertTrue(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      
      boolean boolean0 = true;
      routingRequest0.kissAndRide = boolean0;
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      state0.weight = routingRequest0.waitAtBeginningFactor;
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.2, state0.getWeight(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      
      boolean boolean3 = multiShortestPathTree0.add(state0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.2, state0.weight, 0.01);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.2, state0.getWeight(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean4 = multiShortestPathTree0.visit(state0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.2, state0.weight, 0.01);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.2, state0.getWeight(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isBackWalkingBike());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isFinal());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertNull(state0.getBackMode());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      String string0 = multiShortestPathTree0.toString();
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals("MultiSPT(1 vertices)", string0);
      assertNotNull(string0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      State state1 = multiShortestPathTree0.getState(transitStop0);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertNull(state1);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1, int0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.batch);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertNotNull(collection0);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertTrue(collection0.contains(state0));
      
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state1, state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertNotNull(routingRequest0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = stopNotLinkedForTransfers0.getMessage();
      assertEquals("Stop null not near any other stops; no transfers are possible.", string0);
      assertNotNull(string0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      routingRequest0.batch = boolean0;
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(state0.getReverseOptimizing());
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      
      double double0 = (-989.4);
      state0.weight = double0;
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(state0.getReverseOptimizing());
      assertEquals((-989.4), state0.getWeight(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals((-989.4), state0.weight, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(state0.getReverseOptimizing());
      assertEquals((-989.4), state0.getWeight(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      multiShortestPathTree0.dump();
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals((-989.4), state0.weight, 0.01);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(state0.getReverseOptimizing());
      assertEquals((-989.4), state0.getWeight(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertNull(state0.getBackMode());
      assertFalse(state0.isCarParked());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeRenting());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isOnboard());
      assertFalse(state0.isBikeParked());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      String string1 = multiShortestPathTree0.toString();
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertFalse(routingRequest0.batch);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(0, routingRequest0.alightSlack);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertFalse(string1.equals((Object)string0));
      assertEquals("MultiSPT(1 vertices)", string1);
      assertNotNull(string1);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(3, routingRequest0.getNumItineraries());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertNotNull(routingRequest0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertNotNull(state0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeParked());
      assertTrue(state0.isFinal());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      
      boolean boolean0 = true;
      routingRequest0.kissAndRide = boolean0;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isFinal());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeParked());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertNotNull(multiShortestPathTree0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isFinal());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeParked());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      state0.weight = routingRequest0.waitAtBeginningFactor;
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0.2, state0.getWeight(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isFinal());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeParked());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      
      boolean boolean3 = multiShortestPathTree0.add(state0);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0.2, state0.getWeight(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isFinal());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeParked());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean4 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(0.2, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0.2, state0.getWeight(), 0.01);
      assertNull(state0.getZone());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isOnboard());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0, state0.getNumBoardings());
      assertFalse(state0.isBikeRenting());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isFinal());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBikeParked());
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state0.isEverBoarded());
      assertFalse(state0.isCarParked());
      assertEquals(0, state0.getPreTransitTimeDelta());
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals("MultiSPT(1 vertices)", string0);
      assertNotNull(string0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      State state1 = multiShortestPathTree0.getState(transitStop0);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertNull(state1);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      int int0 = new Integer(routingRequest0.MIN_SIMILARITY);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.transferPenalty);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertTrue(routingRequest0.kissAndRide);
      assertTrue(routingRequest0.driveOnRight);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(1000, int0);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertNotNull(routingRequest0);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      
      State state0 = new State(vertex0, routingRequest0.transferPenalty, routingRequest0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertTrue(state0.isFinal());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      
      AgencyAndId agencyAndId0 = state0.getRoute();
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNull(agencyAndId0);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertTrue(state0.isFinal());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      
      routingRequest0.startingTransitTripId = agencyAndId0;
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertTrue(state0.isFinal());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean0);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertTrue(state0.isFinal());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertNotNull(multiShortestPathTree0);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean1 = multiShortestPathTree0.add(state0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertTrue(state0.isFinal());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      multiShortestPathTree0.dump();
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean2 = multiShortestPathTree0.visit(state0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(state0.isEverBoarded());
      assertEquals(0L, state0.getStartTimeSeconds());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isBikeParked());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertTrue(state0.isFinal());
      assertNull(state0.getBackMode());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0, state0.getPreTransitTime());
      assertFalse(state0.isBackWalkingBike());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertFalse(state0.isCarParked());
      assertNull(state0.getZone());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertFalse(state0.isOnboard());
      assertEquals(0L, state0.getTimeSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      String string0 = multiShortestPathTree0.toString();
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals("MultiSPT(1 vertices)", string0);
      assertNotNull(string0);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      State state1 = new State(vertex0, routingRequest0);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertFalse(state1.equals((Object)state0));
      assertNotNull(state1);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(state1.isBikeParked());
      assertNull(state1.getBackMode());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertFalse(state1.isOnboard());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(1, int0);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean3 = multiShortestPathTree0.visit(state1);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertEquals(0, routingRequest0.boardSlack);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertFalse(routingRequest0.walkingBike);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertFalse(routingRequest0.kissAndRide);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertFalse(routingRequest0.reverseOptimizing);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(0, routingRequest0.transferSlack);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.batch);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(3, routingRequest0.numItineraries);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertEquals(0.0, state1.weight, 0.01);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(state1.equals((Object)state0));
      assertFalse(boolean3);
      assertTrue(routingRequest0.transitAllowed());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertFalse(state1.getReverseOptimizing());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(state1.isBikeParked());
      assertNull(state1.getBackMode());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertTrue(state1.isFinal());
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertFalse(state1.isBackWalkingBike());
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertFalse(state1.isOnboard());
      assertFalse(state1.isCarParked());
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertEquals(TraverseMode.WALK, state1.getNonTransitMode());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertFalse(state1.isEverBoarded());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertNotSame(state1, state0);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopNotLinkedForTransfers stopNotLinkedForTransfers0 = new StopNotLinkedForTransfers(transitStop0);
      assertNotNull(stopNotLinkedForTransfers0);
      
      Vertex vertex0 = stopNotLinkedForTransfers0.getReferencedVertex();
      assertNull(vertex0);
      
      RoutingRequest routingRequest0 = new RoutingRequest();
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertNotNull(routingRequest0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      State state0 = new State(vertex0, routingRequest0);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertFalse(routingRequest0.kissAndRide);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(0.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertNotNull(state0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0.0, state0.getWeight(), 0.01);
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      
      state0.weight = routingRequest0.bikeSpeed;
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertTrue(state0.isFinal());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(5.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      
      boolean boolean0 = true;
      routingRequest0.kissAndRide = boolean0;
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state0);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(5.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertNotNull(multiShortestPathTree0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(0, multiShortestPathTree0.getVertexCount());
      
      boolean boolean2 = multiShortestPathTree0.add(state0);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(5.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean3 = multiShortestPathTree0.add(state0);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(5.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean4 = multiShortestPathTree0.visit(state0);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(5.0, state0.weight, 0.01);
      assertEquals(0.0, state0.walkDistance, 0.01);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1392409281L, state0.getTimeSeconds());
      assertEquals(0, state0.getNumBoardings());
      assertEquals(0L, state0.getElapsedTimeSeconds());
      assertFalse(state0.isFinal());
      assertFalse(state0.isBikeParked());
      assertFalse(state0.isEverBoarded());
      assertEquals(TraverseMode.WALK, state0.getNonTransitMode());
      assertFalse(state0.isOnboard());
      assertEquals(1392409281000L, state0.getTimeInMillis());
      assertEquals(0.0, state0.getWalkDistance(), 0.01);
      assertEquals(0.0, state0.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state0.getTimeDeltaSeconds());
      assertEquals(0.0, state0.getOptimizedElapsedTimeSeconds(), 0.01);
      assertEquals(1392409281L, state0.getStartTimeSeconds());
      assertFalse(state0.isBackWalkingBike());
      assertEquals(0, state0.getLastNextArrivalDelta());
      assertFalse(state0.isCarParked());
      assertFalse(state0.isBikeRenting());
      assertEquals(0, state0.getPreTransitTimeDelta());
      assertEquals(0, state0.getAbsTimeDeltaSeconds());
      assertEquals(0, state0.getPreTransitTime());
      assertEquals(0.0, state0.getWalkSinceLastTransit(), 0.01);
      assertNull(state0.getZone());
      assertEquals(5.0, state0.getWeight(), 0.01);
      assertFalse(state0.getReverseOptimizing());
      assertEquals(0L, state0.getLastAlightedTimeSeconds());
      assertEquals(0.0, state0.getWalkDistanceDelta(), 0.01);
      assertNull(state0.getBackMode());
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean5 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5);
      
      String string0 = multiShortestPathTree0.toString();
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals("MultiSPT(1 vertices)", string0);
      assertNotNull(string0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      State state1 = new State(transitStop0, multiShortestPathTree0.options);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(state1.equals((Object)state0));
      assertNotNull(state1);
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(TraverseMode.CAR, state1.getNonTransitMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeParked());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertFalse(state1.isFinal());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getBackMode());
      assertFalse(state1.isCarParked());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      int int0 = multiShortestPathTree0.getVertexCount();
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertEquals(1, int0);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      int int1 = multiShortestPathTree0.getVertexCount();
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      multiShortestPathTree0.dump();
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      
      boolean boolean6 = multiShortestPathTree0.add(state1);
      assertEquals(0.0, state1.weight, 0.01);
      assertEquals(0.0, state1.walkDistance, 0.01);
      assertTrue(routingRequest0.kissAndRide);
      assertEquals(0, routingRequest0.transferSlack);
      assertFalse(routingRequest0.allowBikeRental);
      assertEquals(120, routingRequest0.carDropoffTime);
      assertEquals(9223372036854775807L, routingRequest0.worstTime);
      assertEquals(1000, RoutingRequest.MIN_SIMILARITY);
      assertEquals(1392409281L, routingRequest0.dateTime);
      assertEquals(1.0, routingRequest0.waitReluctance, 0.01);
      assertFalse(routingRequest0.walkingBike);
      assertFalse(routingRequest0.parkAndRide);
      assertEquals(60, routingRequest0.bikeParkTime);
      assertEquals(0.0, routingRequest0.triangleSafetyFactor, 0.01);
      assertEquals(0.2, routingRequest0.waitAtBeginningFactor, 0.01);
      assertEquals(30, routingRequest0.bikeRentalDropoffTime);
      assertFalse(routingRequest0.ignoreRealtimeUpdates);
      assertEquals(0, routingRequest0.boardSlack);
      assertFalse(routingRequest0.reverseOptimizeOnTheFly);
      assertEquals(30, routingRequest0.bikeRentalDropoffCost);
      assertFalse(routingRequest0.wheelchairAccessible);
      assertEquals(0.0, routingRequest0.triangleSlopeFactor, 0.01);
      assertEquals(0.0833333333333, routingRequest0.maxSlope, 0.01);
      assertEquals(0L, routingRequest0.clampInitialWait);
      assertFalse(routingRequest0.reverseOptimizing);
      assertEquals(0, routingRequest0.alightSlack);
      assertEquals(300, routingRequest0.useUnpreferredRoutesPenalty);
      assertFalse(routingRequest0.arriveBy);
      assertEquals(600, routingRequest0.bikeBoardCost);
      assertEquals(1.0, routingRequest0.heuristicWeight, 0.01);
      assertEquals(0, routingRequest0.transferPenalty);
      assertTrue(routingRequest0.softWalkLimiting);
      assertEquals(1.33, routingRequest0.walkSpeed, 0.01);
      assertEquals(600, routingRequest0.walkBoardCost);
      assertEquals(1.0, routingRequest0.turnReluctance, 0.01);
      assertFalse(routingRequest0.intermediatePlacesOrdered);
      assertFalse(routingRequest0.disableRemainingWeightHeuristic);
      assertEquals(90, routingRequest0.elevatorBoardTime);
      assertEquals(120, routingRequest0.bikeParkCost);
      assertEquals(40.0, routingRequest0.carSpeed, 0.01);
      assertEquals(3, routingRequest0.numItineraries);
      assertEquals(90, routingRequest0.elevatorBoardCost);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWalkDistance, 0.01);
      assertEquals(2.0, routingRequest0.stairsReluctance, 0.01);
      assertEquals(120, routingRequest0.bikeRentalPickupCost);
      assertEquals(0, routingRequest0.bikeSwitchTime);
      assertEquals(5.0, routingRequest0.bikeSpeed, 0.01);
      assertEquals(300, routingRequest0.otherThanPreferredRoutesPenalty);
      assertEquals(0, routingRequest0.bikeSwitchCost);
      assertFalse(routingRequest0.bikeParkAndRide);
      assertEquals(1.7976931348623157E308, routingRequest0.maxWeight, 0.01);
      assertEquals(10.0, routingRequest0.preTransitOverageRate, 0.01);
      assertFalse(routingRequest0.useBikeRentalAvailabilityInformation);
      assertEquals(Integer.MAX_VALUE, routingRequest0.maxPreTransitTime);
      assertEquals(2.9, routingRequest0.carAccelerationSpeed, 0.01);
      assertEquals(2, routingRequest0.maxTransfers);
      assertEquals(20, routingRequest0.elevatorHopCost);
      assertEquals(60, routingRequest0.bikeRentalPickupTime);
      assertEquals(2.9, routingRequest0.carDecelerationSpeed, 0.01);
      assertEquals(20, routingRequest0.elevatorHopTime);
      assertEquals(60.0, routingRequest0.softWalkPenalty, 0.01);
      assertFalse(routingRequest0.showIntermediateStops);
      assertEquals(300.0, routingRequest0.preTransitPenalty, 0.01);
      assertEquals(2.0, routingRequest0.walkReluctance, 0.01);
      assertEquals(5.0, routingRequest0.softWalkOverageRate, 0.01);
      assertTrue(routingRequest0.driveOnRight);
      assertEquals(0.0, routingRequest0.triangleTimeFactor, 0.01);
      assertEquals(180, routingRequest0.nonpreferredTransferPenalty);
      assertFalse(routingRequest0.batch);
      assertTrue(routingRequest0.softPreTransitLimiting);
      assertFalse(state1.equals((Object)state0));
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6);
      assertNull(state1.getZone());
      assertEquals(0.0, state1.getWalkSinceLastTransit(), 0.01);
      assertEquals(0L, state1.getElapsedTimeSeconds());
      assertEquals(TraverseMode.CAR, state1.getNonTransitMode());
      assertEquals(0.0, state1.getWalkDistanceDelta(), 0.01);
      assertEquals(0.0, state1.getWalkDistance(), 0.01);
      assertEquals(0, state1.getAbsTimeDeltaSeconds());
      assertEquals(0, state1.getLastNextArrivalDelta());
      assertFalse(state1.isBackWalkingBike());
      assertEquals(0, state1.getNumBoardings());
      assertFalse(state1.isBikeRenting());
      assertEquals(0, state1.getPreTransitTime());
      assertFalse(state1.isBikeParked());
      assertEquals(0.0, state1.getWeight(), 0.01);
      assertFalse(state1.isOnboard());
      assertEquals(1392409281000L, state1.getTimeInMillis());
      assertFalse(state1.isFinal());
      assertEquals(0.0, state1.getOptimizedElapsedTimeSeconds(), 0.01);
      assertFalse(state1.getReverseOptimizing());
      assertFalse(state1.isEverBoarded());
      assertEquals(1392409281L, state1.getStartTimeSeconds());
      assertEquals(1392409281L, state1.getTimeSeconds());
      assertEquals(0, state1.getPreTransitTimeDelta());
      assertEquals(0.0, state1.getWalkAtLastTransit(), 0.01);
      assertEquals(0, state1.getTimeDeltaSeconds());
      assertNull(state1.getBackMode());
      assertFalse(state1.isCarParked());
      assertEquals(0L, state1.getLastAlightedTimeSeconds());
      assertFalse(routingRequest0.intermediatesEffectivelyOrdered());
      assertEquals(600, routingRequest0.getBoardCostLowerBound());
      assertTrue(routingRequest0.transitAllowed());
      assertEquals(1392409281L, routingRequest0.getSecondsSinceEpoch());
      assertFalse(routingRequest0.hasIntermediatePlaces());
      assertEquals(3, routingRequest0.getNumItineraries());
      assertEquals(1.33, routingRequest0.getStreetSpeedUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, routingRequest0.getMaxWalkDistance(), 0.01);
      assertEquals(1, multiShortestPathTree0.getVertexCount());
      assertNotSame(state1, state0);
  }
}
